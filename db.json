{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/anodyne/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"source/assets/sql-cubed-logo.png","path":"assets/sql-cubed-logo.png","modified":0,"renderable":0},{"_id":"source/assets/david-avatar.jpeg","path":"assets/david-avatar.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1583273098401},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1583273098402},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1583273098402},{"_id":"themes/landscape/_config.yml","hash":"dac9db1f920c5e0d283b0895202d2ed483399c5a","modified":1583273562667},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1583273098402},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1583273098411},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1583273096437},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1583273098409},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1583273098409},{"_id":"themes/landscape/layout/index.ejs","hash":"003421f9a57927aa85aa71905313badb0b47820e","modified":1583273461489},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1583273098410},{"_id":"themes/landscape/layout/post.ejs","hash":"810f046277fc49f523a72d1552eab1e39d3c299c","modified":1583273461489},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1583273098410},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1583273098410},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1583273098402},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1583273098402},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1583273098403},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1583273098403},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1583273098403},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1583273098403},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1583273098403},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1583273098403},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1583273098403},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1583273098403},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1583273098404},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1583273098404},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1583273098411},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1583273098404},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1583273098404},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1583273098404},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"a0a0f191faafca2aa14abd32ec1b1a385dae1af7","modified":1583273461486},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"990003870f8c4303bfe0e52d9446265a7c1af676","modified":1583273461487},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1583273098405},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1583273098405},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1583273098405},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"30c3ab5847a18db678ffbe3fc6309ec96cb010c0","modified":1583273461488},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1583273098405},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1583273098407},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1583273098407},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1583273098408},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1583273098408},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1583273098408},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1583273098408},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1583273098411},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1583273098417},{"_id":"themes/landscape/source/css/style.styl","hash":"c7285882370f522c3bb17055cdf615cf92f48cd0","modified":1583273461504},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1583273098425},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1583273098426},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1583273098426},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1583273098426},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1583273098427},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1583273098427},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1583273098431},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1583273098432},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1583273098433},{"_id":"themes/landscape/source/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1583273461512},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1583273098406},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1583273098406},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1583273098406},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1583273098406},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1583273098407},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1583273098407},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1583273098412},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1583273098412},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"cc0a862b31359a85d12579e49d2eca58d128275c","modified":1583273461490},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1583273098413},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1583273098413},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1583273098414},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1583273098415},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1583273098415},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1583273098416},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1583273098416},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1583273098417},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1583273098417},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1583273098418},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1583273098419},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1583273098422},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1583273098428},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1583273098428},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1583273098429},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1583273098429},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1583273098430},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1583273098431},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1583273098422},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1583273098421},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1583273098424},{"_id":"themes/landscape/layout/indexs.md","hash":"e98b27005c0fb0d7618ae3815654ac33f8c02313","modified":1583273461489},{"_id":"themes/landscape/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1583273461489},{"_id":"themes/landscape/layout/_partial/article_copyright.ejs","hash":"7f28d7736133cc8012fbb8a5eeeb1174b862aec6","modified":1583273461486},{"_id":"themes/landscape/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1583273461486},{"_id":"themes/landscape/layout/_partial/dashang.ejs","hash":"1b849749e557d2af482dc49acc93407b72c717f3","modified":1583273461487},{"_id":"themes/landscape/layout/_partial/copyright.ejs","hash":"d209ddcfd0149760a30837076be345a09e1797c5","modified":1583273461487},{"_id":"themes/landscape/layout/_partial/full-toc.ejs","hash":"f39f2ab3a67042e55cd6a51792bfd5ad697808f0","modified":1583273461488},{"_id":"themes/landscape/layout/_partial/friends.ejs","hash":"7a31274da81c076021692ff7c80a1be3bbf6fa4c","modified":1583273461487},{"_id":"themes/landscape/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1583273461488},{"_id":"themes/landscape/layout/_partial/meta.ejs","hash":"4f7e00e37783208cb350842085f1987ee854452e","modified":1583273461488},{"_id":"themes/landscape/layout/_partial/nav-right.ejs","hash":"ad54659a10f0c75b502da6f0ae07f18f55c9d3ab","modified":1583273461488},{"_id":"themes/landscape/layout/_partial/nav-left.ejs","hash":"c2c08485361645d7e75addb7a458647477a6f8db","modified":1583273461488},{"_id":"themes/landscape/layout/_partial/tag.ejs","hash":"71340ddd60ea14061771463140e299204ecf7ed9","modified":1583273461488},{"_id":"themes/landscape/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1583273461488},{"_id":"themes/landscape/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1583273461498},{"_id":"themes/landscape/source/css/mobile.styl","hash":"3934bcba5095e7e6c6b3a801a6e4fa3a35096e10","modified":1583273461503},{"_id":"themes/landscape/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1583273461511},{"_id":"themes/landscape/source/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1583273461511},{"_id":"themes/landscape/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1583273461511},{"_id":"themes/landscape/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1583273461512},{"_id":"themes/landscape/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1583273461504},{"_id":"themes/landscape/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1583273461505},{"_id":"themes/landscape/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1583273461505},{"_id":"themes/landscape/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1583273461506},{"_id":"themes/landscape/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1583273461506},{"_id":"themes/landscape/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1583273461507},{"_id":"themes/landscape/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1583273461486},{"_id":"themes/landscape/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1583273461486},{"_id":"themes/landscape/layout/_partial/comments/gentie.ejs","hash":"1d6eacdadeb247e3b349ca7168f797beae8ff4c5","modified":1583273461486},{"_id":"themes/landscape/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1583273461487},{"_id":"themes/landscape/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1583273461487},{"_id":"themes/landscape/source/css/_partial/autocomplete.styl","hash":"f6847a2c6d35dbd6d06dc591bd34ed2019784048","modified":1583273461489},{"_id":"themes/landscape/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1583273461490},{"_id":"themes/landscape/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1583273461490},{"_id":"themes/landscape/source/css/_partial/font.styl","hash":"4d5ac149709447c5eee45f0e23dadeea94fd98ce","modified":1583273461490},{"_id":"themes/landscape/source/css/_partial/full-toc.styl","hash":"0ba318911afbbbffbd2473b472aedf2d3900e978","modified":1583273461490},{"_id":"themes/landscape/source/css/_partial/nav-left.styl","hash":"1bd865029ba8c11750fff83d87f69e5d7c137928","modified":1583273461490},{"_id":"themes/landscape/source/css/_partial/nav-right.styl","hash":"3da8fa04efccfd054a6a65f7153f197d4d68281d","modified":1583273461491},{"_id":"themes/landscape/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1583273461491},{"_id":"themes/landscape/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1583273461491},{"_id":"themes/landscape/source/css/_partial/post.styl","hash":"c791204c5f10fd876025abf08f4dcb3ca5dde3b6","modified":1583273461491},{"_id":"themes/landscape/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1583273461491},{"_id":"themes/landscape/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1583273461492},{"_id":"themes/landscape/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1583273461492},{"_id":"themes/landscape/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1583273461493},{"_id":"themes/landscape/source/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1583273461493},{"_id":"themes/landscape/source/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1583273461494},{"_id":"themes/landscape/source/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1583273461495},{"_id":"themes/landscape/source/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1583273461495},{"_id":"themes/landscape/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1583273461496},{"_id":"themes/landscape/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1583273461499},{"_id":"themes/landscape/source/css/hl_theme/atom-light.styl","hash":"69d184a682bcaeba2b180b437dc4431bc3be38aa","modified":1583273461500},{"_id":"themes/landscape/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1583273461500},{"_id":"themes/landscape/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1583273461500},{"_id":"themes/landscape/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1583273461501},{"_id":"themes/landscape/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1583273461501},{"_id":"themes/landscape/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1583273461501},{"_id":"themes/landscape/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1583273461501},{"_id":"themes/landscape/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1583273461502},{"_id":"themes/landscape/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1583273461502},{"_id":"themes/landscape/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1583273461502},{"_id":"themes/landscape/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1583273461502},{"_id":"themes/landscape/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1583273461503},{"_id":"themes/landscape/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1583273461503},{"_id":"themes/landscape/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1583273461503},{"_id":"themes/landscape/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1583273461503},{"_id":"themes/landscape/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1583273461510},{"_id":"themes/landscape/source/js/gitalk.js","hash":"00419a6156f5d4f9b8aba00d446cd64ba73e0d12","modified":1583273461509},{"_id":"themes/anodyne/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1583273887265},{"_id":"themes/anodyne/README.md","hash":"91e55502fdd9d96d3491c56e17ed4a5bfecec99b","modified":1583273887265},{"_id":"themes/anodyne/LICENSE","hash":"283b04655955b9d7904c85b7a4f908de1f529699","modified":1583273887265},{"_id":"themes/anodyne/_config.yml","hash":"ace834ff7760b4153069b437fdb89ee4fea6b3f5","modified":1583793347373},{"_id":"themes/anodyne/layout/index.ejs","hash":"bf4f905d19dde85d69393671b30db3d97fe7aff2","modified":1583273887270},{"_id":"themes/anodyne/layout/archive.ejs","hash":"34748b8823e32107497f4e35699b69d0df102ce9","modified":1583273887270},{"_id":"themes/anodyne/layout/layout.ejs","hash":"7047637446a9849592a923e23ca715033a7e6b8a","modified":1583273887270},{"_id":"themes/anodyne/layout/page.ejs","hash":"ea89a436ea73334a46b379a769c4ef56ecbbd4f4","modified":1583795183020},{"_id":"themes/anodyne/layout/post.ejs","hash":"247962030ad0eaf6afe3a6ed0b2735173bbae1a1","modified":1583795174070},{"_id":"themes/anodyne/languages/default.yml","hash":"ca15bcfaf72bcc03f0399adad2ccc1286b7e1f0b","modified":1583273887266},{"_id":"themes/anodyne/languages/en.yml","hash":"ca15bcfaf72bcc03f0399adad2ccc1286b7e1f0b","modified":1583273887266},{"_id":"themes/anodyne/languages/fr.yml","hash":"b436688a5a0337018527ed57910fafdc5363afed","modified":1583273887266},{"_id":"themes/anodyne/languages/ja.yml","hash":"ef896837230aadc20255ba78e950bf9654b75d91","modified":1583273887266},{"_id":"themes/anodyne/languages/nl.yml","hash":"cc155e8af2de51b4bff97400ced85028cdcbce78","modified":1583273887266},{"_id":"themes/anodyne/languages/vi.yml","hash":"c7d0c9e84bd95836ea4f47d5ad367baf689479f6","modified":1583273887266},{"_id":"themes/anodyne/languages/zh-CN.yml","hash":"900ad0d674cd5692ed50e0c0215f4e40a956ecc8","modified":1583273887267},{"_id":"themes/anodyne/languages/zh-TW.yml","hash":"a7779381e1497e072db5cad55b1737bd36dca4b7","modified":1583273887267},{"_id":"themes/anodyne/template/debug.css","hash":"07ad253d498ce573300a544913f9dc61ab0e6528","modified":1583273887271},{"_id":"themes/anodyne/template/index.html","hash":"80e2e0b6574577f3fed6d4e469a40e5da340f081","modified":1583273887289},{"_id":"themes/anodyne/template/logo.svg","hash":"96888554b49b60e3c8484e544a276a79e599c106","modified":1583273887289},{"_id":"themes/anodyne/template/style.css","hash":"1e1c2f5129500746b02280a61b42ff2e86f6c2ef","modified":1583273887289},{"_id":"themes/anodyne/template/post.html","hash":"5b214697a3dff6176f76986a30533c10ed86601c","modified":1583273887289},{"_id":"themes/anodyne/layout/_partial/after-footer.ejs","hash":"a56ee353c8adab93c6ec5fa7937b03672256b42b","modified":1583273887267},{"_id":"themes/anodyne/layout/_partial/article-archive.ejs","hash":"2f1d19a948a61784b161ae20b60d6bfe144fa355","modified":1583273887267},{"_id":"themes/anodyne/layout/_partial/article-short.ejs","hash":"ab72e80371f46ed65b9e0832241418c2d1727025","modified":1583273887267},{"_id":"themes/anodyne/layout/_partial/banner.ejs","hash":"9680062616e6e8f3cff4aa58682f3e88bb8414ae","modified":1583792916082},{"_id":"themes/anodyne/layout/_partial/comments.ejs","hash":"132a80fc6bc88377c1b338f423f0716ce9186d17","modified":1583273887268},{"_id":"themes/anodyne/layout/_partial/footer.ejs","hash":"50e9f569d0dd3232bef4028a9a07dc256792c5a8","modified":1583273887268},{"_id":"themes/anodyne/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1583273887268},{"_id":"themes/anodyne/layout/_partial/head.ejs","hash":"cfc3b3376d563550de24dcf5a64cad8d7e15101c","modified":1583273887268},{"_id":"themes/anodyne/layout/_partial/pagination.ejs","hash":"b7909df49fdff5943c2b93821a2ba6b4ed10de95","modified":1583273887269},{"_id":"themes/anodyne/layout/_partial/tag-category-index.ejs","hash":"39de576e2ebf41f53c9b1e94f0cad981a6355d2c","modified":1583273887269},{"_id":"themes/anodyne/layout/_partial/widget-about.ejs","hash":"3aa8a1143f0e5184111f93b2c21b0c30d905771d","modified":1583273887269},{"_id":"themes/anodyne/layout/_partial/widget-categories.ejs","hash":"fe6d375fbf45b5149aad72897b08e78b4f5900ba","modified":1583794733129},{"_id":"themes/anodyne/layout/_partial/widget-recent-posts.ejs","hash":"b127b23113bcdee2d4eb030bbfa9cc6acd732c3a","modified":1583273887269},{"_id":"themes/anodyne/source/css/style.styl","hash":"08493724d03c2378359e2ed8a655327a2be76850","modified":1583790388219},{"_id":"themes/anodyne/template/devicon/Read Me.txt","hash":"59f2046b2874381564e1bb8706b011c9705b0bd4","modified":1583273887272},{"_id":"themes/anodyne/template/devicon/style.css","hash":"aa9724750bd8819a5193e1b2a8db83c8fa6a2030","modified":1583273887288},{"_id":"themes/anodyne/source/css/partial/_base.styl","hash":"edb253386cc6c7fe5f48980f989ec8771abe99fa","modified":1583273887271},{"_id":"themes/anodyne/source/css/partial/_highlight.styl","hash":"c3fa7da7b998c5fb2bf5b43b0bcc51cf4c98123f","modified":1583273887271},{"_id":"themes/anodyne/source/css/partial/_content.styl","hash":"5f5b925a52f514c18263a2283c51b9296f32a376","modified":1583273887271},{"_id":"themes/anodyne/template/devicon/demo-files/demo.css","hash":"788bea3952f64bf51bd1df2d4af8bc7f6e80e798","modified":1583273887272},{"_id":"themes/anodyne/template/devicon/demo-files/demo.js","hash":"3325132f9aaedbddaeb5eab2b9c0f9ce698b8d93","modified":1583273887272},{"_id":"themes/anodyne/template/devicon/demo.html","hash":"2f7f175395db74edf2e127e0d10e4ab3c424fd35","modified":1583273887273},{"_id":"themes/anodyne/template/devicon/fonts/devicon.eot","hash":"72d1a173e58c7508bb1457a535b67472c6c35cec","modified":1583273887275},{"_id":"themes/anodyne/template/devicon/fonts/devicon.ttf","hash":"3eb76cd8e89f7046a735a7a8bc2de693c7314a07","modified":1583273887281},{"_id":"themes/anodyne/template/devicon/fonts/devicon.woff","hash":"69b887104812d0f246195fc3ee4abcafbbc4e961","modified":1583273887283},{"_id":"themes/anodyne/template/devicon/fonts/devicon.svg","hash":"e503ceedbdc3f353f977a3bcee6a341f94e52dab","modified":1583273887279},{"_id":"themes/anodyne/template/devicon/selection.json","hash":"3f0a9eefd7e91e00bcc01f47ad1a28282cd9bf48","modified":1583273887288},{"_id":"source/tags/index.md","hash":"66d84dac50702612be476a5005e71a0119d5b719","modified":1583783792140},{"_id":"public/tags/index.html","hash":"f4a540762d4e7271520e11a11071f854af8cd148","modified":1583796275192},{"_id":"public/2020/03/03/hello-world/index.html","hash":"d8faeaf811ae4e5cc7a3778abf90bbfee07ba13d","modified":1583784649227},{"_id":"public/archives/2020/index.html","hash":"11e1af546054e8937c6cce42ca7ba3b91b956099","modified":1583796275192},{"_id":"public/archives/index.html","hash":"48b4805f03cc94d431c05870b143ef16999bad7d","modified":1583796275192},{"_id":"public/archives/2020/03/index.html","hash":"1b56e3eef1afe5861454ae7a6533257e4dbaf6bd","modified":1583784649227},{"_id":"public/index.html","hash":"463a7c88f7bf2b833a9b7786c365ab045d69e7fc","modified":1583796275192},{"_id":"public/css/style.css","hash":"eee5c5125c831fc63be46e3919ff2e08f8cbf333","modified":1583784649227},{"_id":"source/_posts/SCD4.md","hash":"2782a0611629669f8a3121b3897ed58330a71870","modified":1583789522402},{"_id":"source/categories/index.md","hash":"4e1743d337d7972f11eac82c811c7444db2da4b4","modified":1583786217973},{"_id":"source/_posts/2020-02-12-why1=1.md","hash":"0e751d96f348b7b51e5b4b3beb093d98e5472e30","modified":1583786813402},{"_id":"source/assets/sql-cubed-logo.png","hash":"8cfa8e9a74ec5d6c9c140f6bfa9ccfbd7d586df4","modified":1583787245204},{"_id":"source/assets/david-avatar.jpeg","hash":"6b30f8edb5b15c5662f53529e66feaad5d9d6c10","modified":1583787528108},{"_id":"source/_posts/2018-12-30-SQL-Server-Loading-Daily-Partitions/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1581453545957},{"_id":"source/_posts/2018-12-30-SQL-Server-Loading-Daily-Partitions/SwitchOutOutput.png","hash":"7604ee91331f757acb53006d9e506b0e9cbaac0d","modified":1581453553719},{"_id":"source/_posts/2020-02-20-SCD4/output.png","hash":"aaa40a062b0c7936391a14426ac4da2854dbe709","modified":1583094945493},{"_id":"source/_posts/2018-12-30-SQL-Server-Loading-Daily-Partitions/3MovedRows.png","hash":"6ca7f998b18d7557528a967ece92edcf7396a653","modified":1581453545864},{"_id":"source/_posts/2018-12-30-SQL-Server-Loading-Daily-Partitions/2Rows.png","hash":"ed49b8c1644b396eb7aca9ba6732385a7b9622c1","modified":1581453545824},{"_id":"source/_posts/2018-12-30-SQL-Server-Loading-Daily-Partitions/3NewRows.png","hash":"77c1a08855a28d123392722d2d557f7b5e28bf2c","modified":1581453545929},{"_id":"source/_posts/2018-12-30-SQL-Server-Loading-Daily-Partitions/NewPartition.png","hash":"f30d67e38ea19e46b2bf8691c7e895b642e50c5a","modified":1581453553628},{"_id":"source/_posts/2018-12-30-SQL-Server-Loading-Daily-Partitions/RowsGone.png","hash":"2074807b4e592d190e885c54b32f005cd9d29a6d","modified":1581453553680},{"_id":"source/_posts/2019-03-03-SQL-Server-using-Merge-to-Capture-Inserts/Identities.png","hash":"3ab5bc3491536d3b09813dc81ef131726e9fdfd5","modified":1581454320896},{"_id":"source/_posts/2019-03-03-SQL-Server-using-Merge-to-Capture-Inserts/OutputWithInsert.png","hash":"baa86112bc8f2eec29a590eba63f8d4a6bdc9354","modified":1581454327422},{"_id":"source/_posts/2019-03-03-SQL-Server-using-Merge-to-Capture-Inserts/OutputUsingMerge.png","hash":"a3a0fd979a54f22767c8d0e368477681a0f2f36c","modified":1581454327393},{"_id":"source/_posts/SQL-Server-Loading-Daily-Partitions/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1581453545957},{"_id":"source/_posts/SQL-Server-Loading-Daily-Partitions/3NewRows.png","hash":"77c1a08855a28d123392722d2d557f7b5e28bf2c","modified":1581453545929},{"_id":"source/_posts/SQL-Server-Loading-Daily-Partitions/3MovedRows.png","hash":"6ca7f998b18d7557528a967ece92edcf7396a653","modified":1581453545864},{"_id":"source/_posts/SQL-Server-Loading-Daily-Partitions/NewPartition.png","hash":"f30d67e38ea19e46b2bf8691c7e895b642e50c5a","modified":1581453553628},{"_id":"source/_posts/SQL-Server-Loading-Daily-Partitions/RowsGone.png","hash":"2074807b4e592d190e885c54b32f005cd9d29a6d","modified":1581453553680},{"_id":"source/_posts/SQL-Server-Loading-Daily-Partitions/SwitchOutOutput.png","hash":"7604ee91331f757acb53006d9e506b0e9cbaac0d","modified":1581453553719},{"_id":"source/_posts/SQL-Server-Loading-Daily-Partitions/2Rows.png","hash":"ed49b8c1644b396eb7aca9ba6732385a7b9622c1","modified":1581453545824},{"_id":"source/_posts/Server-using-Merge-to-Capture-Inserts/OutputWithInsert.png","hash":"baa86112bc8f2eec29a590eba63f8d4a6bdc9354","modified":1581454327422},{"_id":"source/_posts/Server-using-Merge-to-Capture-Inserts/Identities.png","hash":"3ab5bc3491536d3b09813dc81ef131726e9fdfd5","modified":1581454320896},{"_id":"source/_posts/Server-using-Merge-to-Capture-Inserts/OutputUsingMerge.png","hash":"a3a0fd979a54f22767c8d0e368477681a0f2f36c","modified":1581454327393},{"_id":"source/_posts/SCD4/output.png","hash":"aaa40a062b0c7936391a14426ac4da2854dbe709","modified":1583094945493},{"_id":"source/_posts/Loading-Daily-Partitions/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1581453545957},{"_id":"source/_posts/Loading-Daily-Partitions/SwitchOutOutput.png","hash":"7604ee91331f757acb53006d9e506b0e9cbaac0d","modified":1581453553719},{"_id":"source/_posts/Loading-Daily-Partitions/2Rows.png","hash":"ed49b8c1644b396eb7aca9ba6732385a7b9622c1","modified":1581453545824},{"_id":"source/_posts/Loading-Daily-Partitions/3MovedRows.png","hash":"6ca7f998b18d7557528a967ece92edcf7396a653","modified":1581453545864},{"_id":"source/_posts/Loading-Daily-Partitions/3NewRows.png","hash":"77c1a08855a28d123392722d2d557f7b5e28bf2c","modified":1581453545929},{"_id":"source/_posts/Loading-Daily-Partitions/RowsGone.png","hash":"2074807b4e592d190e885c54b32f005cd9d29a6d","modified":1581453553680},{"_id":"source/_posts/Loading-Daily-Partitions/NewPartition.png","hash":"f30d67e38ea19e46b2bf8691c7e895b642e50c5a","modified":1581453553628},{"_id":"source/_posts/Using-Merge-to-Capture-Inserts/Identities.png","hash":"3ab5bc3491536d3b09813dc81ef131726e9fdfd5","modified":1581454320896},{"_id":"source/_posts/Using-Merge-to-Capture-Inserts/OutputWithInsert.png","hash":"baa86112bc8f2eec29a590eba63f8d4a6bdc9354","modified":1581454327422},{"_id":"source/_posts/Using-Merge-to-Capture-Inserts/OutputUsingMerge.png","hash":"a3a0fd979a54f22767c8d0e368477681a0f2f36c","modified":1581454327393},{"_id":"source/_posts/XOR.md","hash":"2442c426f57ffe2982c3b360f5694a5b8eff9d24","modified":1583788983167},{"_id":"source/_posts/Using-Merge-to-Capture-Inserts.md","hash":"9fc2f28aab94ba3580d7f840265e16b7d08449d0","modified":1583789657219},{"_id":"source/_posts/coalesce-vs-isnull.md","hash":"fba8ca7f62cc2b78ff044b9821981be44361d8e6","modified":1583789075811},{"_id":"source/_posts/deleting-dups.md","hash":"cec7c39e047a39b61c4f3e0e717162888e4c0555","modified":1583789000032},{"_id":"source/_posts/left-charindex.md","hash":"e511a028c33a2ec78b85e2a91faa195ad7cc72cf","modified":1583789006462},{"_id":"source/_posts/why1-equals-1.md","hash":"b4bd855fba110c7e80325290fa4f8cd399b63df1","modified":1583789031517},{"_id":"source/_posts/Loading-Daily-Partitions.md","hash":"3aba30674b1e48ecb97a8a81853f5c824ddb6f9b","modified":1583789626085},{"_id":"source/_posts/temp/temp-SCD4.md","hash":"fc495257674cc7ea112fb0ee27021577a265e09f","modified":1583793675245},{"_id":"source/_posts/sql-server/temp-SCD4.md","hash":"fc495257674cc7ea112fb0ee27021577a265e09f","modified":1583793675245},{"_id":"source/_posts/sql-server/Using-Merge-to-Capture-Inserts/OutputWithInsert.png","hash":"baa86112bc8f2eec29a590eba63f8d4a6bdc9354","modified":1581454327422},{"_id":"source/_posts/sql-server/Using-Merge-to-Capture-Inserts/Identities.png","hash":"3ab5bc3491536d3b09813dc81ef131726e9fdfd5","modified":1581454320896},{"_id":"source/_posts/sql-server/Using-Merge-to-Capture-Inserts/OutputUsingMerge.png","hash":"a3a0fd979a54f22767c8d0e368477681a0f2f36c","modified":1581454327393},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1581453545957},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/SwitchOutOutput.png","hash":"7604ee91331f757acb53006d9e506b0e9cbaac0d","modified":1581453553719},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/2Rows.png","hash":"ed49b8c1644b396eb7aca9ba6732385a7b9622c1","modified":1581453545824},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/3NewRows.png","hash":"77c1a08855a28d123392722d2d557f7b5e28bf2c","modified":1581453545929},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/NewPartition.png","hash":"f30d67e38ea19e46b2bf8691c7e895b642e50c5a","modified":1581453553628},{"_id":"source/_posts/sql-server/SCD4/output.png","hash":"aaa40a062b0c7936391a14426ac4da2854dbe709","modified":1583094945493},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/RowsGone.png","hash":"2074807b4e592d190e885c54b32f005cd9d29a6d","modified":1581453553680},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/3MovedRows.png","hash":"6ca7f998b18d7557528a967ece92edcf7396a653","modified":1581453545864},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions.md","hash":"3edfe2f9997fce2719677cdba9a7e66456368439","modified":1583795409951},{"_id":"source/_posts/sql-server/SCD4.md","hash":"2782a0611629669f8a3121b3897ed58330a71870","modified":1583793762156},{"_id":"source/_posts/sql-server/Using-Merge-to-Capture-Inserts.md","hash":"d5923836bb5ab8e71fc55952368f067bf6b42ca5","modified":1583795384513},{"_id":"source/_posts/sql-server/XOR.md","hash":"ff9e38e3348c1c194fff5db0af098a1381a3b032","modified":1583795358004},{"_id":"source/_posts/sql-server/coalesce-vs-isnull.md","hash":"086a5ce4815ab67f9450cb9660a38fc128bd81a8","modified":1583795438183},{"_id":"source/_posts/sql-server/left-charindex.md","hash":"2cc8e95b4f5598c61aaa1f8d250007fb7f39fe63","modified":1583795420319},{"_id":"source/_posts/sql-server/deleting-dups.md","hash":"8068d21cac71bbf449306cb3c516237eb0d2b901","modified":1583795429450},{"_id":"source/_posts/sql-server/why1-equals-1.md","hash":"f364bb37c2aa1671e14974dc4f2634c6f6681a64","modified":1583795370878},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part1.md","hash":"ac0be58d6ee04041c7e42d66897dd67a1529ca88","modified":1583795581495},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part2.md","hash":"136951576da6831efb8a5bec5155dd3c7d93ba04","modified":1583795586741},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part3.md","hash":"677e8dbda994f7b9406b92afecc9bdec677b8f4a","modified":1583795592823},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part2/part2-1.png","hash":"5107edd8f29551ae71aa7afde0ebc74f27061fc6","modified":1583794009248},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part2/part2-2.png","hash":"69e6551501c3f089deb9e0fcdd2c5d4cb31bfecf","modified":1583794009248},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part1/part1-1.png","hash":"7df6269a04c9a213e37e014429fe8a67d58884fb","modified":1583793980501},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part3/part3-1.png","hash":"22e5d056d28072519eb4d5343341f079d51debd5","modified":1583794016499},{"_id":"source/_posts/coding/Ssis/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1583793584686},{"_id":"source/_posts/coding/Ssis/2018-12-16-SSIS-To-Oracle-Via-ODP.md","hash":"22bc7facc354dd73b614e0a4f9b8df17d400fabe","modified":1583793584686},{"_id":"source/_posts/coding/ssis/2018-12-16-SSIS-To-Oracle-Via-ODP.md","hash":"22bc7facc354dd73b614e0a4f9b8df17d400fabe","modified":1583793584686},{"_id":"source/_posts/coding/ssis/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1583793584686},{"_id":"source/_posts/Graph/Neo4j/2018-12-17-Breadcrumb-in-SQL-and-Graph.md","hash":"cf8d243297c4e1b725f531fd57f8c7003cb636da","modified":1583793584687},{"_id":"source/_posts/Graph/Neo4j/2018-11-05-many-to-many-rdbms-vs-graph.md","hash":"2009b7e1fc831ddd31338859e3c58c7bb4302229","modified":1583793584686},{"_id":"source/_posts/Graph/Neo4j/BetterCompatibilityExample.png","hash":"b2a777e59c767c30a0632981adb1d1e2ebee5697","modified":1583793584687},{"_id":"source/_posts/Graph/Neo4j/PoorCompatibilityExample.png","hash":"364e228662f64f9aaeaae415a80506f5808cf455","modified":1583793584689},{"_id":"source/_posts/Graph/Neo4j/GraphNumberOfReports.png","hash":"b4647322ecff9e1fda284ab04ab96498f3782548","modified":1583793584688},{"_id":"source/_posts/Graph/Neo4j/GraphOutputSinglePerson.png","hash":"0a4b6fd254b1598a32c3dcd424db8db166571383","modified":1583793584688},{"_id":"source/_posts/Graph/Neo4j/RDBMSCompatibility.png","hash":"e0d71da3c137db6629f26883361cf5960f4e09d8","modified":1583793584689},{"_id":"source/_posts/Graph/Neo4j/SQLBreadcrumbOutput.png","hash":"7f4aba0512c4401e1f5f92d225b4535f12963085","modified":1583793584690},{"_id":"source/_posts/Graph/Neo4j/SQLTableOutput.png","hash":"c79a3ea00de8194e707d40265e2cb8cdc577d12a","modified":1583793584690},{"_id":"source/_posts/Graph/Neo4j.md","hash":"82065d93b0bc03989a35316c8ff2931f3566ae94","modified":1583793584686},{"_id":"source/_posts/Graph/.DS_Store","hash":"1bedcc3c86d0b132ed9d3f0a6f2cecd96be2045c","modified":1583795826554},{"_id":"source/_posts/Graph/Neo4j/GraphFinalOutput.png","hash":"78e76b355e1749c80faf510be77b9e809ff7be4c","modified":1583793584687},{"_id":"source/_posts/Graph/Neo4j/GraphicalDataOutput.png","hash":"01ce55767993c2df45c041f3c3a2180b1fc6841b","modified":1583793584689},{"_id":"source/_posts/graph/.DS_Store","hash":"1bedcc3c86d0b132ed9d3f0a6f2cecd96be2045c","modified":1583795826554},{"_id":"source/_posts/graph/Neo4j/2018-11-05-many-to-many-rdbms-vs-graph.md","hash":"2009b7e1fc831ddd31338859e3c58c7bb4302229","modified":1583793584686},{"_id":"source/_posts/graph/Neo4j/2018-12-17-Breadcrumb-in-SQL-and-Graph.md","hash":"cf8d243297c4e1b725f531fd57f8c7003cb636da","modified":1583793584687},{"_id":"source/_posts/graph/Neo4j/GraphFinalOutput.png","hash":"78e76b355e1749c80faf510be77b9e809ff7be4c","modified":1583793584687},{"_id":"source/_posts/graph/Neo4j/GraphNumberOfReports.png","hash":"b4647322ecff9e1fda284ab04ab96498f3782548","modified":1583793584688},{"_id":"source/_posts/graph/Neo4j/BetterCompatibilityExample.png","hash":"b2a777e59c767c30a0632981adb1d1e2ebee5697","modified":1583793584687},{"_id":"source/_posts/graph/Neo4j/GraphOutputSinglePerson.png","hash":"0a4b6fd254b1598a32c3dcd424db8db166571383","modified":1583793584688},{"_id":"source/_posts/graph/Neo4j/PoorCompatibilityExample.png","hash":"364e228662f64f9aaeaae415a80506f5808cf455","modified":1583793584689},{"_id":"source/_posts/graph/Neo4j/SQLBreadcrumbOutput.png","hash":"7f4aba0512c4401e1f5f92d225b4535f12963085","modified":1583793584690},{"_id":"source/_posts/graph/Neo4j/RDBMSCompatibility.png","hash":"e0d71da3c137db6629f26883361cf5960f4e09d8","modified":1583793584689},{"_id":"source/_posts/graph/Neo4j/SQLTableOutput.png","hash":"c79a3ea00de8194e707d40265e2cb8cdc577d12a","modified":1583793584690},{"_id":"source/_posts/graph/Neo4j/GraphicalDataOutput.png","hash":"01ce55767993c2df45c041f3c3a2180b1fc6841b","modified":1583793584689},{"_id":"source/_posts/graph/neo4j/2018-11-05-many-to-many-rdbms-vs-graph.md","hash":"2009b7e1fc831ddd31338859e3c58c7bb4302229","modified":1583793584686},{"_id":"source/_posts/graph/neo4j/BetterCompatibilityExample.png","hash":"b2a777e59c767c30a0632981adb1d1e2ebee5697","modified":1583793584687},{"_id":"source/_posts/graph/neo4j/2018-12-17-Breadcrumb-in-SQL-and-Graph.md","hash":"cf8d243297c4e1b725f531fd57f8c7003cb636da","modified":1583793584687},{"_id":"source/_posts/graph/neo4j/GraphFinalOutput.png","hash":"78e76b355e1749c80faf510be77b9e809ff7be4c","modified":1583793584687},{"_id":"source/_posts/graph/neo4j/GraphOutputSinglePerson.png","hash":"0a4b6fd254b1598a32c3dcd424db8db166571383","modified":1583793584688},{"_id":"source/_posts/graph/neo4j/PoorCompatibilityExample.png","hash":"364e228662f64f9aaeaae415a80506f5808cf455","modified":1583793584689},{"_id":"source/_posts/graph/neo4j/RDBMSCompatibility.png","hash":"e0d71da3c137db6629f26883361cf5960f4e09d8","modified":1583793584689},{"_id":"source/_posts/graph/neo4j/GraphNumberOfReports.png","hash":"b4647322ecff9e1fda284ab04ab96498f3782548","modified":1583793584688},{"_id":"source/_posts/graph/neo4j/GraphicalDataOutput.png","hash":"01ce55767993c2df45c041f3c3a2180b1fc6841b","modified":1583793584689},{"_id":"source/_posts/graph/neo4j/SQLBreadcrumbOutput.png","hash":"7f4aba0512c4401e1f5f92d225b4535f12963085","modified":1583793584690},{"_id":"source/_posts/graph/neo4j/SQLTableOutput.png","hash":"c79a3ea00de8194e707d40265e2cb8cdc577d12a","modified":1583793584690},{"_id":"source/_posts/.DS_Store","hash":"2a5b1526e35cdc55468d8c40793285d2f7de9994","modified":1583795831612},{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1583795631707},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph.md","hash":"9932917a88b9a5b40f18b24544d7f1eb67fa8890","modified":1583796022032},{"_id":"source/_posts/graph/neo4j/many-to-many-rdbms-vs-graph.md","hash":"b741bf821454b6c2abe39e9f0d10cd15e3b48b34","modified":1583796050668},{"_id":"source/_posts/coding/ssis/SSIS-To-Oracle-Via-ODP.md","hash":"769fdfd00554781d2b9178033c52b9ff82fc2014","modified":1583795771171},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphNumberOfReports.png","hash":"b4647322ecff9e1fda284ab04ab96498f3782548","modified":1583795923484},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphFinalOutput.png","hash":"78e76b355e1749c80faf510be77b9e809ff7be4c","modified":1583795923484},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphOutputSinglePerson.png","hash":"0a4b6fd254b1598a32c3dcd424db8db166571383","modified":1583795923484},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/SQLTableOutput.png","hash":"c79a3ea00de8194e707d40265e2cb8cdc577d12a","modified":1583795932236},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/SQLBreadcrumbOutput.png","hash":"7f4aba0512c4401e1f5f92d225b4535f12963085","modified":1583795932236},{"_id":"source/_posts/graph/neo4j/many-to-many-rdbms-vs-graph/BetterCompatibilityExample.png","hash":"b2a777e59c767c30a0632981adb1d1e2ebee5697","modified":1583795898141},{"_id":"source/_posts/graph/neo4j/many-to-many-rdbms-vs-graph/PoorCompatibilityExample.png","hash":"364e228662f64f9aaeaae415a80506f5808cf455","modified":1583795893473},{"_id":"source/_posts/graph/neo4j/many-to-many-rdbms-vs-graph/RDBMSCompatibility.png","hash":"e0d71da3c137db6629f26883361cf5960f4e09d8","modified":1583795888837},{"_id":"source/_posts/coding/ssis/SSIS-To-Oracle-Via-ODP/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1583795667808},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphicalDataOutput.png","hash":"01ce55767993c2df45c041f3c3a2180b1fc6841b","modified":1583795923484},{"_id":"public/categories/index.html","hash":"d2bf38a5e1e24b82fc85ac4876106b86fe9d5204","modified":1583796275192},{"_id":"public/2020/02/12/sql-server/deleting-dups/index.html","hash":"92d3364d4d592693200298523d54e063a5d946de","modified":1583796275192},{"_id":"public/2020/02/12/sql-server/why1-equals-1/index.html","hash":"8b3c5d84d25eb988df751dd0362bfee2b87fa596","modified":1583796275192},{"_id":"public/2020/02/11/sql-server/left-charindex/index.html","hash":"4388e3cb4b48e1889768c29bc8edde7c9966542a","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Using-Merge-to-Capture-Inserts/index.html","hash":"4b36eed7dd6eac159b5ad6a33fe8805596c81977","modified":1583796275192},{"_id":"public/2018/12/16/coding/ssis/SSIS-To-Oracle-Via-ODP/index.html","hash":"aa3d91a35e7e2d971f79338a3ed9149dcad81859","modified":1583796275192},{"_id":"public/2018/11/05/graph/neo4j/many-to-many-rdbms-vs-graph/index.html","hash":"ef8717cbf4fd06d85b95df32e8ec91e40894ad5d","modified":1583796275192},{"_id":"public/2018/11/04/sql-server/coalesce-vs-isnull/index.html","hash":"c59cfa74dd29469c00ae3765ba02443cce4cb288","modified":1583796275192},{"_id":"public/page/2/index.html","hash":"4273a8fe16ac6c38a02e18bcadc8f788942fe7a2","modified":1583796275192},{"_id":"public/categories/SQL-Server/index.html","hash":"bbe2debcf4468c4bc215cf78384a6afb8adc9f70","modified":1583796275192},{"_id":"public/categories/Coding-golang/index.html","hash":"4b7552a29ee0dab0cedade264f1b8e40b9a84a5c","modified":1583796275192},{"_id":"public/categories/Graph-Neo4j/index.html","hash":"b95bdc57519f1e5390ccf2e002975fe317e1fc76","modified":1583796275192},{"_id":"public/categories/Coding-C-SSIS/index.html","hash":"f32222a7eeeec6630798cf7e2046d3643cecbc0e","modified":1583796275192},{"_id":"public/archives/page/2/index.html","hash":"ea6b1948482049c6559fea0f14e9e852d2b05df2","modified":1583796275192},{"_id":"public/archives/2018/index.html","hash":"31b3b249ccb89443c21612acac21d0a8557dfb7b","modified":1583796275192},{"_id":"public/archives/2018/11/index.html","hash":"6609b9379f259a66764a022c6a1c3466b29ca0db","modified":1583796275192},{"_id":"public/archives/2018/12/index.html","hash":"a97540ad0b8a8ffc0d21dbc97a0c90e408078588","modified":1583796275192},{"_id":"public/archives/2019/index.html","hash":"04d12abc804d90c1f9399fd507ed436dcdd90038","modified":1583796275192},{"_id":"public/archives/2019/05/index.html","hash":"fafe179af6a2b1bdf991f3b9ed5b2df9baba012f","modified":1583796275192},{"_id":"public/archives/2019/06/index.html","hash":"81f458746844c6fbde94f43c5945056d1cb33613","modified":1583796275192},{"_id":"public/archives/2020/02/index.html","hash":"4c5c3196963c7e62817fe68fde9af82f07eb0d3e","modified":1583796275192},{"_id":"public/tags/SQL/index.html","hash":"f614a0aed9332e023a208878f157f23c063f00ab","modified":1583796275192},{"_id":"public/tags/golang/index.html","hash":"02a7a7e3c05c221cebf4ca887a45f33de61b4700","modified":1583796275192},{"_id":"public/tags/db-services/index.html","hash":"c0def397949c2fb5435853e6a132e345a9d7e489","modified":1583796275192},{"_id":"public/tags/coding/index.html","hash":"c9e391847d2516b9d2c585a7b1f05680f5c6b491","modified":1583796275192},{"_id":"public/tags/c/index.html","hash":"56f9e50d9f5de3ccd989c676701865a7f39cd1bb","modified":1583796275192},{"_id":"public/tags/ssis/index.html","hash":"dc77ba193ed523485d568dc22481ad2e7bbab433","modified":1583796275192},{"_id":"public/tags/graph/index.html","hash":"c40a67ea23192b55e6ad0a587dc6fea03ea01848","modified":1583796275192},{"_id":"public/tags/neo4j/index.html","hash":"e24f63b1b1da98968c0491431d05660308740371","modified":1583796275192},{"_id":"public/2020/02/29/sql-server/SCD4/index.html","hash":"11ec1e06ced8085fd455a5c9a032f77080e30006","modified":1583796275192},{"_id":"public/2020/02/20/sql-server/XOR/index.html","hash":"c51b6e1291bea71cdb7ff5d92d585a600ff87a4b","modified":1583796275192},{"_id":"public/2019/06/01/coding/golang/Golang-and-databases-Part2/index.html","hash":"a19ac6b10feba54a902b5c8caba33062bd1921d5","modified":1583796275192},{"_id":"public/2019/06/08/coding/golang/Golang-and-databases-Part3/index.html","hash":"d04d25a4a09f58d3894be04a5b1562b22d1d22df","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Loading-Daily-Partitions/index.html","hash":"c087e4227c98109fd84bf8f2f29403e3ab1b4a39","modified":1583796275192},{"_id":"public/2019/05/31/coding/golang/Golang-and-databases-Part1/index.html","hash":"a67b3b2d94df920b556baa5d6fd6892e8a9cfa4b","modified":1583796275192},{"_id":"public/2018/12/17/graph/neo4j/Breadcrumb-in-SQL-and-Graph/index.html","hash":"4c96b28229d15de3806f6d20a8dec298ac1fc208","modified":1583796275192},{"_id":"public/tags/sql/index.html","hash":"85782b0a83b741acd2ffe55a76511e3223de0a39","modified":1583796275192},{"_id":"public/assets/david-avatar.jpeg","hash":"6b30f8edb5b15c5662f53529e66feaad5d9d6c10","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Loading-Daily-Partitions/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Loading-Daily-Partitions/SwitchOutOutput.png","hash":"7604ee91331f757acb53006d9e506b0e9cbaac0d","modified":1583796275192},{"_id":"public/2019/06/01/coding/golang/Golang-and-databases-Part2/part2-1.png","hash":"5107edd8f29551ae71aa7afde0ebc74f27061fc6","modified":1583796275192},{"_id":"public/2019/06/01/coding/golang/Golang-and-databases-Part2/part2-2.png","hash":"69e6551501c3f089deb9e0fcdd2c5d4cb31bfecf","modified":1583796275192},{"_id":"public/2018/12/16/coding/ssis/SSIS-To-Oracle-Via-ODP/GitHub.png","hash":"34a19173ad45efe0a5e2ba9655586b78b7a4c3c0","modified":1583796275192},{"_id":"public/2018/11/05/graph/neo4j/many-to-many-rdbms-vs-graph/PoorCompatibilityExample.png","hash":"364e228662f64f9aaeaae415a80506f5808cf455","modified":1583796275192},{"_id":"public/2018/11/05/graph/neo4j/many-to-many-rdbms-vs-graph/RDBMSCompatibility.png","hash":"e0d71da3c137db6629f26883361cf5960f4e09d8","modified":1583796275192},{"_id":"public/2018/11/05/graph/neo4j/many-to-many-rdbms-vs-graph/BetterCompatibilityExample.png","hash":"b2a777e59c767c30a0632981adb1d1e2ebee5697","modified":1583796275192},{"_id":"public/2018/12/17/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphFinalOutput.png","hash":"78e76b355e1749c80faf510be77b9e809ff7be4c","modified":1583796275192},{"_id":"public/2018/12/17/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphOutputSinglePerson.png","hash":"0a4b6fd254b1598a32c3dcd424db8db166571383","modified":1583796275192},{"_id":"public/2018/12/17/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphNumberOfReports.png","hash":"b4647322ecff9e1fda284ab04ab96498f3782548","modified":1583796275192},{"_id":"public/2018/12/17/graph/neo4j/Breadcrumb-in-SQL-and-Graph/SQLBreadcrumbOutput.png","hash":"7f4aba0512c4401e1f5f92d225b4535f12963085","modified":1583796275192},{"_id":"public/2018/12/17/graph/neo4j/Breadcrumb-in-SQL-and-Graph/SQLTableOutput.png","hash":"c79a3ea00de8194e707d40265e2cb8cdc577d12a","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Using-Merge-to-Capture-Inserts/Identities.png","hash":"3ab5bc3491536d3b09813dc81ef131726e9fdfd5","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Using-Merge-to-Capture-Inserts/OutputWithInsert.png","hash":"baa86112bc8f2eec29a590eba63f8d4a6bdc9354","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Loading-Daily-Partitions/2Rows.png","hash":"ed49b8c1644b396eb7aca9ba6732385a7b9622c1","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Loading-Daily-Partitions/3MovedRows.png","hash":"6ca7f998b18d7557528a967ece92edcf7396a653","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Loading-Daily-Partitions/3NewRows.png","hash":"77c1a08855a28d123392722d2d557f7b5e28bf2c","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Loading-Daily-Partitions/RowsGone.png","hash":"2074807b4e592d190e885c54b32f005cd9d29a6d","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Loading-Daily-Partitions/NewPartition.png","hash":"f30d67e38ea19e46b2bf8691c7e895b642e50c5a","modified":1583796275192},{"_id":"public/2018/12/17/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphicalDataOutput.png","hash":"01ce55767993c2df45c041f3c3a2180b1fc6841b","modified":1583796275192},{"_id":"public/2020/02/29/sql-server/SCD4/output.png","hash":"aaa40a062b0c7936391a14426ac4da2854dbe709","modified":1583796275192},{"_id":"public/2018/12/30/sql-server/Using-Merge-to-Capture-Inserts/OutputUsingMerge.png","hash":"a3a0fd979a54f22767c8d0e368477681a0f2f36c","modified":1583796275192},{"_id":"public/2019/05/31/coding/golang/Golang-and-databases-Part1/part1-1.png","hash":"7df6269a04c9a213e37e014429fe8a67d58884fb","modified":1583796275192},{"_id":"public/assets/sql-cubed-logo.png","hash":"8cfa8e9a74ec5d6c9c140f6bfa9ccfbd7d586df4","modified":1583796275192},{"_id":"public/2019/06/08/coding/golang/Golang-and-databases-Part3/part3-1.png","hash":"22e5d056d28072519eb4d5343341f079d51debd5","modified":1583796275192}],"Category":[{"name":"SQL Server","_id":"ck7kx85s40002lhrr7j945fdq"},{"name":"test","parent":"ck7kx85s40002lhrr7j945fdq","_id":"ck7kxrfzx0002nxrr100p8pva"},{"name":"SQL Server.test","parent":"ck7kx85s40002lhrr7j945fdq","_id":"ck7kxrykv0004nxrr7fx083zr"},{"name":"Coding","_id":"ck7l2a2qz000q1hrrco1ng9xs"},{"name":"golang","parent":"ck7l2a2qz000q1hrrco1ng9xs","_id":"ck7l2a2qz000r1hrr0o2u4770"},{"name":"Coding - golang","_id":"ck7l2s3ai0000gqrrb4wl1zax"},{"name":"Coding - C# - ssis","_id":"ck7l33ot3000ugqrr3326gyjj"},{"name":"Coding - C# - SSIS","_id":"ck7l33yc30010gqrr3b6067gz"},{"name":"Graph - Neo4j","_id":"ck7l39caf001cgqrrd5uj9i5h"}],"Data":[],"Page":[{"title":"All tags","type":"tags","date":"2020-03-09T19:55:17.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ntype: \"tags\"\ndate: 2020-03-09 19:55:17\n---\n","updated":"2020-03-09T19:56:32.140Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7kvzcpo0000iwrrbmkc0ncd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All Categories","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: All Categories\ntype: \"categories\"\n---\n","date":"2020-03-09T20:36:57.973Z","updated":"2020-03-09T20:36:57.973Z","path":"categories/index.html","_id":"ck7kxaxsk0000murrg4qkcn6m","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Coalesce vs IsNull","date":"2018-11-04T00:00:00.000Z","_content":"\nSo, this is a bit of a fun short topic. In the past when I have interviewed for Senior SQL Server Developer roles, I have included the following question:\n\nWhat will the output of the following code be? -\n\n```sql\nDECLARE @X CHAR(3) = NULL;\nSELECT IsNull(@X, 'Empty');\nSELECT COALESCE(@X, 'Empty');\n```\n\nVery few people have got the answer, and frankly, that's ok. It's not the sort of thing one would know, unless they've stumbled upon it. Whether they get it correct or not, it brings about an interesting topic around performance.\n\nFirstly the answer is:\n\n```sql\nDECLARE @X CHAR(3) = NULL;\nSELECT IsNull(@X, 'Empty'); -- 'Emp'\nSELECT COALESCE(@X, 'Empty'); -- 'Empty'\n```\n\nFor those that haven't stumbled upon this. The IsNull function will interpret the Data Type and Length of the first value, whilst the Coalesce can evaluate each Data Type and Length.\nTherefore, for IsNull, the String 'Empty' will be truncated to 3 characters ('Emp') as @X is only a CHAR(3), whilst for Coalesce, the String 'Empty' will be returned as is.\n\nWhy? - Simple.. Coalesce is treated like a CASE Statement whilst IsNull is an internal T-sql function.\n\nSo the fun aspect of the question can be in the understanding how the different functions can affect the output, primarily the Data Length.\n\nThe interesting aspect is in the understanding of the performance implications. Many times I have seen code that uses Coalesce, despite there only being one field being evaluated. In this case it would be generally more preformant to use IsNull as it will result in a single pass rather than multiple passes, by treating the function in a similar manner to a CASE statement.\n\nI'll leave it at that, as I'm sure many other people have documented the hell out of this topic, but I am always surprised at the number of SQL Server devs who haven't encountered it. The geek in me finds it fascinating.\n","source":"_posts/sql-server/coalesce-vs-isnull.md","raw":"---\ntitle: \"Coalesce vs IsNull\"\ndate: \"2018-11-04\"\ntags: [SQL]\ncategories: [SQL Server]\n---\n\nSo, this is a bit of a fun short topic. In the past when I have interviewed for Senior SQL Server Developer roles, I have included the following question:\n\nWhat will the output of the following code be? -\n\n```sql\nDECLARE @X CHAR(3) = NULL;\nSELECT IsNull(@X, 'Empty');\nSELECT COALESCE(@X, 'Empty');\n```\n\nVery few people have got the answer, and frankly, that's ok. It's not the sort of thing one would know, unless they've stumbled upon it. Whether they get it correct or not, it brings about an interesting topic around performance.\n\nFirstly the answer is:\n\n```sql\nDECLARE @X CHAR(3) = NULL;\nSELECT IsNull(@X, 'Empty'); -- 'Emp'\nSELECT COALESCE(@X, 'Empty'); -- 'Empty'\n```\n\nFor those that haven't stumbled upon this. The IsNull function will interpret the Data Type and Length of the first value, whilst the Coalesce can evaluate each Data Type and Length.\nTherefore, for IsNull, the String 'Empty' will be truncated to 3 characters ('Emp') as @X is only a CHAR(3), whilst for Coalesce, the String 'Empty' will be returned as is.\n\nWhy? - Simple.. Coalesce is treated like a CASE Statement whilst IsNull is an internal T-sql function.\n\nSo the fun aspect of the question can be in the understanding how the different functions can affect the output, primarily the Data Length.\n\nThe interesting aspect is in the understanding of the performance implications. Many times I have seen code that uses Coalesce, despite there only being one field being evaluated. In this case it would be generally more preformant to use IsNull as it will result in a single pass rather than multiple passes, by treating the function in a similar manner to a CASE statement.\n\nI'll leave it at that, as I'm sure many other people have documented the hell out of this topic, but I am always surprised at the number of SQL Server devs who haven't encountered it. The geek in me finds it fascinating.\n","slug":"sql-server/coalesce-vs-isnull","published":1,"updated":"2020-03-09T23:10:38.183Z","_id":"ck7l1ww6f00061hrr7whd5oix","comments":1,"layout":"post","photos":[],"link":"","content":"<p>So, this is a bit of a fun short topic. In the past when I have interviewed for Senior SQL Server Developer roles, I have included the following question:</p>\n<p>What will the output of the following code be? -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> @X <span class=\"built_in\">CHAR</span>(<span class=\"number\">3</span>) = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">IsNull</span>(@X, <span class=\"string\">'Empty'</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COALESCE</span>(@X, <span class=\"string\">'Empty'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Very few people have got the answer, and frankly, that’s ok. It’s not the sort of thing one would know, unless they’ve stumbled upon it. Whether they get it correct or not, it brings about an interesting topic around performance.</p>\n<p>Firstly the answer is:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> @X <span class=\"built_in\">CHAR</span>(<span class=\"number\">3</span>) = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">IsNull</span>(@X, <span class=\"string\">'Empty'</span>); <span class=\"comment\">-- 'Emp'</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COALESCE</span>(@X, <span class=\"string\">'Empty'</span>); <span class=\"comment\">-- 'Empty'</span></span><br></pre></td></tr></table></figure>\n\n<p>For those that haven’t stumbled upon this. The IsNull function will interpret the Data Type and Length of the first value, whilst the Coalesce can evaluate each Data Type and Length.<br>Therefore, for IsNull, the String ‘Empty’ will be truncated to 3 characters (‘Emp’) as @X is only a CHAR(3), whilst for Coalesce, the String ‘Empty’ will be returned as is.</p>\n<p>Why? - Simple.. Coalesce is treated like a CASE Statement whilst IsNull is an internal T-sql function.</p>\n<p>So the fun aspect of the question can be in the understanding how the different functions can affect the output, primarily the Data Length.</p>\n<p>The interesting aspect is in the understanding of the performance implications. Many times I have seen code that uses Coalesce, despite there only being one field being evaluated. In this case it would be generally more preformant to use IsNull as it will result in a single pass rather than multiple passes, by treating the function in a similar manner to a CASE statement.</p>\n<p>I’ll leave it at that, as I’m sure many other people have documented the hell out of this topic, but I am always surprised at the number of SQL Server devs who haven’t encountered it. The geek in me finds it fascinating.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>So, this is a bit of a fun short topic. In the past when I have interviewed for Senior SQL Server Developer roles, I have included the following question:</p>\n<p>What will the output of the following code be? -</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> @X <span class=\"built_in\">CHAR</span>(<span class=\"number\">3</span>) = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">IsNull</span>(@X, <span class=\"string\">'Empty'</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COALESCE</span>(@X, <span class=\"string\">'Empty'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Very few people have got the answer, and frankly, that’s ok. It’s not the sort of thing one would know, unless they’ve stumbled upon it. Whether they get it correct or not, it brings about an interesting topic around performance.</p>\n<p>Firstly the answer is:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> @X <span class=\"built_in\">CHAR</span>(<span class=\"number\">3</span>) = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">IsNull</span>(@X, <span class=\"string\">'Empty'</span>); <span class=\"comment\">-- 'Emp'</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COALESCE</span>(@X, <span class=\"string\">'Empty'</span>); <span class=\"comment\">-- 'Empty'</span></span><br></pre></td></tr></table></figure>\n\n<p>For those that haven’t stumbled upon this. The IsNull function will interpret the Data Type and Length of the first value, whilst the Coalesce can evaluate each Data Type and Length.<br>Therefore, for IsNull, the String ‘Empty’ will be truncated to 3 characters (‘Emp’) as @X is only a CHAR(3), whilst for Coalesce, the String ‘Empty’ will be returned as is.</p>\n<p>Why? - Simple.. Coalesce is treated like a CASE Statement whilst IsNull is an internal T-sql function.</p>\n<p>So the fun aspect of the question can be in the understanding how the different functions can affect the output, primarily the Data Length.</p>\n<p>The interesting aspect is in the understanding of the performance implications. Many times I have seen code that uses Coalesce, despite there only being one field being evaluated. In this case it would be generally more preformant to use IsNull as it will result in a single pass rather than multiple passes, by treating the function in a similar manner to a CASE statement.</p>\n<p>I’ll leave it at that, as I’m sure many other people have documented the hell out of this topic, but I am always surprised at the number of SQL Server devs who haven’t encountered it. The geek in me finds it fascinating.</p>\n"},{"title":"Deleting duplicates","date":"2020-02-12T00:00:00.000Z","_content":"\nThere will be the odd occasion when you will need to delete duplicates from a table. There are a number of ways that this can be achieved, however I have found that using a CTE and ROW_NUMBER is the shortest to achieve this.\n\nImage you have a table that has no unique identifier / primary key and you have duplicates. You don't care which rows stay, as they are identical, but you do need to remove all but one. The example below will show how the change be achieved:\n\n```sql\nCREATE TABLE #CartoonCharacters\n(\n      FullName  VARCHAR(200)\n    , Programme VARCHAR(200)\n);\n\nINSERT INTO #CartoonCharacters\nVALUES\n      ('Homer J Simpson', 'Simpsons')\n    , ('Ned Flanders','Simpsons')\n    , ('Eric Cartman', 'South Park')\n    , ('Peter Griffin', 'Family Guy')\n    , ('Peppa Pig', 'Peppa Pig')\n    , ('Chase', 'Paw Patrol')\n    , ('Homer J Simpson', 'Simpsons') -- Dup\n    , ('Peter Griffin', 'Family Guy') -- Dup\n;\n\nWITH dups\nAS\n(\n    SELECT\n        dupCount = ROW_NUMBER() OVER(PARTITION BY FullName, Programme ORDER BY FullName)\n        , *\n    FROM #CartoonCharacters\n)\nDELETE\nFROM dups\nWHERE dupCount > 1\n```\n\n| Dup Counter | Full Name           | Programme      |\n| ----------- | ------------------- | -------------- |\n| 1           | Chase               | Paw Patrol     |\n| 1           | Eric Cartman        | South Park     |\n| 1           | Homer J Simpson     | Simpsons       |\n| **2**       | **Homer J Simpson** | **Simpsons**   |\n| 1           | Ned Flanders        | Simpsons       |\n| 1           | Peppa Pig           | Peppa Pig      |\n| 1           | Peter Griffin       | Family Guy     |\n| **2**       | **Peter Griffin**   | **Family Guy** |\n\nIn this example we have two duplicates. By creating a CTE that selects from the #CartoonCharacters table and also selects a row number that represents duplicates, we can delete the duplicate from the CTE which in turn deletes from the underlying table.\n\n**Note** If your system only supported soft deletes you could you the same CTE to run an update rather than hard delete. e.g.\n\n```SQL\nWITH dups\nAS\n(\n    SELECT\n        dupCount = ROW_NUMBER() OVER(PARTITION BY FullName, Programme ORDER BY FullName)\n        , *\n    FROM #CartoonCharacters\n)\nUPDATE dups\n    SET IsDeleted = 1\nWHERE dupCount > 1\n```\n","source":"_posts/sql-server/deleting-dups.md","raw":"---\ntitle: \"Deleting duplicates\"\ndate: \"2020-02-12\"\ntags: [SQL]\ncategories: [SQL Server]\n---\n\nThere will be the odd occasion when you will need to delete duplicates from a table. There are a number of ways that this can be achieved, however I have found that using a CTE and ROW_NUMBER is the shortest to achieve this.\n\nImage you have a table that has no unique identifier / primary key and you have duplicates. You don't care which rows stay, as they are identical, but you do need to remove all but one. The example below will show how the change be achieved:\n\n```sql\nCREATE TABLE #CartoonCharacters\n(\n      FullName  VARCHAR(200)\n    , Programme VARCHAR(200)\n);\n\nINSERT INTO #CartoonCharacters\nVALUES\n      ('Homer J Simpson', 'Simpsons')\n    , ('Ned Flanders','Simpsons')\n    , ('Eric Cartman', 'South Park')\n    , ('Peter Griffin', 'Family Guy')\n    , ('Peppa Pig', 'Peppa Pig')\n    , ('Chase', 'Paw Patrol')\n    , ('Homer J Simpson', 'Simpsons') -- Dup\n    , ('Peter Griffin', 'Family Guy') -- Dup\n;\n\nWITH dups\nAS\n(\n    SELECT\n        dupCount = ROW_NUMBER() OVER(PARTITION BY FullName, Programme ORDER BY FullName)\n        , *\n    FROM #CartoonCharacters\n)\nDELETE\nFROM dups\nWHERE dupCount > 1\n```\n\n| Dup Counter | Full Name           | Programme      |\n| ----------- | ------------------- | -------------- |\n| 1           | Chase               | Paw Patrol     |\n| 1           | Eric Cartman        | South Park     |\n| 1           | Homer J Simpson     | Simpsons       |\n| **2**       | **Homer J Simpson** | **Simpsons**   |\n| 1           | Ned Flanders        | Simpsons       |\n| 1           | Peppa Pig           | Peppa Pig      |\n| 1           | Peter Griffin       | Family Guy     |\n| **2**       | **Peter Griffin**   | **Family Guy** |\n\nIn this example we have two duplicates. By creating a CTE that selects from the #CartoonCharacters table and also selects a row number that represents duplicates, we can delete the duplicate from the CTE which in turn deletes from the underlying table.\n\n**Note** If your system only supported soft deletes you could you the same CTE to run an update rather than hard delete. e.g.\n\n```SQL\nWITH dups\nAS\n(\n    SELECT\n        dupCount = ROW_NUMBER() OVER(PARTITION BY FullName, Programme ORDER BY FullName)\n        , *\n    FROM #CartoonCharacters\n)\nUPDATE dups\n    SET IsDeleted = 1\nWHERE dupCount > 1\n```\n","slug":"sql-server/deleting-dups","published":1,"updated":"2020-03-09T23:10:29.450Z","_id":"ck7l1ww6f00071hrr8xy1gy3y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>There will be the odd occasion when you will need to delete duplicates from a table. There are a number of ways that this can be achieved, however I have found that using a CTE and ROW_NUMBER is the shortest to achieve this.</p>\n<p>Image you have a table that has no unique identifier / primary key and you have duplicates. You don’t care which rows stay, as they are identical, but you do need to remove all but one. The example below will show how the change be achieved:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"comment\">#CartoonCharacters</span></span><br><span class=\"line\">(</span><br><span class=\"line\">      FullName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">    , Programme <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"comment\">#CartoonCharacters</span></span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"string\">'Homer J Simpson'</span>, <span class=\"string\">'Simpsons'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Ned Flanders'</span>,<span class=\"string\">'Simpsons'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Eric Cartman'</span>, <span class=\"string\">'South Park'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Peter Griffin'</span>, <span class=\"string\">'Family Guy'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Peppa Pig'</span>, <span class=\"string\">'Peppa Pig'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Chase'</span>, <span class=\"string\">'Paw Patrol'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Homer J Simpson'</span>, <span class=\"string\">'Simpsons'</span>) <span class=\"comment\">-- Dup</span></span><br><span class=\"line\">    , (<span class=\"string\">'Peter Griffin'</span>, <span class=\"string\">'Family Guy'</span>) <span class=\"comment\">-- Dup</span></span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> dups</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        dupCount = ROW_NUMBER() <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> FullName, Programme <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> FullName)</span><br><span class=\"line\">        , *</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> <span class=\"comment\">#CartoonCharacters</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dups</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> dupCount &gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Dup Counter</th>\n<th>Full Name</th>\n<th>Programme</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Chase</td>\n<td>Paw Patrol</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Eric Cartman</td>\n<td>South Park</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Homer J Simpson</td>\n<td>Simpsons</td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td><strong>Homer J Simpson</strong></td>\n<td><strong>Simpsons</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>Ned Flanders</td>\n<td>Simpsons</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Peppa Pig</td>\n<td>Peppa Pig</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Peter Griffin</td>\n<td>Family Guy</td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td><strong>Peter Griffin</strong></td>\n<td><strong>Family Guy</strong></td>\n</tr>\n</tbody></table>\n<p>In this example we have two duplicates. By creating a CTE that selects from the #CartoonCharacters table and also selects a row number that represents duplicates, we can delete the duplicate from the CTE which in turn deletes from the underlying table.</p>\n<p><strong>Note</strong> If your system only supported soft deletes you could you the same CTE to run an update rather than hard delete. e.g.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> dups</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        dupCount = ROW_NUMBER() <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> FullName, Programme <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> FullName)</span><br><span class=\"line\">        , *</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> <span class=\"comment\">#CartoonCharacters</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> dups</span><br><span class=\"line\">    <span class=\"keyword\">SET</span> IsDeleted = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> dupCount &gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>There will be the odd occasion when you will need to delete duplicates from a table. There are a number of ways that this can be achieved, however I have found that using a CTE and ROW_NUMBER is the shortest to achieve this.</p>\n<p>Image you have a table that has no unique identifier / primary key and you have duplicates. You don’t care which rows stay, as they are identical, but you do need to remove all but one. The example below will show how the change be achieved:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"comment\">#CartoonCharacters</span></span><br><span class=\"line\">(</span><br><span class=\"line\">      FullName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">    , Programme <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"comment\">#CartoonCharacters</span></span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"string\">'Homer J Simpson'</span>, <span class=\"string\">'Simpsons'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Ned Flanders'</span>,<span class=\"string\">'Simpsons'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Eric Cartman'</span>, <span class=\"string\">'South Park'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Peter Griffin'</span>, <span class=\"string\">'Family Guy'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Peppa Pig'</span>, <span class=\"string\">'Peppa Pig'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Chase'</span>, <span class=\"string\">'Paw Patrol'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Homer J Simpson'</span>, <span class=\"string\">'Simpsons'</span>) <span class=\"comment\">-- Dup</span></span><br><span class=\"line\">    , (<span class=\"string\">'Peter Griffin'</span>, <span class=\"string\">'Family Guy'</span>) <span class=\"comment\">-- Dup</span></span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> dups</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        dupCount = ROW_NUMBER() <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> FullName, Programme <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> FullName)</span><br><span class=\"line\">        , *</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> <span class=\"comment\">#CartoonCharacters</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dups</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> dupCount &gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Dup Counter</th>\n<th>Full Name</th>\n<th>Programme</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Chase</td>\n<td>Paw Patrol</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Eric Cartman</td>\n<td>South Park</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Homer J Simpson</td>\n<td>Simpsons</td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td><strong>Homer J Simpson</strong></td>\n<td><strong>Simpsons</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>Ned Flanders</td>\n<td>Simpsons</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Peppa Pig</td>\n<td>Peppa Pig</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Peter Griffin</td>\n<td>Family Guy</td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td><strong>Peter Griffin</strong></td>\n<td><strong>Family Guy</strong></td>\n</tr>\n</tbody></table>\n<p>In this example we have two duplicates. By creating a CTE that selects from the #CartoonCharacters table and also selects a row number that represents duplicates, we can delete the duplicate from the CTE which in turn deletes from the underlying table.</p>\n<p><strong>Note</strong> If your system only supported soft deletes you could you the same CTE to run an update rather than hard delete. e.g.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> dups</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        dupCount = ROW_NUMBER() <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> FullName, Programme <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> FullName)</span><br><span class=\"line\">        , *</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> <span class=\"comment\">#CartoonCharacters</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> dups</span><br><span class=\"line\">    <span class=\"keyword\">SET</span> IsDeleted = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> dupCount &gt; <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Loading auto generated daily partition","date":"2018-12-30T00:00:00.000Z","_content":"\n> NOTE: This topic was was based on logic prior to the ability to truncate a partition directly.\n\n[![GitHub](GitHub.png)](https://github.com/davidtstafford/DailyAutoPartitioning)\n\nI have worked on the number of batch systems that have required partitioning for various reasons. I won't go into all of the reasons of why and when you should chose partitioning, as that would lead into its own blog post, but there are occasions when it is nice to be able to isolate batch pieces of work and just slot the data in when it is ready (or quickly remove it).\n\nSo, in the following walkthrough, I will go through:\n\n- Creating a simple partitioned table\n- Creating an area to stage the data\n- Creating a fast method to purge the data\n- Creating a set of procedures to support this\n  - Include a procedure that will create/prepare the partition for the requested date.\n\n#### Step 1 .. Clean my environment\n\nJust a few scripts that will remove any objects hanging around for any previous runs of the tutorial.\n\n```sql\nBEGIN TRY DROP TABLE Staging.MainTable__SwitchIN END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP TABLE Staging.MainTable__SwitchOUT END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP TABLE dbo.MainTable END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP VIEW MetaData.vw_PartitionDetails END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PROC dbo.sp_PrepareMainTablePartitions END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PROC dbo.sp_LoadMainTable END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PARTITION SCHEME psRunDates END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PARTITION FUNCTION pfRunDates END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP SCHEMA [Staging] END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP SCHEMA [MetaData] END TRY BEGIN CATCH END CATCH\nGO\n```\n\nI know it's lazy wrapping it all up with Begin Trys :).\n\n#### Step 2 .. Creating some additional schemas for my objects to live in\n\nI'll be creating\n\n- Staging - For landing the data\n- MetaData - To house useful Tables / Views\n\n```sql\nCREATE SCHEMA [Staging]\nGO\n\nCREATE SCHEMA [MetaData]\nGO\n```\n\n> Not really essential, I'm just a bit OCD.\n\n#### Step 3 .. Creating the Partitions\n\nI'll create the partition function and scheme and setup them up with one date.\n\n```sql\nCREATE PARTITION FUNCTION pfRunDates (DATE)\nAS RANGE RIGHT FOR VALUES ('2019-01-01')\nGO\n\nCREATE PARTITION SCHEME psRunDates\nAS PARTITION pfRunDates\nTO ([Primary],[Primary],[Primary])\nGO\n```\n\n> Note: I have defined 3 filegroups even though there is only 1 date. This has been done to allow for the \"Next Used\" partition. i.e. 1 filegroup is for the data. 1 filegroup is beyond the range. The final filegroup is in place as a placeholder for a new partition to be created.\n\n#### Step 4 .. Creating the tables\n\nCreating 3 tables:\n\n- Main table (dbo.MainTable)\n  - Clustered index for the ID Column\n  - Non Clustered index for the RunDate Column\n  - And importantly, uses the partition schema \"psRunDates\". Based on the RunDate column\n- Landing Table (Staging.MainTable\\_\\_SwitchIN)\n  - Identical setup to the Main Table other than living in the Staging schema\n- Purge Table (Staging.MainTable\\_\\_SwitchOUT)\n  - Not indexed\n  - Clustered index also contains the RunDate column as this will make the table appear identical to the partitioned table\n\n```sql\nCREATE TABLE dbo.MainTable\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON psRunDates(RunDate)\nGO\nCREATE CLUSTERED INDEX CIX__MainTable_ID ON dbo.MainTable(ID)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable_RunDate ON dbo.MainTable(RunDate)\nGO\n\nCREATE TABLE Staging.MainTable__SwitchIN\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON psRunDates(RunDate)\nGO\nCREATE CLUSTERED INDEX CIX__MainTable__SwitchIN_ID ON Staging.MainTable__SwitchIN(ID)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable__SwitchIN_RunDate ON Staging.MainTable__SwitchIN(RunDate)\nGO\n\nCREATE TABLE Staging.MainTable__SwitchOUT\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON [Primary]\nGO\n-- Note this index does not look identical, but RunDate is part of the index\n-- to equal RunDate being the partition key in the partitioned table\nCREATE CLUSTERED INDEX CIX__MainTable__SwitchOUT_ID\n    ON Staging.MainTable__SwitchOUT(ID,RunDate)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable__SwitchOUT_RunDate\n    ON Staging.MainTable__SwitchOUT(RunDate)\nGO\n```\n\n> Note - The loading table is partitioned as well. Technically it doesn't have to be. If not though, you would need to do some check constaints magic to makes the tables appear identical for partition switching.\n\n#### Step 5 .. Creating a view to display partition information\n\nThe script below will create the view within the MetaData schema.\n\n```sql\nCREATE VIEW MetaData.vw_PartitionDetails\nAS\n    SELECT\n          FunctionName      =   pf.name\n        , SchemeName        =   ps.name\n        , TableName         =   o.name\n        , PartitionNumber   =   stat.partition_number\n        , [RowCount]        =   stat.row_count\n        , RangeValue        =   prv.value\n    FROM            sys.partition_functions     pf\n\n        INNER JOIN  sys.partition_schemes       ps  ON  ps.function_id  =   pf.function_id\n\n        INNER JOIN  sys.indexes                 i   ON  i.data_space_id =   ps.data_space_id\n                                                    AND i.[type]        =   1 -- Limit to clustered index\n\n        INNER JOIN  sys.partitions              p   ON  i.object_id     =   p.object_id\n                                                    AND p.index_id      =   1 -- Limit to first index\n\n        INNER JOIN  sys.objects                 o   ON  o.object_id     =   i.object_id\n                                                    AND o.[type]        =   'U'\n\n        LEFT  JOIN sys.partition_range_values   prv ON prv.function_id      =   pf.function_id\n                                                    AND p.partition_number  =   CASE pf.boundary_value_on_right\n                                                                                    WHEN 1 THEN prv.boundary_id + 1\n                                                                                    ELSE prv.boundary_id\n                                                                                END\n\n        INNER JOIN sys.dm_db_partition_stats    stat    ON  stat.object_id          =   p.object_id\n                                                        AND stat.index_id           =   p.index_id\n                                                        AND stat.partition_id       =   p.partition_id\n                                                        AND stat.partition_number   =   p.partition_number\nGO\n```\n\n> There are a number of ways to produce the same output in a view, and maybe there is a more refined way to it. One day I may try to refine this script ;).\n\n#### Step 6 .. Creating the all important procedures\n\nThe scripts below will create 2 stored procedures. One to prepare new partitions and purge data if that partition already exists. The other to migrate the data from the landing area into the main table.\n\n```sql\nCREATE PROCEDURE dbo.sp_PrepareMainTablePartitions\n(\n      @PartitionDate DATE\n    , @OverwriteData BIT = 1 -- 1 = Get rid of previous data.. 0 = Thrown error if previous data found\n)\nAS\nBEGIN\n\n    DECLARE\n          @PartitionNumber INT\n        , @ErrorMessage NVARCHAR(4000)\n    ;\n\n    SELECT @PartitionNumber = PartitionNumber\n    FROM MetaData.vw_PartitionDetails\n    WHERE TableName = 'MainTable'\n    AND RangeValue = @PartitionDate;\n\n    IF @OverwriteData = 0 AND @PartitionNumber IS NOT NULL\n    BEGIN\n        SET @ErrorMessage = 'Partition for this date already exists.  Please purge any data and remove the partition, or recall the proc with OverwriteData = 1';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    IF @PartitionNumber IS NULL\n    BEGIN\n        ALTER PARTITION FUNCTION pfRunDates()\n            SPLIT RANGE (@PartitionDate);\n\n        ALTER PARTITION SCHEME psRunDates\n            NEXT USED [PRIMARY];\n\n        SELECT @PartitionNumber = PartitionNumber\n        FROM MetaData.vw_PartitionDetails\n        WHERE TableName = 'MainTable'\n        AND RangeValue = @PartitionDate;\n\n\n    END\n\n    TRUNCATE TABLE Staging.MainTable__SwitchOUT;\n\n    TRUNCATE TABLE Staging.MainTable__SwitchIN;\n\n    ALTER TABLE dbo.MainTable SWITCH PARTITION @PartitionNumber TO Staging.MainTable__SwitchOUT;\n\nEND\nGO\n\nCREATE PROCEDURE dbo.sp_LoadMainTable\n(\n      @PartitionDate DATE\n)\nAS\nBEGIN\n\n    DECLARE\n          @PartitionNumber INT\n        , @ErrorMessage NVARCHAR(4000)\n    ;\n\n    IF EXISTS ( SELECT 1 FROM dbo.MainTable WHERE RunDate = @PartitionDate)\n    BEGIN\n        SET @ErrorMessage = 'Data has already been loaded for the date.  Please purge it first';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    SELECT @PartitionNumber = PartitionNumber\n    FROM MetaData.vw_PartitionDetails\n    WHERE TableName = 'MainTable'\n    AND RangeValue = @PartitionDate;\n\n    IF @PartitionNumber IS NULL\n    BEGIN\n        SET @ErrorMessage = 'Partition has not been created.  Run the proc \"dbo.sp_PrepareMainTablePartitions\" first';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    ALTER TABLE Staging.MainTable__SwitchIn SWITCH PARTITION @PartitionNumber\n        TO dbo.MainTable PARTITION @PartitionNumber;\n\nEND\nGO\n```\n\n> By default **dbo.sp_PrepareMainTablePartitions** will purge data is the partition already exists. But, setting **@OverwriteData=0** will stop this. It will throw an error if it discovers an existing partition.\n\n#### Step 7 .. Testing it all out\n\n##### 7.1\n\nFirstly, lets fire some data into the main table for '2019-01-01'\n\n```sql\nINSERT INTO dbo.MainTable\n(ID, UserName, RunDate)\nVALUES\n      (1,'Bob','2019-01-01')\n    , (2, 'Jane','2019-01-01')\n```\n\nWe can now see how this affects the partitions by selecting from the view **MetaData.vw_PartitionDetails**.\n![2 Rows](2Rows.png)\n\nSo we are now in a place were we can do a mock batch load.\n\n##### 7.2\n\n> all the the scripts below would normally be run via an etl process, but we are just mocking it through direct sql calls.\n\nThe first step is to prepare for the load by calling the procedure **dbo.sp_PrepareMainTablePartitions**.\n\n> We will be running for 2019-01-02 and purging any data if it exists before.\n\n```sql\nEXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1\n```\n\nOnce this is completed. If you select from the **MetaData.vw_PartitionDetails** view again, you can see the new partition.\n![New Partition](NewPartition.png)\n\n##### 7.3\n\nNow we can stage the data by inserting into the **Staging.MainTable\\_\\_SwitchIn** table.\n\n```sql\nINSERT INTO Staging.MainTable__SwitchIN\n( ID, UserName, RunDate)\nVALUES\n      (3,'Vicky','2019-01-02')\n    , (4, 'Eric','2019-01-02')\n    , (5, 'Scott', '2019-01-02')\n```\n\nWe can now see how this affects the partitions by selecting from the view **MetaData.vw_PartitionDetails**.\n![3 New Rows](3NewRows.png)\n\n##### 7.4\n\nThe data is now in the staging area. If this was an actual batch run within an ETL process this would be an ideal time to implement some validation before we move the data in the primary table.\n\nTo move to data in the main table we now call the procedure\n\n```sql\nEXEC dbo.sp_LoadMainTable '2019-01-02'\n```\n\nWe can now see how this affects the partitions by selecting from the view **MetaData.vw_PartitionDetails**.\n![3 Moved Rows](3MovedRows.png)\n\n**Done**\n\n#### Step 8 - Removing data\n\nThe stored procedure **dbo.sp_PrepareMainTablePartitions** will perpare a new partition for data to be inserted, but it will also nuke data if it already existed. Therefore this can be used to blast away a previous load.\n\nLet's see\n\n```sql\nEXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1\n```\n\n![Rows Gone](RowsGone.png)\nThe data is gone again. This was an immediate delete, similar to a truncate but only over the one partition. The stored procedure has actually moved this table into the **Staging.MainTable\\_\\_SwitchOUT** table. Therefore the data can still be queried until the next run, or in theory it could be used before the next run.\n![SwitchOut Output](SwitchOutOutput.png)\n\n#### Thanks\n\n> Here's all the code should you wish to copy it down, and thanks for taking the time to read this topic.\n\n```sql\n\nBEGIN TRY DROP TABLE Staging.MainTable__SwitchIN END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP TABLE Staging.MainTable__SwitchOUT END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP TABLE dbo.MainTable END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP VIEW MetaData.vw_PartitionDetails END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PROC dbo.sp_PrepareMainTablePartitions END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PROC dbo.sp_LoadMainTable END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PARTITION SCHEME psRunDates END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PARTITION FUNCTION pfRunDates END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP SCHEMA [Staging] END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP SCHEMA [MetaData] END TRY BEGIN CATCH END CATCH\nGO\n\n\n\n\nCREATE SCHEMA [Staging]\nGO\n\nCREATE SCHEMA [MetaData]\nGO\n\n\nCREATE PARTITION FUNCTION pfRunDates (DATE)\nAS RANGE RIGHT FOR VALUES ('2019-01-01')\nGO\n\nCREATE PARTITION SCHEME psRunDates\nAS PARTITION pfRunDates\nTO ([Primary],[Primary],[Primary])\nGO\n\nCREATE TABLE dbo.MainTable\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON psRunDates(RunDate)\nGO\nCREATE CLUSTERED INDEX CIX__MainTable_ID ON dbo.MainTable(ID)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable_RunDate ON dbo.MainTable(RunDate)\nGO\n\nCREATE TABLE Staging.MainTable__SwitchIN\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON psRunDates(RunDate)\nGO\nCREATE CLUSTERED INDEX CIX__MainTable__SwitchIN_ID ON Staging.MainTable__SwitchIN(ID)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable__SwitchIN_RunDate ON Staging.MainTable__SwitchIN(RunDate)\nGO\n\nCREATE TABLE Staging.MainTable__SwitchOUT\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON [Primary]\nGO\n-- Note this index does not look identical, but RunDate is part of the index\n-- to equal RunDate being the partition key in the partitioned table\nCREATE CLUSTERED INDEX CIX__MainTable__SwitchOUT_ID\n    ON Staging.MainTable__SwitchOUT(ID,RunDate)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable__SwitchOUT_RunDate\n    ON Staging.MainTable__SwitchOUT(RunDate)\nGO\n\nCREATE VIEW MetaData.vw_PartitionDetails\nAS\n    SELECT\n          FunctionName      =   pf.name\n        , SchemeName        =   ps.name\n        , TableName         =   o.name\n        , PartitionNumber   =   stat.partition_number\n        , [RowCount]        =   stat.row_count\n        , RangeValue        =   prv.value\n    FROM            sys.partition_functions     pf\n\n        INNER JOIN  sys.partition_schemes       ps  ON  ps.function_id  =   pf.function_id\n\n        INNER JOIN  sys.indexes                 i   ON  i.data_space_id =   ps.data_space_id\n                                                    AND i.[type]        =   1 -- Limit to clustered index\n\n        INNER JOIN  sys.partitions              p   ON  i.object_id     =   p.object_id\n                                                    AND p.index_id      =   1 -- Limit to first index\n\n        INNER JOIN  sys.objects                 o   ON  o.object_id     =   i.object_id\n                                                    AND o.[type]        =   'U'\n\n        LEFT  JOIN sys.partition_range_values   prv ON prv.function_id      =   pf.function_id\n                                                    AND p.partition_number  =   CASE pf.boundary_value_on_right\n                                                                                    WHEN 1 THEN prv.boundary_id + 1\n                                                                                    ELSE prv.boundary_id\n                                                                                END\n\n        INNER JOIN sys.dm_db_partition_stats    stat    ON  stat.object_id          =   p.object_id\n                                                        AND stat.index_id           =   p.index_id\n                                                        AND stat.partition_id       =   p.partition_id\n                                                        AND stat.partition_number   =   p.partition_number\nGO\n\n\nCREATE PROCEDURE dbo.sp_PrepareMainTablePartitions\n(\n      @PartitionDate DATE\n    , @OverwriteData BIT = 1 -- 1 = Get rid of previous data.. 0 = Thrown error if previous data found\n)\nAS\nBEGIN\n\n    DECLARE\n          @PartitionNumber INT\n        , @ErrorMessage NVARCHAR(4000)\n    ;\n\n    SELECT @PartitionNumber = PartitionNumber\n    FROM MetaData.vw_PartitionDetails\n    WHERE TableName = 'MainTable'\n    AND RangeValue = @PartitionDate;\n\n    IF @OverwriteData = 0 AND @PartitionNumber IS NOT NULL\n    BEGIN\n        SET @ErrorMessage = 'Partition for this date already exists.  Please purge any data and remove the partition, or recall the proc with OverwriteData = 1';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    IF @PartitionNumber IS NULL\n    BEGIN\n        ALTER PARTITION FUNCTION pfRunDates()\n            SPLIT RANGE (@PartitionDate);\n\n        ALTER PARTITION SCHEME psRunDates\n            NEXT USED [PRIMARY];\n\n        SELECT @PartitionNumber = PartitionNumber\n        FROM MetaData.vw_PartitionDetails\n        WHERE TableName = 'MainTable'\n        AND RangeValue = @PartitionDate;\n\n\n    END\n\n\n    TRUNCATE TABLE Staging.MainTable__SwitchOUT;\n\n    TRUNCATE TABLE Staging.MainTable__SwitchIN;\n\n    ALTER TABLE dbo.MainTable SWITCH PARTITION @PartitionNumber TO Staging.MainTable__SwitchOUT;\n\nEND\nGO\n\n\n\nCREATE PROCEDURE dbo.sp_LoadMainTable\n(\n      @PartitionDate DATE\n)\nAS\nBEGIN\n\n    DECLARE\n          @PartitionNumber INT\n        , @ErrorMessage NVARCHAR(4000)\n    ;\n\n    IF EXISTS ( SELECT 1 FROM dbo.MainTable WHERE RunDate = @PartitionDate)\n    BEGIN\n        SET @ErrorMessage = 'Data has already been loaded for the date.  Pplease purge it first';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    SELECT @PartitionNumber = PartitionNumber\n    FROM MetaData.vw_PartitionDetails\n    WHERE TableName = 'MainTable'\n    AND RangeValue = @PartitionDate;\n\n    IF @PartitionNumber IS NULL\n    BEGIN\n        SET @ErrorMessage = 'Partition has not been created.  Run the proc \"dbo.sp_PrepareMainTablePartitions\" first';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    ALTER TABLE Staging.MainTable__SwitchIn SWITCH PARTITION @PartitionNumber\n        TO dbo.MainTable PARTITION @PartitionNumber;\n\nEND\nGO\n\n\nEXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1 ;\n\nINSERT INTO dbo.MainTable\n(ID, UserName, RunDate)\nVALUES\n      (1,'Bob','2019-01-01')\n    , (2, 'Jane','2019-01-01')\n;\n\n\nINSERT INTO Staging.MainTable__SwitchIN\n( ID, UserName, RunDate)\nVALUES\n      (3,'Vicky','2019-01-02')\n    , (4, 'Eric','2019-01-02')\n    , (5, 'Scott', '2019-01-02')\n;\n\n\nEXEC dbo.sp_LoadMainTable '2019-01-02' ;\n\nSELECT *\nFROM MetaData.vw_PartitionDetails ;\n\nSELECT *\nFROM dbo.MainTable ;\n```\n","source":"_posts/sql-server/Loading-Daily-Partitions.md","raw":"---\ntitle: \"Loading auto generated daily partition\"\ndate: \"2018-12-30\"\ntags: [SQL]\ncategories: [SQL Server]\n---\n\n> NOTE: This topic was was based on logic prior to the ability to truncate a partition directly.\n\n[![GitHub](GitHub.png)](https://github.com/davidtstafford/DailyAutoPartitioning)\n\nI have worked on the number of batch systems that have required partitioning for various reasons. I won't go into all of the reasons of why and when you should chose partitioning, as that would lead into its own blog post, but there are occasions when it is nice to be able to isolate batch pieces of work and just slot the data in when it is ready (or quickly remove it).\n\nSo, in the following walkthrough, I will go through:\n\n- Creating a simple partitioned table\n- Creating an area to stage the data\n- Creating a fast method to purge the data\n- Creating a set of procedures to support this\n  - Include a procedure that will create/prepare the partition for the requested date.\n\n#### Step 1 .. Clean my environment\n\nJust a few scripts that will remove any objects hanging around for any previous runs of the tutorial.\n\n```sql\nBEGIN TRY DROP TABLE Staging.MainTable__SwitchIN END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP TABLE Staging.MainTable__SwitchOUT END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP TABLE dbo.MainTable END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP VIEW MetaData.vw_PartitionDetails END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PROC dbo.sp_PrepareMainTablePartitions END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PROC dbo.sp_LoadMainTable END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PARTITION SCHEME psRunDates END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PARTITION FUNCTION pfRunDates END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP SCHEMA [Staging] END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP SCHEMA [MetaData] END TRY BEGIN CATCH END CATCH\nGO\n```\n\nI know it's lazy wrapping it all up with Begin Trys :).\n\n#### Step 2 .. Creating some additional schemas for my objects to live in\n\nI'll be creating\n\n- Staging - For landing the data\n- MetaData - To house useful Tables / Views\n\n```sql\nCREATE SCHEMA [Staging]\nGO\n\nCREATE SCHEMA [MetaData]\nGO\n```\n\n> Not really essential, I'm just a bit OCD.\n\n#### Step 3 .. Creating the Partitions\n\nI'll create the partition function and scheme and setup them up with one date.\n\n```sql\nCREATE PARTITION FUNCTION pfRunDates (DATE)\nAS RANGE RIGHT FOR VALUES ('2019-01-01')\nGO\n\nCREATE PARTITION SCHEME psRunDates\nAS PARTITION pfRunDates\nTO ([Primary],[Primary],[Primary])\nGO\n```\n\n> Note: I have defined 3 filegroups even though there is only 1 date. This has been done to allow for the \"Next Used\" partition. i.e. 1 filegroup is for the data. 1 filegroup is beyond the range. The final filegroup is in place as a placeholder for a new partition to be created.\n\n#### Step 4 .. Creating the tables\n\nCreating 3 tables:\n\n- Main table (dbo.MainTable)\n  - Clustered index for the ID Column\n  - Non Clustered index for the RunDate Column\n  - And importantly, uses the partition schema \"psRunDates\". Based on the RunDate column\n- Landing Table (Staging.MainTable\\_\\_SwitchIN)\n  - Identical setup to the Main Table other than living in the Staging schema\n- Purge Table (Staging.MainTable\\_\\_SwitchOUT)\n  - Not indexed\n  - Clustered index also contains the RunDate column as this will make the table appear identical to the partitioned table\n\n```sql\nCREATE TABLE dbo.MainTable\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON psRunDates(RunDate)\nGO\nCREATE CLUSTERED INDEX CIX__MainTable_ID ON dbo.MainTable(ID)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable_RunDate ON dbo.MainTable(RunDate)\nGO\n\nCREATE TABLE Staging.MainTable__SwitchIN\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON psRunDates(RunDate)\nGO\nCREATE CLUSTERED INDEX CIX__MainTable__SwitchIN_ID ON Staging.MainTable__SwitchIN(ID)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable__SwitchIN_RunDate ON Staging.MainTable__SwitchIN(RunDate)\nGO\n\nCREATE TABLE Staging.MainTable__SwitchOUT\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON [Primary]\nGO\n-- Note this index does not look identical, but RunDate is part of the index\n-- to equal RunDate being the partition key in the partitioned table\nCREATE CLUSTERED INDEX CIX__MainTable__SwitchOUT_ID\n    ON Staging.MainTable__SwitchOUT(ID,RunDate)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable__SwitchOUT_RunDate\n    ON Staging.MainTable__SwitchOUT(RunDate)\nGO\n```\n\n> Note - The loading table is partitioned as well. Technically it doesn't have to be. If not though, you would need to do some check constaints magic to makes the tables appear identical for partition switching.\n\n#### Step 5 .. Creating a view to display partition information\n\nThe script below will create the view within the MetaData schema.\n\n```sql\nCREATE VIEW MetaData.vw_PartitionDetails\nAS\n    SELECT\n          FunctionName      =   pf.name\n        , SchemeName        =   ps.name\n        , TableName         =   o.name\n        , PartitionNumber   =   stat.partition_number\n        , [RowCount]        =   stat.row_count\n        , RangeValue        =   prv.value\n    FROM            sys.partition_functions     pf\n\n        INNER JOIN  sys.partition_schemes       ps  ON  ps.function_id  =   pf.function_id\n\n        INNER JOIN  sys.indexes                 i   ON  i.data_space_id =   ps.data_space_id\n                                                    AND i.[type]        =   1 -- Limit to clustered index\n\n        INNER JOIN  sys.partitions              p   ON  i.object_id     =   p.object_id\n                                                    AND p.index_id      =   1 -- Limit to first index\n\n        INNER JOIN  sys.objects                 o   ON  o.object_id     =   i.object_id\n                                                    AND o.[type]        =   'U'\n\n        LEFT  JOIN sys.partition_range_values   prv ON prv.function_id      =   pf.function_id\n                                                    AND p.partition_number  =   CASE pf.boundary_value_on_right\n                                                                                    WHEN 1 THEN prv.boundary_id + 1\n                                                                                    ELSE prv.boundary_id\n                                                                                END\n\n        INNER JOIN sys.dm_db_partition_stats    stat    ON  stat.object_id          =   p.object_id\n                                                        AND stat.index_id           =   p.index_id\n                                                        AND stat.partition_id       =   p.partition_id\n                                                        AND stat.partition_number   =   p.partition_number\nGO\n```\n\n> There are a number of ways to produce the same output in a view, and maybe there is a more refined way to it. One day I may try to refine this script ;).\n\n#### Step 6 .. Creating the all important procedures\n\nThe scripts below will create 2 stored procedures. One to prepare new partitions and purge data if that partition already exists. The other to migrate the data from the landing area into the main table.\n\n```sql\nCREATE PROCEDURE dbo.sp_PrepareMainTablePartitions\n(\n      @PartitionDate DATE\n    , @OverwriteData BIT = 1 -- 1 = Get rid of previous data.. 0 = Thrown error if previous data found\n)\nAS\nBEGIN\n\n    DECLARE\n          @PartitionNumber INT\n        , @ErrorMessage NVARCHAR(4000)\n    ;\n\n    SELECT @PartitionNumber = PartitionNumber\n    FROM MetaData.vw_PartitionDetails\n    WHERE TableName = 'MainTable'\n    AND RangeValue = @PartitionDate;\n\n    IF @OverwriteData = 0 AND @PartitionNumber IS NOT NULL\n    BEGIN\n        SET @ErrorMessage = 'Partition for this date already exists.  Please purge any data and remove the partition, or recall the proc with OverwriteData = 1';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    IF @PartitionNumber IS NULL\n    BEGIN\n        ALTER PARTITION FUNCTION pfRunDates()\n            SPLIT RANGE (@PartitionDate);\n\n        ALTER PARTITION SCHEME psRunDates\n            NEXT USED [PRIMARY];\n\n        SELECT @PartitionNumber = PartitionNumber\n        FROM MetaData.vw_PartitionDetails\n        WHERE TableName = 'MainTable'\n        AND RangeValue = @PartitionDate;\n\n\n    END\n\n    TRUNCATE TABLE Staging.MainTable__SwitchOUT;\n\n    TRUNCATE TABLE Staging.MainTable__SwitchIN;\n\n    ALTER TABLE dbo.MainTable SWITCH PARTITION @PartitionNumber TO Staging.MainTable__SwitchOUT;\n\nEND\nGO\n\nCREATE PROCEDURE dbo.sp_LoadMainTable\n(\n      @PartitionDate DATE\n)\nAS\nBEGIN\n\n    DECLARE\n          @PartitionNumber INT\n        , @ErrorMessage NVARCHAR(4000)\n    ;\n\n    IF EXISTS ( SELECT 1 FROM dbo.MainTable WHERE RunDate = @PartitionDate)\n    BEGIN\n        SET @ErrorMessage = 'Data has already been loaded for the date.  Please purge it first';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    SELECT @PartitionNumber = PartitionNumber\n    FROM MetaData.vw_PartitionDetails\n    WHERE TableName = 'MainTable'\n    AND RangeValue = @PartitionDate;\n\n    IF @PartitionNumber IS NULL\n    BEGIN\n        SET @ErrorMessage = 'Partition has not been created.  Run the proc \"dbo.sp_PrepareMainTablePartitions\" first';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    ALTER TABLE Staging.MainTable__SwitchIn SWITCH PARTITION @PartitionNumber\n        TO dbo.MainTable PARTITION @PartitionNumber;\n\nEND\nGO\n```\n\n> By default **dbo.sp_PrepareMainTablePartitions** will purge data is the partition already exists. But, setting **@OverwriteData=0** will stop this. It will throw an error if it discovers an existing partition.\n\n#### Step 7 .. Testing it all out\n\n##### 7.1\n\nFirstly, lets fire some data into the main table for '2019-01-01'\n\n```sql\nINSERT INTO dbo.MainTable\n(ID, UserName, RunDate)\nVALUES\n      (1,'Bob','2019-01-01')\n    , (2, 'Jane','2019-01-01')\n```\n\nWe can now see how this affects the partitions by selecting from the view **MetaData.vw_PartitionDetails**.\n![2 Rows](2Rows.png)\n\nSo we are now in a place were we can do a mock batch load.\n\n##### 7.2\n\n> all the the scripts below would normally be run via an etl process, but we are just mocking it through direct sql calls.\n\nThe first step is to prepare for the load by calling the procedure **dbo.sp_PrepareMainTablePartitions**.\n\n> We will be running for 2019-01-02 and purging any data if it exists before.\n\n```sql\nEXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1\n```\n\nOnce this is completed. If you select from the **MetaData.vw_PartitionDetails** view again, you can see the new partition.\n![New Partition](NewPartition.png)\n\n##### 7.3\n\nNow we can stage the data by inserting into the **Staging.MainTable\\_\\_SwitchIn** table.\n\n```sql\nINSERT INTO Staging.MainTable__SwitchIN\n( ID, UserName, RunDate)\nVALUES\n      (3,'Vicky','2019-01-02')\n    , (4, 'Eric','2019-01-02')\n    , (5, 'Scott', '2019-01-02')\n```\n\nWe can now see how this affects the partitions by selecting from the view **MetaData.vw_PartitionDetails**.\n![3 New Rows](3NewRows.png)\n\n##### 7.4\n\nThe data is now in the staging area. If this was an actual batch run within an ETL process this would be an ideal time to implement some validation before we move the data in the primary table.\n\nTo move to data in the main table we now call the procedure\n\n```sql\nEXEC dbo.sp_LoadMainTable '2019-01-02'\n```\n\nWe can now see how this affects the partitions by selecting from the view **MetaData.vw_PartitionDetails**.\n![3 Moved Rows](3MovedRows.png)\n\n**Done**\n\n#### Step 8 - Removing data\n\nThe stored procedure **dbo.sp_PrepareMainTablePartitions** will perpare a new partition for data to be inserted, but it will also nuke data if it already existed. Therefore this can be used to blast away a previous load.\n\nLet's see\n\n```sql\nEXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1\n```\n\n![Rows Gone](RowsGone.png)\nThe data is gone again. This was an immediate delete, similar to a truncate but only over the one partition. The stored procedure has actually moved this table into the **Staging.MainTable\\_\\_SwitchOUT** table. Therefore the data can still be queried until the next run, or in theory it could be used before the next run.\n![SwitchOut Output](SwitchOutOutput.png)\n\n#### Thanks\n\n> Here's all the code should you wish to copy it down, and thanks for taking the time to read this topic.\n\n```sql\n\nBEGIN TRY DROP TABLE Staging.MainTable__SwitchIN END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP TABLE Staging.MainTable__SwitchOUT END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP TABLE dbo.MainTable END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP VIEW MetaData.vw_PartitionDetails END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PROC dbo.sp_PrepareMainTablePartitions END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PROC dbo.sp_LoadMainTable END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PARTITION SCHEME psRunDates END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP PARTITION FUNCTION pfRunDates END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP SCHEMA [Staging] END TRY BEGIN CATCH END CATCH\nGO\nBEGIN TRY DROP SCHEMA [MetaData] END TRY BEGIN CATCH END CATCH\nGO\n\n\n\n\nCREATE SCHEMA [Staging]\nGO\n\nCREATE SCHEMA [MetaData]\nGO\n\n\nCREATE PARTITION FUNCTION pfRunDates (DATE)\nAS RANGE RIGHT FOR VALUES ('2019-01-01')\nGO\n\nCREATE PARTITION SCHEME psRunDates\nAS PARTITION pfRunDates\nTO ([Primary],[Primary],[Primary])\nGO\n\nCREATE TABLE dbo.MainTable\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON psRunDates(RunDate)\nGO\nCREATE CLUSTERED INDEX CIX__MainTable_ID ON dbo.MainTable(ID)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable_RunDate ON dbo.MainTable(RunDate)\nGO\n\nCREATE TABLE Staging.MainTable__SwitchIN\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON psRunDates(RunDate)\nGO\nCREATE CLUSTERED INDEX CIX__MainTable__SwitchIN_ID ON Staging.MainTable__SwitchIN(ID)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable__SwitchIN_RunDate ON Staging.MainTable__SwitchIN(RunDate)\nGO\n\nCREATE TABLE Staging.MainTable__SwitchOUT\n(\n      ID            INT\n    , UserName      VARCHAR(100)\n    , RunDate       DATE\n) ON [Primary]\nGO\n-- Note this index does not look identical, but RunDate is part of the index\n-- to equal RunDate being the partition key in the partitioned table\nCREATE CLUSTERED INDEX CIX__MainTable__SwitchOUT_ID\n    ON Staging.MainTable__SwitchOUT(ID,RunDate)\nGO\nCREATE NONCLUSTERED INDEX NCIX__MainTable__SwitchOUT_RunDate\n    ON Staging.MainTable__SwitchOUT(RunDate)\nGO\n\nCREATE VIEW MetaData.vw_PartitionDetails\nAS\n    SELECT\n          FunctionName      =   pf.name\n        , SchemeName        =   ps.name\n        , TableName         =   o.name\n        , PartitionNumber   =   stat.partition_number\n        , [RowCount]        =   stat.row_count\n        , RangeValue        =   prv.value\n    FROM            sys.partition_functions     pf\n\n        INNER JOIN  sys.partition_schemes       ps  ON  ps.function_id  =   pf.function_id\n\n        INNER JOIN  sys.indexes                 i   ON  i.data_space_id =   ps.data_space_id\n                                                    AND i.[type]        =   1 -- Limit to clustered index\n\n        INNER JOIN  sys.partitions              p   ON  i.object_id     =   p.object_id\n                                                    AND p.index_id      =   1 -- Limit to first index\n\n        INNER JOIN  sys.objects                 o   ON  o.object_id     =   i.object_id\n                                                    AND o.[type]        =   'U'\n\n        LEFT  JOIN sys.partition_range_values   prv ON prv.function_id      =   pf.function_id\n                                                    AND p.partition_number  =   CASE pf.boundary_value_on_right\n                                                                                    WHEN 1 THEN prv.boundary_id + 1\n                                                                                    ELSE prv.boundary_id\n                                                                                END\n\n        INNER JOIN sys.dm_db_partition_stats    stat    ON  stat.object_id          =   p.object_id\n                                                        AND stat.index_id           =   p.index_id\n                                                        AND stat.partition_id       =   p.partition_id\n                                                        AND stat.partition_number   =   p.partition_number\nGO\n\n\nCREATE PROCEDURE dbo.sp_PrepareMainTablePartitions\n(\n      @PartitionDate DATE\n    , @OverwriteData BIT = 1 -- 1 = Get rid of previous data.. 0 = Thrown error if previous data found\n)\nAS\nBEGIN\n\n    DECLARE\n          @PartitionNumber INT\n        , @ErrorMessage NVARCHAR(4000)\n    ;\n\n    SELECT @PartitionNumber = PartitionNumber\n    FROM MetaData.vw_PartitionDetails\n    WHERE TableName = 'MainTable'\n    AND RangeValue = @PartitionDate;\n\n    IF @OverwriteData = 0 AND @PartitionNumber IS NOT NULL\n    BEGIN\n        SET @ErrorMessage = 'Partition for this date already exists.  Please purge any data and remove the partition, or recall the proc with OverwriteData = 1';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    IF @PartitionNumber IS NULL\n    BEGIN\n        ALTER PARTITION FUNCTION pfRunDates()\n            SPLIT RANGE (@PartitionDate);\n\n        ALTER PARTITION SCHEME psRunDates\n            NEXT USED [PRIMARY];\n\n        SELECT @PartitionNumber = PartitionNumber\n        FROM MetaData.vw_PartitionDetails\n        WHERE TableName = 'MainTable'\n        AND RangeValue = @PartitionDate;\n\n\n    END\n\n\n    TRUNCATE TABLE Staging.MainTable__SwitchOUT;\n\n    TRUNCATE TABLE Staging.MainTable__SwitchIN;\n\n    ALTER TABLE dbo.MainTable SWITCH PARTITION @PartitionNumber TO Staging.MainTable__SwitchOUT;\n\nEND\nGO\n\n\n\nCREATE PROCEDURE dbo.sp_LoadMainTable\n(\n      @PartitionDate DATE\n)\nAS\nBEGIN\n\n    DECLARE\n          @PartitionNumber INT\n        , @ErrorMessage NVARCHAR(4000)\n    ;\n\n    IF EXISTS ( SELECT 1 FROM dbo.MainTable WHERE RunDate = @PartitionDate)\n    BEGIN\n        SET @ErrorMessage = 'Data has already been loaded for the date.  Pplease purge it first';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    SELECT @PartitionNumber = PartitionNumber\n    FROM MetaData.vw_PartitionDetails\n    WHERE TableName = 'MainTable'\n    AND RangeValue = @PartitionDate;\n\n    IF @PartitionNumber IS NULL\n    BEGIN\n        SET @ErrorMessage = 'Partition has not been created.  Run the proc \"dbo.sp_PrepareMainTablePartitions\" first';\n        RAISERROR(@ErrorMessage,16,1);\n        RETURN;\n    END\n\n    ALTER TABLE Staging.MainTable__SwitchIn SWITCH PARTITION @PartitionNumber\n        TO dbo.MainTable PARTITION @PartitionNumber;\n\nEND\nGO\n\n\nEXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1 ;\n\nINSERT INTO dbo.MainTable\n(ID, UserName, RunDate)\nVALUES\n      (1,'Bob','2019-01-01')\n    , (2, 'Jane','2019-01-01')\n;\n\n\nINSERT INTO Staging.MainTable__SwitchIN\n( ID, UserName, RunDate)\nVALUES\n      (3,'Vicky','2019-01-02')\n    , (4, 'Eric','2019-01-02')\n    , (5, 'Scott', '2019-01-02')\n;\n\n\nEXEC dbo.sp_LoadMainTable '2019-01-02' ;\n\nSELECT *\nFROM MetaData.vw_PartitionDetails ;\n\nSELECT *\nFROM dbo.MainTable ;\n```\n","slug":"sql-server/Loading-Daily-Partitions","published":1,"updated":"2020-03-09T23:10:09.951Z","_id":"ck7l1ww6g00081hrrfu7r8ehi","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>NOTE: This topic was was based on logic prior to the ability to truncate a partition directly.</p>\n</blockquote>\n<p><a href=\"https://github.com/davidtstafford/DailyAutoPartitioning\" target=\"_blank\" rel=\"noopener\"><img src=\"GitHub.png\" alt=\"GitHub\"></a></p>\n<p>I have worked on the number of batch systems that have required partitioning for various reasons. I won’t go into all of the reasons of why and when you should chose partitioning, as that would lead into its own blog post, but there are occasions when it is nice to be able to isolate batch pieces of work and just slot the data in when it is ready (or quickly remove it).</p>\n<p>So, in the following walkthrough, I will go through:</p>\n<ul>\n<li>Creating a simple partitioned table</li>\n<li>Creating an area to stage the data</li>\n<li>Creating a fast method to purge the data</li>\n<li>Creating a set of procedures to support this<ul>\n<li>Include a procedure that will create/prepare the partition for the requested date.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Step-1-Clean-my-environment\"><a href=\"#Step-1-Clean-my-environment\" class=\"headerlink\" title=\"Step 1 .. Clean my environment\"></a>Step 1 .. Clean my environment</h4><p>Just a few scripts that will remove any objects hanging around for any previous runs of the tutorial.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> dbo.MainTable <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> MetaData.vw_PartitionDetails <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> PROC dbo.sp_PrepareMainTablePartitions <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> PROC dbo.sp_LoadMainTable <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> [Staging] <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> [MetaData] <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<p>I know it’s lazy wrapping it all up with Begin Trys :).</p>\n<h4 id=\"Step-2-Creating-some-additional-schemas-for-my-objects-to-live-in\"><a href=\"#Step-2-Creating-some-additional-schemas-for-my-objects-to-live-in\" class=\"headerlink\" title=\"Step 2 .. Creating some additional schemas for my objects to live in\"></a>Step 2 .. Creating some additional schemas for my objects to live in</h4><p>I’ll be creating</p>\n<ul>\n<li>Staging - For landing the data</li>\n<li>MetaData - To house useful Tables / Views</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> [Staging]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> [MetaData]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Not really essential, I’m just a bit OCD.</p>\n</blockquote>\n<h4 id=\"Step-3-Creating-the-Partitions\"><a href=\"#Step-3-Creating-the-Partitions\" class=\"headerlink\" title=\"Step 3 .. Creating the Partitions\"></a>Step 3 .. Creating the Partitions</h4><p>I’ll create the partition function and scheme and setup them up with one date.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates (<span class=\"built_in\">DATE</span>)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">RANGE</span> <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">VALUES</span> (<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">PARTITION</span> pfRunDates</span><br><span class=\"line\"><span class=\"keyword\">TO</span> ([Primary],[Primary],[Primary])</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note: I have defined 3 filegroups even though there is only 1 date. This has been done to allow for the “Next Used” partition. i.e. 1 filegroup is for the data. 1 filegroup is beyond the range. The final filegroup is in place as a placeholder for a new partition to be created.</p>\n</blockquote>\n<h4 id=\"Step-4-Creating-the-tables\"><a href=\"#Step-4-Creating-the-tables\" class=\"headerlink\" title=\"Step 4 .. Creating the tables\"></a>Step 4 .. Creating the tables</h4><p>Creating 3 tables:</p>\n<ul>\n<li>Main table (dbo.MainTable)<ul>\n<li>Clustered index for the ID Column</li>\n<li>Non Clustered index for the RunDate Column</li>\n<li>And importantly, uses the partition schema “psRunDates”. Based on the RunDate column</li>\n</ul>\n</li>\n<li>Landing Table (Staging.MainTable__SwitchIN)<ul>\n<li>Identical setup to the Main Table other than living in the Staging schema</li>\n</ul>\n</li>\n<li>Purge Table (Staging.MainTable__SwitchOUT)<ul>\n<li>Not indexed</li>\n<li>Clustered index also contains the RunDate column as this will make the table appear identical to the partitioned table</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dbo.MainTable</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> psRunDates(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable_ID <span class=\"keyword\">ON</span> dbo.MainTable(<span class=\"keyword\">ID</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable_RunDate <span class=\"keyword\">ON</span> dbo.MainTable(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> psRunDates(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable__SwitchIN_ID <span class=\"keyword\">ON</span> Staging.MainTable__SwitchIN(<span class=\"keyword\">ID</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable__SwitchIN_RunDate <span class=\"keyword\">ON</span> Staging.MainTable__SwitchIN(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> [Primary]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"comment\">-- Note this index does not look identical, but RunDate is part of the index</span></span><br><span class=\"line\"><span class=\"comment\">-- to equal RunDate being the partition key in the partitioned table</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable__SwitchOUT_ID</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> Staging.MainTable__SwitchOUT(<span class=\"keyword\">ID</span>,RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable__SwitchOUT_RunDate</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> Staging.MainTable__SwitchOUT(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note - The loading table is partitioned as well. Technically it doesn’t have to be. If not though, you would need to do some check constaints magic to makes the tables appear identical for partition switching.</p>\n</blockquote>\n<h4 id=\"Step-5-Creating-a-view-to-display-partition-information\"><a href=\"#Step-5-Creating-a-view-to-display-partition-information\" class=\"headerlink\" title=\"Step 5 .. Creating a view to display partition information\"></a>Step 5 .. Creating a view to display partition information</h4><p>The script below will create the view within the MetaData schema.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          FunctionName      =   pf.name</span><br><span class=\"line\">        , SchemeName        =   ps.name</span><br><span class=\"line\">        , TableName         =   o.name</span><br><span class=\"line\">        , PartitionNumber   =   stat.partition_number</span><br><span class=\"line\">        , [RowCount]        =   stat.row_count</span><br><span class=\"line\">        , RangeValue        =   prv.value</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span>            sys.partition_functions     pf</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.partition_schemes       ps  <span class=\"keyword\">ON</span>  ps.function_id  =   pf.function_id</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.indexes                 i   <span class=\"keyword\">ON</span>  i.data_space_id =   ps.data_space_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> i.[<span class=\"keyword\">type</span>]        =   <span class=\"number\">1</span> <span class=\"comment\">-- Limit to clustered index</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.partitions              p   <span class=\"keyword\">ON</span>  i.object_id     =   p.object_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> p.index_id      =   <span class=\"number\">1</span> <span class=\"comment\">-- Limit to first index</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.objects                 o   <span class=\"keyword\">ON</span>  o.object_id     =   i.object_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> o.[<span class=\"keyword\">type</span>]        =   <span class=\"string\">'U'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span>  <span class=\"keyword\">JOIN</span> sys.partition_range_values   prv <span class=\"keyword\">ON</span> prv.function_id      =   pf.function_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> p.partition_number  =   <span class=\"keyword\">CASE</span> pf.boundary_value_on_right</span><br><span class=\"line\">                                                                                    <span class=\"keyword\">WHEN</span> <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> prv.boundary_id + <span class=\"number\">1</span></span><br><span class=\"line\">                                                                                    <span class=\"keyword\">ELSE</span> prv.boundary_id</span><br><span class=\"line\">                                                                                <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> sys.dm_db_partition_stats    stat    <span class=\"keyword\">ON</span>  stat.object_id          =   p.object_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.index_id           =   p.index_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.partition_id       =   p.partition_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.partition_number   =   p.partition_number</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>There are a number of ways to produce the same output in a view, and maybe there is a more refined way to it. One day I may try to refine this script ;).</p>\n</blockquote>\n<h4 id=\"Step-6-Creating-the-all-important-procedures\"><a href=\"#Step-6-Creating-the-all-important-procedures\" class=\"headerlink\" title=\"Step 6 .. Creating the all important procedures\"></a>Step 6 .. Creating the all important procedures</h4><p>The scripts below will create 2 stored procedures. One to prepare new partitions and purge data if that partition already exists. The other to migrate the data from the landing area into the main table.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> dbo.sp_PrepareMainTablePartitions</span><br><span class=\"line\">(</span><br><span class=\"line\">      @PartitionDate <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , @OverwriteData <span class=\"built_in\">BIT</span> = <span class=\"number\">1</span> <span class=\"comment\">-- 1 = Get rid of previous data.. 0 = Thrown error if previous data found</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">          @PartitionNumber <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , @ErrorMessage <span class=\"keyword\">NVARCHAR</span>(<span class=\"number\">4000</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF @OverwriteData = 0 AND @PartitionNumber IS NOT NULL</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Partition for this date already exists.  Please purge any data and remove the partition, or recall the proc with OverwriteData = 1'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">IF</span> @PartitionNumber <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">ALTER</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates()</span><br><span class=\"line\">            <span class=\"keyword\">SPLIT</span> <span class=\"keyword\">RANGE</span> (@PartitionDate);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">ALTER</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates</span><br><span class=\"line\">            <span class=\"keyword\">NEXT</span> USED [PRIMARY];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">        <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> dbo.MainTable <span class=\"keyword\">SWITCH</span> <span class=\"keyword\">PARTITION</span> @PartitionNumber <span class=\"keyword\">TO</span> Staging.MainTable__SwitchOUT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> dbo.sp_LoadMainTable</span><br><span class=\"line\">(</span><br><span class=\"line\">      @PartitionDate <span class=\"built_in\">DATE</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">          @PartitionNumber <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , @ErrorMessage <span class=\"keyword\">NVARCHAR</span>(<span class=\"number\">4000</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF EXISTS ( <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> dbo.MainTable <span class=\"keyword\">WHERE</span> RunDate = @PartitionDate)</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Data has already been loaded for the date.  Please purge it first'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF @PartitionNumber IS NULL</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Partition has not been created.  Run the proc \"dbo.sp_PrepareMainTablePartitions\" first'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIn <span class=\"keyword\">SWITCH</span> <span class=\"keyword\">PARTITION</span> @PartitionNumber</span><br><span class=\"line\">        <span class=\"keyword\">TO</span> dbo.MainTable <span class=\"keyword\">PARTITION</span> @PartitionNumber;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>By default <strong>dbo.sp_PrepareMainTablePartitions</strong> will purge data is the partition already exists. But, setting <strong>@OverwriteData=0</strong> will stop this. It will throw an error if it discovers an existing partition.</p>\n</blockquote>\n<h4 id=\"Step-7-Testing-it-all-out\"><a href=\"#Step-7-Testing-it-all-out\" class=\"headerlink\" title=\"Step 7 .. Testing it all out\"></a>Step 7 .. Testing it all out</h4><h5 id=\"7-1\"><a href=\"#7-1\" class=\"headerlink\" title=\"7.1\"></a>7.1</h5><p>Firstly, lets fire some data into the main table for ‘2019-01-01’</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dbo.MainTable</span><br><span class=\"line\">(<span class=\"keyword\">ID</span>, UserName, RunDate)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"number\">1</span>,<span class=\"string\">'Bob'</span>,<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">2</span>, <span class=\"string\">'Jane'</span>,<span class=\"string\">'2019-01-01'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>We can now see how this affects the partitions by selecting from the view <strong>MetaData.vw_PartitionDetails</strong>.<br><img src=\"2Rows.png\" alt=\"2 Rows\"></p>\n<p>So we are now in a place were we can do a mock batch load.</p>\n<h5 id=\"7-2\"><a href=\"#7-2\" class=\"headerlink\" title=\"7.2\"></a>7.2</h5><blockquote>\n<p>all the the scripts below would normally be run via an etl process, but we are just mocking it through direct sql calls.</p>\n</blockquote>\n<p>The first step is to prepare for the load by calling the procedure <strong>dbo.sp_PrepareMainTablePartitions</strong>.</p>\n<blockquote>\n<p>We will be running for 2019-01-02 and purging any data if it exists before.</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1</span><br></pre></td></tr></table></figure>\n\n<p>Once this is completed. If you select from the <strong>MetaData.vw_PartitionDetails</strong> view again, you can see the new partition.<br><img src=\"NewPartition.png\" alt=\"New Partition\"></p>\n<h5 id=\"7-3\"><a href=\"#7-3\" class=\"headerlink\" title=\"7.3\"></a>7.3</h5><p>Now we can stage the data by inserting into the <strong>Staging.MainTable__SwitchIn</strong> table.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Staging.MainTable__SwitchIN</span><br><span class=\"line\">( <span class=\"keyword\">ID</span>, UserName, RunDate)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"number\">3</span>,<span class=\"string\">'Vicky'</span>,<span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">4</span>, <span class=\"string\">'Eric'</span>,<span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">5</span>, <span class=\"string\">'Scott'</span>, <span class=\"string\">'2019-01-02'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>We can now see how this affects the partitions by selecting from the view <strong>MetaData.vw_PartitionDetails</strong>.<br><img src=\"3NewRows.png\" alt=\"3 New Rows\"></p>\n<h5 id=\"7-4\"><a href=\"#7-4\" class=\"headerlink\" title=\"7.4\"></a>7.4</h5><p>The data is now in the staging area. If this was an actual batch run within an ETL process this would be an ideal time to implement some validation before we move the data in the primary table.</p>\n<p>To move to data in the main table we now call the procedure</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXEC dbo.sp_LoadMainTable '2019-01-02'</span><br></pre></td></tr></table></figure>\n\n<p>We can now see how this affects the partitions by selecting from the view <strong>MetaData.vw_PartitionDetails</strong>.<br><img src=\"3MovedRows.png\" alt=\"3 Moved Rows\"></p>\n<p><strong>Done</strong></p>\n<h4 id=\"Step-8-Removing-data\"><a href=\"#Step-8-Removing-data\" class=\"headerlink\" title=\"Step 8 - Removing data\"></a>Step 8 - Removing data</h4><p>The stored procedure <strong>dbo.sp_PrepareMainTablePartitions</strong> will perpare a new partition for data to be inserted, but it will also nuke data if it already existed. Therefore this can be used to blast away a previous load.</p>\n<p>Let’s see</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"RowsGone.png\" alt=\"Rows Gone\"><br>The data is gone again. This was an immediate delete, similar to a truncate but only over the one partition. The stored procedure has actually moved this table into the <strong>Staging.MainTable__SwitchOUT</strong> table. Therefore the data can still be queried until the next run, or in theory it could be used before the next run.<br><img src=\"SwitchOutOutput.png\" alt=\"SwitchOut Output\"></p>\n<h4 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h4><blockquote>\n<p>Here’s all the code should you wish to copy it down, and thanks for taking the time to read this topic.</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> dbo.MainTable <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> MetaData.vw_PartitionDetails <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> PROC dbo.sp_PrepareMainTablePartitions <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> PROC dbo.sp_LoadMainTable <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> [Staging] <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> [MetaData] <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> [Staging]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> [MetaData]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates (<span class=\"built_in\">DATE</span>)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">RANGE</span> <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">VALUES</span> (<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">PARTITION</span> pfRunDates</span><br><span class=\"line\"><span class=\"keyword\">TO</span> ([Primary],[Primary],[Primary])</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dbo.MainTable</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> psRunDates(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable_ID <span class=\"keyword\">ON</span> dbo.MainTable(<span class=\"keyword\">ID</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable_RunDate <span class=\"keyword\">ON</span> dbo.MainTable(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> psRunDates(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable__SwitchIN_ID <span class=\"keyword\">ON</span> Staging.MainTable__SwitchIN(<span class=\"keyword\">ID</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable__SwitchIN_RunDate <span class=\"keyword\">ON</span> Staging.MainTable__SwitchIN(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> [Primary]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"comment\">-- Note this index does not look identical, but RunDate is part of the index</span></span><br><span class=\"line\"><span class=\"comment\">-- to equal RunDate being the partition key in the partitioned table</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable__SwitchOUT_ID</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> Staging.MainTable__SwitchOUT(<span class=\"keyword\">ID</span>,RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable__SwitchOUT_RunDate</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> Staging.MainTable__SwitchOUT(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          FunctionName      =   pf.name</span><br><span class=\"line\">        , SchemeName        =   ps.name</span><br><span class=\"line\">        , TableName         =   o.name</span><br><span class=\"line\">        , PartitionNumber   =   stat.partition_number</span><br><span class=\"line\">        , [RowCount]        =   stat.row_count</span><br><span class=\"line\">        , RangeValue        =   prv.value</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span>            sys.partition_functions     pf</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.partition_schemes       ps  <span class=\"keyword\">ON</span>  ps.function_id  =   pf.function_id</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.indexes                 i   <span class=\"keyword\">ON</span>  i.data_space_id =   ps.data_space_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> i.[<span class=\"keyword\">type</span>]        =   <span class=\"number\">1</span> <span class=\"comment\">-- Limit to clustered index</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.partitions              p   <span class=\"keyword\">ON</span>  i.object_id     =   p.object_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> p.index_id      =   <span class=\"number\">1</span> <span class=\"comment\">-- Limit to first index</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.objects                 o   <span class=\"keyword\">ON</span>  o.object_id     =   i.object_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> o.[<span class=\"keyword\">type</span>]        =   <span class=\"string\">'U'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span>  <span class=\"keyword\">JOIN</span> sys.partition_range_values   prv <span class=\"keyword\">ON</span> prv.function_id      =   pf.function_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> p.partition_number  =   <span class=\"keyword\">CASE</span> pf.boundary_value_on_right</span><br><span class=\"line\">                                                                                    <span class=\"keyword\">WHEN</span> <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> prv.boundary_id + <span class=\"number\">1</span></span><br><span class=\"line\">                                                                                    <span class=\"keyword\">ELSE</span> prv.boundary_id</span><br><span class=\"line\">                                                                                <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> sys.dm_db_partition_stats    stat    <span class=\"keyword\">ON</span>  stat.object_id          =   p.object_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.index_id           =   p.index_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.partition_id       =   p.partition_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.partition_number   =   p.partition_number</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> dbo.sp_PrepareMainTablePartitions</span><br><span class=\"line\">(</span><br><span class=\"line\">      @PartitionDate <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , @OverwriteData <span class=\"built_in\">BIT</span> = <span class=\"number\">1</span> <span class=\"comment\">-- 1 = Get rid of previous data.. 0 = Thrown error if previous data found</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">          @PartitionNumber <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , @ErrorMessage <span class=\"keyword\">NVARCHAR</span>(<span class=\"number\">4000</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF @OverwriteData = 0 AND @PartitionNumber IS NOT NULL</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Partition for this date already exists.  Please purge any data and remove the partition, or recall the proc with OverwriteData = 1'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">IF</span> @PartitionNumber <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">ALTER</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates()</span><br><span class=\"line\">            <span class=\"keyword\">SPLIT</span> <span class=\"keyword\">RANGE</span> (@PartitionDate);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">ALTER</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates</span><br><span class=\"line\">            <span class=\"keyword\">NEXT</span> USED [PRIMARY];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">        <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> dbo.MainTable <span class=\"keyword\">SWITCH</span> <span class=\"keyword\">PARTITION</span> @PartitionNumber <span class=\"keyword\">TO</span> Staging.MainTable__SwitchOUT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> dbo.sp_LoadMainTable</span><br><span class=\"line\">(</span><br><span class=\"line\">      @PartitionDate <span class=\"built_in\">DATE</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">          @PartitionNumber <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , @ErrorMessage <span class=\"keyword\">NVARCHAR</span>(<span class=\"number\">4000</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF EXISTS ( <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> dbo.MainTable <span class=\"keyword\">WHERE</span> RunDate = @PartitionDate)</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Data has already been loaded for the date.  Pplease purge it first'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF @PartitionNumber IS NULL</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Partition has not been created.  Run the proc \"dbo.sp_PrepareMainTablePartitions\" first'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIn <span class=\"keyword\">SWITCH</span> <span class=\"keyword\">PARTITION</span> @PartitionNumber</span><br><span class=\"line\">        <span class=\"keyword\">TO</span> dbo.MainTable <span class=\"keyword\">PARTITION</span> @PartitionNumber;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">EXEC dbo.sp_PrepareMainTablePartitions <span class=\"string\">'2019-01-02'</span>,<span class=\"number\">1</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dbo.MainTable</span><br><span class=\"line\">(<span class=\"keyword\">ID</span>, UserName, RunDate)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"number\">1</span>,<span class=\"string\">'Bob'</span>,<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">2</span>, <span class=\"string\">'Jane'</span>,<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Staging.MainTable__SwitchIN</span><br><span class=\"line\">( <span class=\"keyword\">ID</span>, UserName, RunDate)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"number\">3</span>,<span class=\"string\">'Vicky'</span>,<span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">4</span>, <span class=\"string\">'Eric'</span>,<span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">5</span>, <span class=\"string\">'Scott'</span>, <span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">EXEC dbo.sp_LoadMainTable '2019-01-02' ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dbo.MainTable ;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>NOTE: This topic was was based on logic prior to the ability to truncate a partition directly.</p>\n</blockquote>\n<p><a href=\"https://github.com/davidtstafford/DailyAutoPartitioning\" target=\"_blank\" rel=\"noopener\"><img src=\"GitHub.png\" alt=\"GitHub\"></a></p>\n<p>I have worked on the number of batch systems that have required partitioning for various reasons. I won’t go into all of the reasons of why and when you should chose partitioning, as that would lead into its own blog post, but there are occasions when it is nice to be able to isolate batch pieces of work and just slot the data in when it is ready (or quickly remove it).</p>\n<p>So, in the following walkthrough, I will go through:</p>\n<ul>\n<li>Creating a simple partitioned table</li>\n<li>Creating an area to stage the data</li>\n<li>Creating a fast method to purge the data</li>\n<li>Creating a set of procedures to support this<ul>\n<li>Include a procedure that will create/prepare the partition for the requested date.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Step-1-Clean-my-environment\"><a href=\"#Step-1-Clean-my-environment\" class=\"headerlink\" title=\"Step 1 .. Clean my environment\"></a>Step 1 .. Clean my environment</h4><p>Just a few scripts that will remove any objects hanging around for any previous runs of the tutorial.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> dbo.MainTable <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> MetaData.vw_PartitionDetails <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> PROC dbo.sp_PrepareMainTablePartitions <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> PROC dbo.sp_LoadMainTable <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> [Staging] <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> [MetaData] <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<p>I know it’s lazy wrapping it all up with Begin Trys :).</p>\n<h4 id=\"Step-2-Creating-some-additional-schemas-for-my-objects-to-live-in\"><a href=\"#Step-2-Creating-some-additional-schemas-for-my-objects-to-live-in\" class=\"headerlink\" title=\"Step 2 .. Creating some additional schemas for my objects to live in\"></a>Step 2 .. Creating some additional schemas for my objects to live in</h4><p>I’ll be creating</p>\n<ul>\n<li>Staging - For landing the data</li>\n<li>MetaData - To house useful Tables / Views</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> [Staging]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> [MetaData]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Not really essential, I’m just a bit OCD.</p>\n</blockquote>\n<h4 id=\"Step-3-Creating-the-Partitions\"><a href=\"#Step-3-Creating-the-Partitions\" class=\"headerlink\" title=\"Step 3 .. Creating the Partitions\"></a>Step 3 .. Creating the Partitions</h4><p>I’ll create the partition function and scheme and setup them up with one date.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates (<span class=\"built_in\">DATE</span>)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">RANGE</span> <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">VALUES</span> (<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">PARTITION</span> pfRunDates</span><br><span class=\"line\"><span class=\"keyword\">TO</span> ([Primary],[Primary],[Primary])</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note: I have defined 3 filegroups even though there is only 1 date. This has been done to allow for the “Next Used” partition. i.e. 1 filegroup is for the data. 1 filegroup is beyond the range. The final filegroup is in place as a placeholder for a new partition to be created.</p>\n</blockquote>\n<h4 id=\"Step-4-Creating-the-tables\"><a href=\"#Step-4-Creating-the-tables\" class=\"headerlink\" title=\"Step 4 .. Creating the tables\"></a>Step 4 .. Creating the tables</h4><p>Creating 3 tables:</p>\n<ul>\n<li>Main table (dbo.MainTable)<ul>\n<li>Clustered index for the ID Column</li>\n<li>Non Clustered index for the RunDate Column</li>\n<li>And importantly, uses the partition schema “psRunDates”. Based on the RunDate column</li>\n</ul>\n</li>\n<li>Landing Table (Staging.MainTable__SwitchIN)<ul>\n<li>Identical setup to the Main Table other than living in the Staging schema</li>\n</ul>\n</li>\n<li>Purge Table (Staging.MainTable__SwitchOUT)<ul>\n<li>Not indexed</li>\n<li>Clustered index also contains the RunDate column as this will make the table appear identical to the partitioned table</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dbo.MainTable</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> psRunDates(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable_ID <span class=\"keyword\">ON</span> dbo.MainTable(<span class=\"keyword\">ID</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable_RunDate <span class=\"keyword\">ON</span> dbo.MainTable(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> psRunDates(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable__SwitchIN_ID <span class=\"keyword\">ON</span> Staging.MainTable__SwitchIN(<span class=\"keyword\">ID</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable__SwitchIN_RunDate <span class=\"keyword\">ON</span> Staging.MainTable__SwitchIN(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> [Primary]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"comment\">-- Note this index does not look identical, but RunDate is part of the index</span></span><br><span class=\"line\"><span class=\"comment\">-- to equal RunDate being the partition key in the partitioned table</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable__SwitchOUT_ID</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> Staging.MainTable__SwitchOUT(<span class=\"keyword\">ID</span>,RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable__SwitchOUT_RunDate</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> Staging.MainTable__SwitchOUT(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note - The loading table is partitioned as well. Technically it doesn’t have to be. If not though, you would need to do some check constaints magic to makes the tables appear identical for partition switching.</p>\n</blockquote>\n<h4 id=\"Step-5-Creating-a-view-to-display-partition-information\"><a href=\"#Step-5-Creating-a-view-to-display-partition-information\" class=\"headerlink\" title=\"Step 5 .. Creating a view to display partition information\"></a>Step 5 .. Creating a view to display partition information</h4><p>The script below will create the view within the MetaData schema.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          FunctionName      =   pf.name</span><br><span class=\"line\">        , SchemeName        =   ps.name</span><br><span class=\"line\">        , TableName         =   o.name</span><br><span class=\"line\">        , PartitionNumber   =   stat.partition_number</span><br><span class=\"line\">        , [RowCount]        =   stat.row_count</span><br><span class=\"line\">        , RangeValue        =   prv.value</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span>            sys.partition_functions     pf</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.partition_schemes       ps  <span class=\"keyword\">ON</span>  ps.function_id  =   pf.function_id</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.indexes                 i   <span class=\"keyword\">ON</span>  i.data_space_id =   ps.data_space_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> i.[<span class=\"keyword\">type</span>]        =   <span class=\"number\">1</span> <span class=\"comment\">-- Limit to clustered index</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.partitions              p   <span class=\"keyword\">ON</span>  i.object_id     =   p.object_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> p.index_id      =   <span class=\"number\">1</span> <span class=\"comment\">-- Limit to first index</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.objects                 o   <span class=\"keyword\">ON</span>  o.object_id     =   i.object_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> o.[<span class=\"keyword\">type</span>]        =   <span class=\"string\">'U'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span>  <span class=\"keyword\">JOIN</span> sys.partition_range_values   prv <span class=\"keyword\">ON</span> prv.function_id      =   pf.function_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> p.partition_number  =   <span class=\"keyword\">CASE</span> pf.boundary_value_on_right</span><br><span class=\"line\">                                                                                    <span class=\"keyword\">WHEN</span> <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> prv.boundary_id + <span class=\"number\">1</span></span><br><span class=\"line\">                                                                                    <span class=\"keyword\">ELSE</span> prv.boundary_id</span><br><span class=\"line\">                                                                                <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> sys.dm_db_partition_stats    stat    <span class=\"keyword\">ON</span>  stat.object_id          =   p.object_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.index_id           =   p.index_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.partition_id       =   p.partition_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.partition_number   =   p.partition_number</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>There are a number of ways to produce the same output in a view, and maybe there is a more refined way to it. One day I may try to refine this script ;).</p>\n</blockquote>\n<h4 id=\"Step-6-Creating-the-all-important-procedures\"><a href=\"#Step-6-Creating-the-all-important-procedures\" class=\"headerlink\" title=\"Step 6 .. Creating the all important procedures\"></a>Step 6 .. Creating the all important procedures</h4><p>The scripts below will create 2 stored procedures. One to prepare new partitions and purge data if that partition already exists. The other to migrate the data from the landing area into the main table.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> dbo.sp_PrepareMainTablePartitions</span><br><span class=\"line\">(</span><br><span class=\"line\">      @PartitionDate <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , @OverwriteData <span class=\"built_in\">BIT</span> = <span class=\"number\">1</span> <span class=\"comment\">-- 1 = Get rid of previous data.. 0 = Thrown error if previous data found</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">          @PartitionNumber <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , @ErrorMessage <span class=\"keyword\">NVARCHAR</span>(<span class=\"number\">4000</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF @OverwriteData = 0 AND @PartitionNumber IS NOT NULL</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Partition for this date already exists.  Please purge any data and remove the partition, or recall the proc with OverwriteData = 1'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">IF</span> @PartitionNumber <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">ALTER</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates()</span><br><span class=\"line\">            <span class=\"keyword\">SPLIT</span> <span class=\"keyword\">RANGE</span> (@PartitionDate);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">ALTER</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates</span><br><span class=\"line\">            <span class=\"keyword\">NEXT</span> USED [PRIMARY];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">        <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> dbo.MainTable <span class=\"keyword\">SWITCH</span> <span class=\"keyword\">PARTITION</span> @PartitionNumber <span class=\"keyword\">TO</span> Staging.MainTable__SwitchOUT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> dbo.sp_LoadMainTable</span><br><span class=\"line\">(</span><br><span class=\"line\">      @PartitionDate <span class=\"built_in\">DATE</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">          @PartitionNumber <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , @ErrorMessage <span class=\"keyword\">NVARCHAR</span>(<span class=\"number\">4000</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF EXISTS ( <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> dbo.MainTable <span class=\"keyword\">WHERE</span> RunDate = @PartitionDate)</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Data has already been loaded for the date.  Please purge it first'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF @PartitionNumber IS NULL</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Partition has not been created.  Run the proc \"dbo.sp_PrepareMainTablePartitions\" first'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIn <span class=\"keyword\">SWITCH</span> <span class=\"keyword\">PARTITION</span> @PartitionNumber</span><br><span class=\"line\">        <span class=\"keyword\">TO</span> dbo.MainTable <span class=\"keyword\">PARTITION</span> @PartitionNumber;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>By default <strong>dbo.sp_PrepareMainTablePartitions</strong> will purge data is the partition already exists. But, setting <strong>@OverwriteData=0</strong> will stop this. It will throw an error if it discovers an existing partition.</p>\n</blockquote>\n<h4 id=\"Step-7-Testing-it-all-out\"><a href=\"#Step-7-Testing-it-all-out\" class=\"headerlink\" title=\"Step 7 .. Testing it all out\"></a>Step 7 .. Testing it all out</h4><h5 id=\"7-1\"><a href=\"#7-1\" class=\"headerlink\" title=\"7.1\"></a>7.1</h5><p>Firstly, lets fire some data into the main table for ‘2019-01-01’</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dbo.MainTable</span><br><span class=\"line\">(<span class=\"keyword\">ID</span>, UserName, RunDate)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"number\">1</span>,<span class=\"string\">'Bob'</span>,<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">2</span>, <span class=\"string\">'Jane'</span>,<span class=\"string\">'2019-01-01'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>We can now see how this affects the partitions by selecting from the view <strong>MetaData.vw_PartitionDetails</strong>.<br><img src=\"2Rows.png\" alt=\"2 Rows\"></p>\n<p>So we are now in a place were we can do a mock batch load.</p>\n<h5 id=\"7-2\"><a href=\"#7-2\" class=\"headerlink\" title=\"7.2\"></a>7.2</h5><blockquote>\n<p>all the the scripts below would normally be run via an etl process, but we are just mocking it through direct sql calls.</p>\n</blockquote>\n<p>The first step is to prepare for the load by calling the procedure <strong>dbo.sp_PrepareMainTablePartitions</strong>.</p>\n<blockquote>\n<p>We will be running for 2019-01-02 and purging any data if it exists before.</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1</span><br></pre></td></tr></table></figure>\n\n<p>Once this is completed. If you select from the <strong>MetaData.vw_PartitionDetails</strong> view again, you can see the new partition.<br><img src=\"NewPartition.png\" alt=\"New Partition\"></p>\n<h5 id=\"7-3\"><a href=\"#7-3\" class=\"headerlink\" title=\"7.3\"></a>7.3</h5><p>Now we can stage the data by inserting into the <strong>Staging.MainTable__SwitchIn</strong> table.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Staging.MainTable__SwitchIN</span><br><span class=\"line\">( <span class=\"keyword\">ID</span>, UserName, RunDate)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"number\">3</span>,<span class=\"string\">'Vicky'</span>,<span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">4</span>, <span class=\"string\">'Eric'</span>,<span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">5</span>, <span class=\"string\">'Scott'</span>, <span class=\"string\">'2019-01-02'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>We can now see how this affects the partitions by selecting from the view <strong>MetaData.vw_PartitionDetails</strong>.<br><img src=\"3NewRows.png\" alt=\"3 New Rows\"></p>\n<h5 id=\"7-4\"><a href=\"#7-4\" class=\"headerlink\" title=\"7.4\"></a>7.4</h5><p>The data is now in the staging area. If this was an actual batch run within an ETL process this would be an ideal time to implement some validation before we move the data in the primary table.</p>\n<p>To move to data in the main table we now call the procedure</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXEC dbo.sp_LoadMainTable '2019-01-02'</span><br></pre></td></tr></table></figure>\n\n<p>We can now see how this affects the partitions by selecting from the view <strong>MetaData.vw_PartitionDetails</strong>.<br><img src=\"3MovedRows.png\" alt=\"3 Moved Rows\"></p>\n<p><strong>Done</strong></p>\n<h4 id=\"Step-8-Removing-data\"><a href=\"#Step-8-Removing-data\" class=\"headerlink\" title=\"Step 8 - Removing data\"></a>Step 8 - Removing data</h4><p>The stored procedure <strong>dbo.sp_PrepareMainTablePartitions</strong> will perpare a new partition for data to be inserted, but it will also nuke data if it already existed. Therefore this can be used to blast away a previous load.</p>\n<p>Let’s see</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXEC dbo.sp_PrepareMainTablePartitions '2019-01-02',1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"RowsGone.png\" alt=\"Rows Gone\"><br>The data is gone again. This was an immediate delete, similar to a truncate but only over the one partition. The stored procedure has actually moved this table into the <strong>Staging.MainTable__SwitchOUT</strong> table. Therefore the data can still be queried until the next run, or in theory it could be used before the next run.<br><img src=\"SwitchOutOutput.png\" alt=\"SwitchOut Output\"></p>\n<h4 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h4><blockquote>\n<p>Here’s all the code should you wish to copy it down, and thanks for taking the time to read this topic.</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> dbo.MainTable <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> MetaData.vw_PartitionDetails <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> PROC dbo.sp_PrepareMainTablePartitions <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> PROC dbo.sp_LoadMainTable <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> [Staging] <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY <span class=\"keyword\">DROP</span> <span class=\"keyword\">SCHEMA</span> [MetaData] <span class=\"keyword\">END</span> TRY <span class=\"keyword\">BEGIN</span> CATCH <span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> [Staging]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">SCHEMA</span> [MetaData]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates (<span class=\"built_in\">DATE</span>)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">RANGE</span> <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">VALUES</span> (<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">PARTITION</span> pfRunDates</span><br><span class=\"line\"><span class=\"keyword\">TO</span> ([Primary],[Primary],[Primary])</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dbo.MainTable</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> psRunDates(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable_ID <span class=\"keyword\">ON</span> dbo.MainTable(<span class=\"keyword\">ID</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable_RunDate <span class=\"keyword\">ON</span> dbo.MainTable(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> psRunDates(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable__SwitchIN_ID <span class=\"keyword\">ON</span> Staging.MainTable__SwitchIN(<span class=\"keyword\">ID</span>)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable__SwitchIN_RunDate <span class=\"keyword\">ON</span> Staging.MainTable__SwitchIN(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>            <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName      <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RunDate       <span class=\"built_in\">DATE</span></span><br><span class=\"line\">) <span class=\"keyword\">ON</span> [Primary]</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"comment\">-- Note this index does not look identical, but RunDate is part of the index</span></span><br><span class=\"line\"><span class=\"comment\">-- to equal RunDate being the partition key in the partitioned table</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> CLUSTERED <span class=\"keyword\">INDEX</span> CIX__MainTable__SwitchOUT_ID</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> Staging.MainTable__SwitchOUT(<span class=\"keyword\">ID</span>,RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> NONCLUSTERED <span class=\"keyword\">INDEX</span> NCIX__MainTable__SwitchOUT_RunDate</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> Staging.MainTable__SwitchOUT(RunDate)</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          FunctionName      =   pf.name</span><br><span class=\"line\">        , SchemeName        =   ps.name</span><br><span class=\"line\">        , TableName         =   o.name</span><br><span class=\"line\">        , PartitionNumber   =   stat.partition_number</span><br><span class=\"line\">        , [RowCount]        =   stat.row_count</span><br><span class=\"line\">        , RangeValue        =   prv.value</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span>            sys.partition_functions     pf</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.partition_schemes       ps  <span class=\"keyword\">ON</span>  ps.function_id  =   pf.function_id</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.indexes                 i   <span class=\"keyword\">ON</span>  i.data_space_id =   ps.data_space_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> i.[<span class=\"keyword\">type</span>]        =   <span class=\"number\">1</span> <span class=\"comment\">-- Limit to clustered index</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.partitions              p   <span class=\"keyword\">ON</span>  i.object_id     =   p.object_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> p.index_id      =   <span class=\"number\">1</span> <span class=\"comment\">-- Limit to first index</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span>  sys.objects                 o   <span class=\"keyword\">ON</span>  o.object_id     =   i.object_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> o.[<span class=\"keyword\">type</span>]        =   <span class=\"string\">'U'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span>  <span class=\"keyword\">JOIN</span> sys.partition_range_values   prv <span class=\"keyword\">ON</span> prv.function_id      =   pf.function_id</span><br><span class=\"line\">                                                    <span class=\"keyword\">AND</span> p.partition_number  =   <span class=\"keyword\">CASE</span> pf.boundary_value_on_right</span><br><span class=\"line\">                                                                                    <span class=\"keyword\">WHEN</span> <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> prv.boundary_id + <span class=\"number\">1</span></span><br><span class=\"line\">                                                                                    <span class=\"keyword\">ELSE</span> prv.boundary_id</span><br><span class=\"line\">                                                                                <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> sys.dm_db_partition_stats    stat    <span class=\"keyword\">ON</span>  stat.object_id          =   p.object_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.index_id           =   p.index_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.partition_id       =   p.partition_id</span><br><span class=\"line\">                                                        <span class=\"keyword\">AND</span> stat.partition_number   =   p.partition_number</span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> dbo.sp_PrepareMainTablePartitions</span><br><span class=\"line\">(</span><br><span class=\"line\">      @PartitionDate <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , @OverwriteData <span class=\"built_in\">BIT</span> = <span class=\"number\">1</span> <span class=\"comment\">-- 1 = Get rid of previous data.. 0 = Thrown error if previous data found</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">          @PartitionNumber <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , @ErrorMessage <span class=\"keyword\">NVARCHAR</span>(<span class=\"number\">4000</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF @OverwriteData = 0 AND @PartitionNumber IS NOT NULL</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Partition for this date already exists.  Please purge any data and remove the partition, or recall the proc with OverwriteData = 1'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">IF</span> @PartitionNumber <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">ALTER</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">FUNCTION</span> pfRunDates()</span><br><span class=\"line\">            <span class=\"keyword\">SPLIT</span> <span class=\"keyword\">RANGE</span> (@PartitionDate);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">ALTER</span> <span class=\"keyword\">PARTITION</span> SCHEME psRunDates</span><br><span class=\"line\">            <span class=\"keyword\">NEXT</span> USED [PRIMARY];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">        <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchOUT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> dbo.MainTable <span class=\"keyword\">SWITCH</span> <span class=\"keyword\">PARTITION</span> @PartitionNumber <span class=\"keyword\">TO</span> Staging.MainTable__SwitchOUT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> dbo.sp_LoadMainTable</span><br><span class=\"line\">(</span><br><span class=\"line\">      @PartitionDate <span class=\"built_in\">DATE</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">          @PartitionNumber <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , @ErrorMessage <span class=\"keyword\">NVARCHAR</span>(<span class=\"number\">4000</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF EXISTS ( <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> dbo.MainTable <span class=\"keyword\">WHERE</span> RunDate = @PartitionDate)</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Data has already been loaded for the date.  Pplease purge it first'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> @PartitionNumber = PartitionNumber</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TableName = <span class=\"string\">'MainTable'</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> RangeValue = @PartitionDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF @PartitionNumber IS NULL</span><br><span class=\"line\">    <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">        <span class=\"keyword\">SET</span> @ErrorMessage = <span class=\"string\">'Partition has not been created.  Run the proc \"dbo.sp_PrepareMainTablePartitions\" first'</span>;</span><br><span class=\"line\">        RAISERROR(@ErrorMessage,16,1);</span><br><span class=\"line\">        RETURN;</span><br><span class=\"line\">    <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Staging.MainTable__SwitchIn <span class=\"keyword\">SWITCH</span> <span class=\"keyword\">PARTITION</span> @PartitionNumber</span><br><span class=\"line\">        <span class=\"keyword\">TO</span> dbo.MainTable <span class=\"keyword\">PARTITION</span> @PartitionNumber;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">EXEC dbo.sp_PrepareMainTablePartitions <span class=\"string\">'2019-01-02'</span>,<span class=\"number\">1</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dbo.MainTable</span><br><span class=\"line\">(<span class=\"keyword\">ID</span>, UserName, RunDate)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"number\">1</span>,<span class=\"string\">'Bob'</span>,<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">2</span>, <span class=\"string\">'Jane'</span>,<span class=\"string\">'2019-01-01'</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Staging.MainTable__SwitchIN</span><br><span class=\"line\">( <span class=\"keyword\">ID</span>, UserName, RunDate)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"number\">3</span>,<span class=\"string\">'Vicky'</span>,<span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">4</span>, <span class=\"string\">'Eric'</span>,<span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">    , (<span class=\"number\">5</span>, <span class=\"string\">'Scott'</span>, <span class=\"string\">'2019-01-02'</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">EXEC dbo.sp_LoadMainTable '2019-01-02' ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> MetaData.vw_PartitionDetails ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dbo.MainTable ;</span><br></pre></td></tr></table></figure>\n"},{"title":"Left function with Charindex","date":"2020-02-11T00:00:00.000Z","_content":"\nLet's suppose you have a basic hierarchy represented in a string. e.g.\n\n**Top|Middle|Bottom**\n\nYou are only interested in retrieving the first part of the string/hierarchy, you could use the following functions:\n\n- CHARINDEX - Find the position of a character\n- LEFT return 'n' numbers of characters of the left hand side of a string\n\nHere is some sample code to show how this would work:\n\n```sql\nDECLARE @string VARCHAR(200);\n\n--Example 1 -- String with two pipes\nSET @string = 'Top|Middle|Bottom*';\nSELECT LEFT(@string,CHARINDEX('|', @string + '|')-1)\n\n--RETURNS : Top\n\n--Example 2-- String with no pipes\nSET @string = 'TopMiddleBottom*';\nSELECT LEFT(@string,CHARINDEX('|', @string + '|')-1)\n\n--RETURNS : TopMiddleBottom  -- As there are no pipes\n```\n\nWe are looking for the first occurrence of '|' and then use the left function to pull everything before that character.\n\n_We have added a '|' to the end of the string, in case there is no '|'. This will stop an error on the LEFT function trying to read to -1 places._\n","source":"_posts/sql-server/left-charindex.md","raw":"---\ntitle: \"Left function with Charindex\"\ndate: \"2020-02-11\"\ntags: [SQL]\ncategories: [SQL Server]\n---\n\nLet's suppose you have a basic hierarchy represented in a string. e.g.\n\n**Top|Middle|Bottom**\n\nYou are only interested in retrieving the first part of the string/hierarchy, you could use the following functions:\n\n- CHARINDEX - Find the position of a character\n- LEFT return 'n' numbers of characters of the left hand side of a string\n\nHere is some sample code to show how this would work:\n\n```sql\nDECLARE @string VARCHAR(200);\n\n--Example 1 -- String with two pipes\nSET @string = 'Top|Middle|Bottom*';\nSELECT LEFT(@string,CHARINDEX('|', @string + '|')-1)\n\n--RETURNS : Top\n\n--Example 2-- String with no pipes\nSET @string = 'TopMiddleBottom*';\nSELECT LEFT(@string,CHARINDEX('|', @string + '|')-1)\n\n--RETURNS : TopMiddleBottom  -- As there are no pipes\n```\n\nWe are looking for the first occurrence of '|' and then use the left function to pull everything before that character.\n\n_We have added a '|' to the end of the string, in case there is no '|'. This will stop an error on the LEFT function trying to read to -1 places._\n","slug":"sql-server/left-charindex","published":1,"updated":"2020-03-09T23:10:20.319Z","_id":"ck7l1ww6i00091hrr8cjo35qt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Let’s suppose you have a basic hierarchy represented in a string. e.g.</p>\n<p><strong>Top|Middle|Bottom</strong></p>\n<p>You are only interested in retrieving the first part of the string/hierarchy, you could use the following functions:</p>\n<ul>\n<li>CHARINDEX - Find the position of a character</li>\n<li>LEFT return ‘n’ numbers of characters of the left hand side of a string</li>\n</ul>\n<p>Here is some sample code to show how this would work:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> @<span class=\"keyword\">string</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Example 1 -- String with two pipes</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @<span class=\"keyword\">string</span> = <span class=\"string\">'Top|Middle|Bottom*'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LEFT</span>(@<span class=\"keyword\">string</span>,<span class=\"keyword\">CHARINDEX</span>(<span class=\"string\">'|'</span>, @<span class=\"keyword\">string</span> + <span class=\"string\">'|'</span>)<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--RETURNS : Top</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Example 2-- String with no pipes</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @<span class=\"keyword\">string</span> = <span class=\"string\">'TopMiddleBottom*'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LEFT</span>(@<span class=\"keyword\">string</span>,<span class=\"keyword\">CHARINDEX</span>(<span class=\"string\">'|'</span>, @<span class=\"keyword\">string</span> + <span class=\"string\">'|'</span>)<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--RETURNS : TopMiddleBottom  -- As there are no pipes</span></span><br></pre></td></tr></table></figure>\n\n<p>We are looking for the first occurrence of ‘|’ and then use the left function to pull everything before that character.</p>\n<p><em>We have added a ‘|’ to the end of the string, in case there is no ‘|’. This will stop an error on the LEFT function trying to read to -1 places.</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Let’s suppose you have a basic hierarchy represented in a string. e.g.</p>\n<p><strong>Top|Middle|Bottom</strong></p>\n<p>You are only interested in retrieving the first part of the string/hierarchy, you could use the following functions:</p>\n<ul>\n<li>CHARINDEX - Find the position of a character</li>\n<li>LEFT return ‘n’ numbers of characters of the left hand side of a string</li>\n</ul>\n<p>Here is some sample code to show how this would work:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> @<span class=\"keyword\">string</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Example 1 -- String with two pipes</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @<span class=\"keyword\">string</span> = <span class=\"string\">'Top|Middle|Bottom*'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LEFT</span>(@<span class=\"keyword\">string</span>,<span class=\"keyword\">CHARINDEX</span>(<span class=\"string\">'|'</span>, @<span class=\"keyword\">string</span> + <span class=\"string\">'|'</span>)<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--RETURNS : Top</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Example 2-- String with no pipes</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @<span class=\"keyword\">string</span> = <span class=\"string\">'TopMiddleBottom*'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">LEFT</span>(@<span class=\"keyword\">string</span>,<span class=\"keyword\">CHARINDEX</span>(<span class=\"string\">'|'</span>, @<span class=\"keyword\">string</span> + <span class=\"string\">'|'</span>)<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--RETURNS : TopMiddleBottom  -- As there are no pipes</span></span><br></pre></td></tr></table></figure>\n\n<p>We are looking for the first occurrence of ‘|’ and then use the left function to pull everything before that character.</p>\n<p><em>We have added a ‘|’ to the end of the string, in case there is no ‘|’. This will stop an error on the LEFT function trying to read to -1 places.</em></p>\n"},{"title":"Slowly Changing Dimension Type 4","date":"2020-02-29T00:00:00.000Z","_content":"\n# Understanding\n\nFor this type of dimension the version history is tracked in a separate table. e.g.\n\nMain Table:\n\n| ID  | Version | Name        | Salary | H / W / A | Valid From |\n| --- | ------- | ----------- | ------ | --------- | ---------- |\n| 1   | 1       | Joe Bloggs  | 11,500 | A         | 2018-10-30 |\n| 2   | 4       | Jane Bloggs | 15,000 | A         | 2018-07-12 |\n\nHistory Table:\n\n| ID  | Version | Name        | Salary | H / W / A | Valid From | Valid To   |\n| --- | ------- | ----------- | ------ | --------- | ---------- | ---------- |\n| 2   | 1       | Jane Bloggs | 6.50   | H         | 2012-03-27 | 2013-05-22 |\n| 2   | 2       | Jane Bloggs | 12,000 | A         | 2013-05-22 | 2017-07-12 |\n| 2   | 3       | Jane Bloggs | 13,500 | A         | 2017-07-12 | 2018-07-12 |\n\nYou can see that Joe Bloggs' salary has remained unchanged and has no records in the history table. However, Jane's salary has changed three times and the three old records are in the history table.\n\nThis can allow for minimal logging or even \"as at\" reporting. For example, if the fact table holds the \"ID\" and \"Version\". The ID can be used as a foreign key to the main to give an \"as is\" result, or the \"ID\" and \"Version\" can be used as a foreign key to changed history table to give the \"as at\" result. **Note** that when a fact is first inserted it will acquire the current version of the dim.\n\n# Working Example\n\nWith this understanding, here is how I go about populating and maintaining the two tables associated. For the example this following will happen\n\n1. Stage records that contain Marvel Super Heros (Name, Real First Name, Real Surname)\n2. Record Hero's Name, First Name and Surname into a warehouse table\n3. Maintain history of changes that could be referenced\n\n**Create all of the tables and schemaa**\n\n```sql\nCREATE Schema Staging;\nGO\n\nCREATE Schema Warehouse;\nGO\n\nCREATE TABLE Staging.MarvelHero\n(\n      Name           VARCHAR(200) -- Considered Unique\n    , RealFirstName  VARCHAR(100)\n    , RealSurname    VARCHAR(100)\n);\n\nCREATE TABLE Warehouse.dim_MarvelHero\n(\n      ID         INT IDENTITY(1,1)\n    , [Version]  INT\n    , HeroName   VARCHAR(200)\n    , FirstName  VARCHAR(100)\n    , Surname    VARCHAR(100)\n    , ValidFrom  DATE\n    , ValidTo    DATE\n    , isDeleted  BIT DEFAULT(0)\n)\n;\n\nCREATE TABLE Warehouse.dim_MarvelHero__history\n(\n      ID         INT\n    , [Version]  INT\n    , HeroName   VARCHAR(200)\n    , FirstName  VARCHAR(100)\n    , Surname    VARCHAR(100)\n    , ValidFrom  DATE\n    , ValidTo    DATE\n    , isDeleted  BIT\n)\n;\n```\n\n- Staging.MarvelHero : Holds that entire dataset of the external dimension coming in\n- Warehouse.dim_MarvelHero : Main dimension table with the warehouse. Additional Columns:\n  - ID : Primary Key;\n  - Version : Each time there is a change this will be incremented by one;\n  - ValidFrom : A date to represent when this version became valid\n  - ValidTo : If the record is soft deleted this will record the deleted date\n  - isDeleted : Records if the record is soft deleted\n- Warehouse.dim_MarvelHero\\_\\_history : As above but storing all version and not just the current one\n\nLoad up the staging table:\n\n```sql\nINSERT INTO Staging.MarvelHero\nVALUES\n      ('Iron Man', 'Tony', 'Stark')\n    , ('Spider Man', 'Petr', 'Parker') -- Typo\n    , ('Hulk', 'Bruce', 'Banner')\n    , ('Black Widow', 'Natasha', 'Romanova')\n;\n```\n\nI've created a typo as an example of a correction that will result in two versions by the end.\n\nNow for the stored procedure that will handle populating the dimensional tables for staging whilst obeying the conditions of a type 4 dimension mentioned at the start.\n\n```sql\nCREATE PROCEDURE Warehouse.usp_Populate_dim_MarvelHero\nAS\nBEGIN\n\n    -- Drop Temp table if it exists\n    IF OBJECT_ID('tempdb..#heros') IS NOT NULL\n        DROP TABLE #heros\n    ;\n\n    -- Table to store Source and target where applicable and matched\n    CREATE TABLE #heros\n    (\n          TargetID    INT -- ID that is in the warehouse\n        , SoftDelete  BIT DEFAULT(0)\n\n        -- Columns to match source\n        , source_Name           VARCHAR(200)\n        , source_RealFirstName  VARCHAR(100)\n        , source_RealSurname    VARCHAR(100)\n\n        -- Columns to match target\n        , currentTarget_Version    INT\n        , currentTarget_HeroName   VARCHAR(200)\n        , currentTarget_FirstName  VARCHAR(100)\n        , currentTarget_Surname    VARCHAR(100)\n        , currentTarget_ValidFrom  DATE\n        , currentTarget_ValidTo    DATE\n        , currentTarget_isDeleted  BIT\n    );\n\n    --INSERT MATCHES THAT DIFFER INTO TEMP TABLE\n    INSERT INTO #heros\n    (\n          TargetID\n\n        , source_Name\n        , source_RealFirstName\n        , source_RealSurname\n\n        -- Columns to match target\n        , currentTarget_Version\n        , currentTarget_HeroName\n        , currentTarget_FirstName\n        , currentTarget_Surname\n        , currentTarget_ValidFrom\n        , currentTarget_ValidTo\n        , currentTarget_isDeleted\n    )\n    SELECT\n          t.ID\n        , s.Name\n        , s.RealFirstName\n        , s.RealSurname\n        , t.Version\n        , t.HeroName\n        , t.FirstName\n        , t.Surname\n        , t.ValidFrom\n        , t.ValidTo\n        , t.isDeleted\n    FROM Staging.MarvelHero                 s\n        INNER JOIN Warehouse.dim_MarvelHero t   ON  t.HeroName = s.Name\n    WHERE\n    (\n           ISNULL(s.RealFirstName, '###')  !=  ISNULL(t.FirstName, '###')\n        OR ISNULL(s.RealSurname  , '###')  !=  ISNULL(t.Surname  , '###')\n        OR t.IsDeleted = 1 -- If this matches then the entry has been reinstated\n    );\n\n\n    --INSERT NEW ROWS INTO THE TEMP TABLE\n    INSERT INTO #heros\n    (\n          source_Name\n        , source_RealFirstName\n        , source_RealSurname\n    )\n    SELECT\n          s.Name\n        , s.RealFirstName\n        , s.RealSurname\n    FROM Staging.MarvelHero                s\n        LEFT JOIN Warehouse.dim_MarvelHero t   ON  t.HeroName = s.Name\n    WHERE t.ID IS NULL -- Not Matched in Target\n    ;\n\n\n    --INSERT SOFT DELETED ROWS INTO THE TEMP TABLE .. i.e. rows that are no longer present in source\n    INSERT INTO #heros\n    (\n          TargetID\n        , SoftDelete\n        , currentTarget_HeroName\n        , currentTarget_FirstName\n        , currentTarget_Surname\n    )\n    SELECT\n          t.ID\n        , 1 -- Mark to soft delete\n        , t.HeroName\n        , t.FirstName\n        , t.Surname\n    FROM Staging.MarvelHero                 s\n        RIGHT JOIN Warehouse.dim_MarvelHero t   ON  t.HeroName = s.Name\n    WHERE s.[Name] IS NULL -- Not Matched in Source\n    ;\n\n    /* At this stage of the code we now know the state of all rows\n\n       Unchanged\n       Changed\n       New\n       Deleted (Soft Deleted)\n\n       Now we can merge into the main table\n       and version control into the history table\n    */\n\n    MERGE Warehouse.dim_MarvelHero   t\n        USING #heros                 s   ON (s.TargetID = t.ID)\n    WHEN MATCHED THEN\n    UPDATE SET\n          t.Version    = CASE WHEN SoftDelete = 0 THEN currentTarget_Version + 1 ELSE t.Version END -- Increment Version\n        , t.ValidFrom  = CASE WHEN SoftDelete = 0 THEN CAST(GETDATE() AS DATE) ELSE t.ValidFrom END-- Set Todays date for new version\n        , t.FirstName  = CASE WHEN SoftDelete = 0 THEN s.source_RealFirstName ELSE t.FirstName END\n        , t.Surname    = CASE WHEN SoftDelete = 0 THEN s.source_RealSurname ELSE t.Surname END\n\n        , t.ValidTo    = CASE WHEN SoftDelete = 1 THEN CAST(GETDATE() AS DATE) ELSE NULL END\n        , t.isDeleted  = s.SoftDelete\n\n    WHEN NOT MATCHED BY TARGET THEN -- T.ID IS NULL, THEREFORE IT IS NEW\n    INSERT\n    (\n          HeroName\n        , FirstName\n        , Surname\n        , [Version]\n        , ValidFrom\n    )\n    VALUES\n    (\n          s.source_Name\n        , s.source_RealFirstName\n        , s.source_RealSurname\n        , 1 -- New row, so 1st version\n        , CAST(GETDATE() AS DATE) -- Valid from today\n    )\n    ;\n\n\n    --Merge done, now to handle history\n\n    INSERT INTO Warehouse.dim_MarvelHero__history\n    (\n          ID\n        , [Version]\n        , HeroName\n        , FirstName\n        , Surname\n        , ValidFrom\n        , ValidTo\n        , isDeleted\n    )\n    SELECT\n          TargetID\n        , currentTarget_Version\n        , currentTarget_HeroName\n        , currentTarget_FirstName\n        , currentTarget_Surname\n        , currentTarget_ValidFrom\n        , CAST(GETDATE() AS DATE)\n        , currentTarget_isDeleted\n    FROM #heros\n    WHERE TargetID IS NOT NULL -- Insert changes only (not soft deletes or new entries)\n    AND SoftDelete = 0\n    ;\n\nEND;\n\nGO\n```\n\nI have commented the code, but will go into some detail about each block:\n\n1. A temp table is created called #heros. It will be used to store all the relevant details of the staging records coming in and any details about the current record in the dimension, should it match.\n2. The first insert into the #hero table will be for records that match but that have changed. The unique column in staging and the dim is \"Name\"/\"HeroName\". Therefore staging is joined to the dim based on this column and if either of the columns: FirstName or Surname have changed then a change must have occurred. Also note that if a match occurs to the dim, but the dim had previously been marked as deleted then a change is also written as it will need to be reinstated.\n3. The second insert, inserts rows that are only in staging. These are new rows that have never been seen before\n4. The final insert, inserts rows that no longer exist in the staging table. These are rows that will need to be soft deleted.\n5. The temp table is then used to merge into the dim. The ID of the dim is used to determine the type of match. If the ID matches then we know that this dim exists in \"some\" state. Therefore if it matches that values will be updated accordingly or it will be soft deleted. If it doesn't match, then it's consider new and inserted\n6. Finally any updates (other than soft deletes) are inserted into the history table. Note that if a soft delete is reinstated, then the record of the soft delete will be stored into the history table\n\nSome testing:\n\n```sql\nEXEC Warehouse.usp_Populate_dim_MarvelHero;\n\nUPDATE Staging.MarvelHero\nSET RealFirstName = 'Peter'\nWHERE RealFirstName = 'Petr';\n\nEXEC Warehouse.usp_Populate_dim_MarvelHero;\n\ndelete top(1) from Staging.MarvelHero;\n\nEXEC Warehouse.usp_Populate_dim_MarvelHero;\n```\n\n1. Correct the typo and then run the proc\n2. Delete the first row and run the proc again\n\nResults:\n\n```sql\nSELECT * FROM Warehouse.dim_MarvelHero\nSELECT * FROM Warehouse.dim_MarvelHero__history\n```\n\nOutput:\n\n![Output](output.png)\n\nWe can now see that the old value for the typo is in the history table and that the first row in the main table is now marked has soft deleted.\n","source":"_posts/sql-server/SCD4.md","raw":"---\ntitle: \"Slowly Changing Dimension Type 4\"\ndate: \"2020-02-29\"\ntags: [SQL]\ncategories: [SQL Server]\n---\n\n# Understanding\n\nFor this type of dimension the version history is tracked in a separate table. e.g.\n\nMain Table:\n\n| ID  | Version | Name        | Salary | H / W / A | Valid From |\n| --- | ------- | ----------- | ------ | --------- | ---------- |\n| 1   | 1       | Joe Bloggs  | 11,500 | A         | 2018-10-30 |\n| 2   | 4       | Jane Bloggs | 15,000 | A         | 2018-07-12 |\n\nHistory Table:\n\n| ID  | Version | Name        | Salary | H / W / A | Valid From | Valid To   |\n| --- | ------- | ----------- | ------ | --------- | ---------- | ---------- |\n| 2   | 1       | Jane Bloggs | 6.50   | H         | 2012-03-27 | 2013-05-22 |\n| 2   | 2       | Jane Bloggs | 12,000 | A         | 2013-05-22 | 2017-07-12 |\n| 2   | 3       | Jane Bloggs | 13,500 | A         | 2017-07-12 | 2018-07-12 |\n\nYou can see that Joe Bloggs' salary has remained unchanged and has no records in the history table. However, Jane's salary has changed three times and the three old records are in the history table.\n\nThis can allow for minimal logging or even \"as at\" reporting. For example, if the fact table holds the \"ID\" and \"Version\". The ID can be used as a foreign key to the main to give an \"as is\" result, or the \"ID\" and \"Version\" can be used as a foreign key to changed history table to give the \"as at\" result. **Note** that when a fact is first inserted it will acquire the current version of the dim.\n\n# Working Example\n\nWith this understanding, here is how I go about populating and maintaining the two tables associated. For the example this following will happen\n\n1. Stage records that contain Marvel Super Heros (Name, Real First Name, Real Surname)\n2. Record Hero's Name, First Name and Surname into a warehouse table\n3. Maintain history of changes that could be referenced\n\n**Create all of the tables and schemaa**\n\n```sql\nCREATE Schema Staging;\nGO\n\nCREATE Schema Warehouse;\nGO\n\nCREATE TABLE Staging.MarvelHero\n(\n      Name           VARCHAR(200) -- Considered Unique\n    , RealFirstName  VARCHAR(100)\n    , RealSurname    VARCHAR(100)\n);\n\nCREATE TABLE Warehouse.dim_MarvelHero\n(\n      ID         INT IDENTITY(1,1)\n    , [Version]  INT\n    , HeroName   VARCHAR(200)\n    , FirstName  VARCHAR(100)\n    , Surname    VARCHAR(100)\n    , ValidFrom  DATE\n    , ValidTo    DATE\n    , isDeleted  BIT DEFAULT(0)\n)\n;\n\nCREATE TABLE Warehouse.dim_MarvelHero__history\n(\n      ID         INT\n    , [Version]  INT\n    , HeroName   VARCHAR(200)\n    , FirstName  VARCHAR(100)\n    , Surname    VARCHAR(100)\n    , ValidFrom  DATE\n    , ValidTo    DATE\n    , isDeleted  BIT\n)\n;\n```\n\n- Staging.MarvelHero : Holds that entire dataset of the external dimension coming in\n- Warehouse.dim_MarvelHero : Main dimension table with the warehouse. Additional Columns:\n  - ID : Primary Key;\n  - Version : Each time there is a change this will be incremented by one;\n  - ValidFrom : A date to represent when this version became valid\n  - ValidTo : If the record is soft deleted this will record the deleted date\n  - isDeleted : Records if the record is soft deleted\n- Warehouse.dim_MarvelHero\\_\\_history : As above but storing all version and not just the current one\n\nLoad up the staging table:\n\n```sql\nINSERT INTO Staging.MarvelHero\nVALUES\n      ('Iron Man', 'Tony', 'Stark')\n    , ('Spider Man', 'Petr', 'Parker') -- Typo\n    , ('Hulk', 'Bruce', 'Banner')\n    , ('Black Widow', 'Natasha', 'Romanova')\n;\n```\n\nI've created a typo as an example of a correction that will result in two versions by the end.\n\nNow for the stored procedure that will handle populating the dimensional tables for staging whilst obeying the conditions of a type 4 dimension mentioned at the start.\n\n```sql\nCREATE PROCEDURE Warehouse.usp_Populate_dim_MarvelHero\nAS\nBEGIN\n\n    -- Drop Temp table if it exists\n    IF OBJECT_ID('tempdb..#heros') IS NOT NULL\n        DROP TABLE #heros\n    ;\n\n    -- Table to store Source and target where applicable and matched\n    CREATE TABLE #heros\n    (\n          TargetID    INT -- ID that is in the warehouse\n        , SoftDelete  BIT DEFAULT(0)\n\n        -- Columns to match source\n        , source_Name           VARCHAR(200)\n        , source_RealFirstName  VARCHAR(100)\n        , source_RealSurname    VARCHAR(100)\n\n        -- Columns to match target\n        , currentTarget_Version    INT\n        , currentTarget_HeroName   VARCHAR(200)\n        , currentTarget_FirstName  VARCHAR(100)\n        , currentTarget_Surname    VARCHAR(100)\n        , currentTarget_ValidFrom  DATE\n        , currentTarget_ValidTo    DATE\n        , currentTarget_isDeleted  BIT\n    );\n\n    --INSERT MATCHES THAT DIFFER INTO TEMP TABLE\n    INSERT INTO #heros\n    (\n          TargetID\n\n        , source_Name\n        , source_RealFirstName\n        , source_RealSurname\n\n        -- Columns to match target\n        , currentTarget_Version\n        , currentTarget_HeroName\n        , currentTarget_FirstName\n        , currentTarget_Surname\n        , currentTarget_ValidFrom\n        , currentTarget_ValidTo\n        , currentTarget_isDeleted\n    )\n    SELECT\n          t.ID\n        , s.Name\n        , s.RealFirstName\n        , s.RealSurname\n        , t.Version\n        , t.HeroName\n        , t.FirstName\n        , t.Surname\n        , t.ValidFrom\n        , t.ValidTo\n        , t.isDeleted\n    FROM Staging.MarvelHero                 s\n        INNER JOIN Warehouse.dim_MarvelHero t   ON  t.HeroName = s.Name\n    WHERE\n    (\n           ISNULL(s.RealFirstName, '###')  !=  ISNULL(t.FirstName, '###')\n        OR ISNULL(s.RealSurname  , '###')  !=  ISNULL(t.Surname  , '###')\n        OR t.IsDeleted = 1 -- If this matches then the entry has been reinstated\n    );\n\n\n    --INSERT NEW ROWS INTO THE TEMP TABLE\n    INSERT INTO #heros\n    (\n          source_Name\n        , source_RealFirstName\n        , source_RealSurname\n    )\n    SELECT\n          s.Name\n        , s.RealFirstName\n        , s.RealSurname\n    FROM Staging.MarvelHero                s\n        LEFT JOIN Warehouse.dim_MarvelHero t   ON  t.HeroName = s.Name\n    WHERE t.ID IS NULL -- Not Matched in Target\n    ;\n\n\n    --INSERT SOFT DELETED ROWS INTO THE TEMP TABLE .. i.e. rows that are no longer present in source\n    INSERT INTO #heros\n    (\n          TargetID\n        , SoftDelete\n        , currentTarget_HeroName\n        , currentTarget_FirstName\n        , currentTarget_Surname\n    )\n    SELECT\n          t.ID\n        , 1 -- Mark to soft delete\n        , t.HeroName\n        , t.FirstName\n        , t.Surname\n    FROM Staging.MarvelHero                 s\n        RIGHT JOIN Warehouse.dim_MarvelHero t   ON  t.HeroName = s.Name\n    WHERE s.[Name] IS NULL -- Not Matched in Source\n    ;\n\n    /* At this stage of the code we now know the state of all rows\n\n       Unchanged\n       Changed\n       New\n       Deleted (Soft Deleted)\n\n       Now we can merge into the main table\n       and version control into the history table\n    */\n\n    MERGE Warehouse.dim_MarvelHero   t\n        USING #heros                 s   ON (s.TargetID = t.ID)\n    WHEN MATCHED THEN\n    UPDATE SET\n          t.Version    = CASE WHEN SoftDelete = 0 THEN currentTarget_Version + 1 ELSE t.Version END -- Increment Version\n        , t.ValidFrom  = CASE WHEN SoftDelete = 0 THEN CAST(GETDATE() AS DATE) ELSE t.ValidFrom END-- Set Todays date for new version\n        , t.FirstName  = CASE WHEN SoftDelete = 0 THEN s.source_RealFirstName ELSE t.FirstName END\n        , t.Surname    = CASE WHEN SoftDelete = 0 THEN s.source_RealSurname ELSE t.Surname END\n\n        , t.ValidTo    = CASE WHEN SoftDelete = 1 THEN CAST(GETDATE() AS DATE) ELSE NULL END\n        , t.isDeleted  = s.SoftDelete\n\n    WHEN NOT MATCHED BY TARGET THEN -- T.ID IS NULL, THEREFORE IT IS NEW\n    INSERT\n    (\n          HeroName\n        , FirstName\n        , Surname\n        , [Version]\n        , ValidFrom\n    )\n    VALUES\n    (\n          s.source_Name\n        , s.source_RealFirstName\n        , s.source_RealSurname\n        , 1 -- New row, so 1st version\n        , CAST(GETDATE() AS DATE) -- Valid from today\n    )\n    ;\n\n\n    --Merge done, now to handle history\n\n    INSERT INTO Warehouse.dim_MarvelHero__history\n    (\n          ID\n        , [Version]\n        , HeroName\n        , FirstName\n        , Surname\n        , ValidFrom\n        , ValidTo\n        , isDeleted\n    )\n    SELECT\n          TargetID\n        , currentTarget_Version\n        , currentTarget_HeroName\n        , currentTarget_FirstName\n        , currentTarget_Surname\n        , currentTarget_ValidFrom\n        , CAST(GETDATE() AS DATE)\n        , currentTarget_isDeleted\n    FROM #heros\n    WHERE TargetID IS NOT NULL -- Insert changes only (not soft deletes or new entries)\n    AND SoftDelete = 0\n    ;\n\nEND;\n\nGO\n```\n\nI have commented the code, but will go into some detail about each block:\n\n1. A temp table is created called #heros. It will be used to store all the relevant details of the staging records coming in and any details about the current record in the dimension, should it match.\n2. The first insert into the #hero table will be for records that match but that have changed. The unique column in staging and the dim is \"Name\"/\"HeroName\". Therefore staging is joined to the dim based on this column and if either of the columns: FirstName or Surname have changed then a change must have occurred. Also note that if a match occurs to the dim, but the dim had previously been marked as deleted then a change is also written as it will need to be reinstated.\n3. The second insert, inserts rows that are only in staging. These are new rows that have never been seen before\n4. The final insert, inserts rows that no longer exist in the staging table. These are rows that will need to be soft deleted.\n5. The temp table is then used to merge into the dim. The ID of the dim is used to determine the type of match. If the ID matches then we know that this dim exists in \"some\" state. Therefore if it matches that values will be updated accordingly or it will be soft deleted. If it doesn't match, then it's consider new and inserted\n6. Finally any updates (other than soft deletes) are inserted into the history table. Note that if a soft delete is reinstated, then the record of the soft delete will be stored into the history table\n\nSome testing:\n\n```sql\nEXEC Warehouse.usp_Populate_dim_MarvelHero;\n\nUPDATE Staging.MarvelHero\nSET RealFirstName = 'Peter'\nWHERE RealFirstName = 'Petr';\n\nEXEC Warehouse.usp_Populate_dim_MarvelHero;\n\ndelete top(1) from Staging.MarvelHero;\n\nEXEC Warehouse.usp_Populate_dim_MarvelHero;\n```\n\n1. Correct the typo and then run the proc\n2. Delete the first row and run the proc again\n\nResults:\n\n```sql\nSELECT * FROM Warehouse.dim_MarvelHero\nSELECT * FROM Warehouse.dim_MarvelHero__history\n```\n\nOutput:\n\n![Output](output.png)\n\nWe can now see that the old value for the typo is in the history table and that the first row in the main table is now marked has soft deleted.\n","slug":"sql-server/SCD4","published":1,"updated":"2020-03-09T22:42:42.156Z","_id":"ck7l1ww6j000a1hrreujq42lx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Understanding\"><a href=\"#Understanding\" class=\"headerlink\" title=\"Understanding\"></a>Understanding</h1><p>For this type of dimension the version history is tracked in a separate table. e.g.</p>\n<p>Main Table:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Version</th>\n<th>Name</th>\n<th>Salary</th>\n<th>H / W / A</th>\n<th>Valid From</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n<td>Joe Bloggs</td>\n<td>11,500</td>\n<td>A</td>\n<td>2018-10-30</td>\n</tr>\n<tr>\n<td>2</td>\n<td>4</td>\n<td>Jane Bloggs</td>\n<td>15,000</td>\n<td>A</td>\n<td>2018-07-12</td>\n</tr>\n</tbody></table>\n<p>History Table:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Version</th>\n<th>Name</th>\n<th>Salary</th>\n<th>H / W / A</th>\n<th>Valid From</th>\n<th>Valid To</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>1</td>\n<td>Jane Bloggs</td>\n<td>6.50</td>\n<td>H</td>\n<td>2012-03-27</td>\n<td>2013-05-22</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>Jane Bloggs</td>\n<td>12,000</td>\n<td>A</td>\n<td>2013-05-22</td>\n<td>2017-07-12</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>Jane Bloggs</td>\n<td>13,500</td>\n<td>A</td>\n<td>2017-07-12</td>\n<td>2018-07-12</td>\n</tr>\n</tbody></table>\n<p>You can see that Joe Bloggs’ salary has remained unchanged and has no records in the history table. However, Jane’s salary has changed three times and the three old records are in the history table.</p>\n<p>This can allow for minimal logging or even “as at” reporting. For example, if the fact table holds the “ID” and “Version”. The ID can be used as a foreign key to the main to give an “as is” result, or the “ID” and “Version” can be used as a foreign key to changed history table to give the “as at” result. <strong>Note</strong> that when a fact is first inserted it will acquire the current version of the dim.</p>\n<h1 id=\"Working-Example\"><a href=\"#Working-Example\" class=\"headerlink\" title=\"Working Example\"></a>Working Example</h1><p>With this understanding, here is how I go about populating and maintaining the two tables associated. For the example this following will happen</p>\n<ol>\n<li>Stage records that contain Marvel Super Heros (Name, Real First Name, Real Surname)</li>\n<li>Record Hero’s Name, First Name and Surname into a warehouse table</li>\n<li>Maintain history of changes that could be referenced</li>\n</ol>\n<p><strong>Create all of the tables and schemaa</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">Schema</span> Staging;</span><br><span class=\"line\">GO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">Schema</span> Warehouse;</span><br><span class=\"line\">GO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MarvelHero</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">Name</span>           <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>) <span class=\"comment\">-- Considered Unique</span></span><br><span class=\"line\">    , RealFirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RealSurname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Warehouse.dim_MarvelHero</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>         <span class=\"built_in\">INT</span> <span class=\"keyword\">IDENTITY</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    , [<span class=\"keyword\">Version</span>]  <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , HeroName   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">    , FirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , Surname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , ValidFrom  <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , ValidTo    <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , isDeleted  <span class=\"built_in\">BIT</span> <span class=\"keyword\">DEFAULT</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Warehouse.dim_MarvelHero__history</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>         <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , [<span class=\"keyword\">Version</span>]  <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , HeroName   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">    , FirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , Surname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , ValidFrom  <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , ValidTo    <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , isDeleted  <span class=\"built_in\">BIT</span></span><br><span class=\"line\">)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Staging.MarvelHero : Holds that entire dataset of the external dimension coming in</li>\n<li>Warehouse.dim_MarvelHero : Main dimension table with the warehouse. Additional Columns:<ul>\n<li>ID : Primary Key;</li>\n<li>Version : Each time there is a change this will be incremented by one;</li>\n<li>ValidFrom : A date to represent when this version became valid</li>\n<li>ValidTo : If the record is soft deleted this will record the deleted date</li>\n<li>isDeleted : Records if the record is soft deleted</li>\n</ul>\n</li>\n<li>Warehouse.dim_MarvelHero__history : As above but storing all version and not just the current one</li>\n</ul>\n<p>Load up the staging table:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Staging.MarvelHero</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"string\">'Iron Man'</span>, <span class=\"string\">'Tony'</span>, <span class=\"string\">'Stark'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Spider Man'</span>, <span class=\"string\">'Petr'</span>, <span class=\"string\">'Parker'</span>) <span class=\"comment\">-- Typo</span></span><br><span class=\"line\">    , (<span class=\"string\">'Hulk'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Banner'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Black Widow'</span>, <span class=\"string\">'Natasha'</span>, <span class=\"string\">'Romanova'</span>)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>I’ve created a typo as an example of a correction that will result in two versions by the end.</p>\n<p>Now for the stored procedure that will handle populating the dimensional tables for staging whilst obeying the conditions of a type 4 dimension mentioned at the start.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> Warehouse.usp_Populate_dim_MarvelHero</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- Drop Temp table if it exists</span></span><br><span class=\"line\">    <span class=\"keyword\">IF</span> OBJECT_ID(<span class=\"string\">'tempdb..#heros'</span>) <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">        <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- Table to store Source and target where applicable and matched</span></span><br><span class=\"line\">    <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          TargetID    <span class=\"built_in\">INT</span> <span class=\"comment\">-- ID that is in the warehouse</span></span><br><span class=\"line\">        , SoftDelete  <span class=\"built_in\">BIT</span> <span class=\"keyword\">DEFAULT</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- Columns to match source</span></span><br><span class=\"line\">        , source_Name           <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">        , source_RealFirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">        , source_RealSurname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- Columns to match target</span></span><br><span class=\"line\">        , currentTarget_Version    <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , currentTarget_HeroName   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">        , currentTarget_FirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">        , currentTarget_Surname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">        , currentTarget_ValidFrom  <span class=\"built_in\">DATE</span></span><br><span class=\"line\">        , currentTarget_ValidTo    <span class=\"built_in\">DATE</span></span><br><span class=\"line\">        , currentTarget_isDeleted  <span class=\"built_in\">BIT</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--INSERT MATCHES THAT DIFFER INTO TEMP TABLE</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          TargetID</span><br><span class=\"line\"></span><br><span class=\"line\">        , source_Name</span><br><span class=\"line\">        , source_RealFirstName</span><br><span class=\"line\">        , source_RealSurname</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- Columns to match target</span></span><br><span class=\"line\">        , currentTarget_Version</span><br><span class=\"line\">        , currentTarget_HeroName</span><br><span class=\"line\">        , currentTarget_FirstName</span><br><span class=\"line\">        , currentTarget_Surname</span><br><span class=\"line\">        , currentTarget_ValidFrom</span><br><span class=\"line\">        , currentTarget_ValidTo</span><br><span class=\"line\">        , currentTarget_isDeleted</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          t.ID</span><br><span class=\"line\">        , s.Name</span><br><span class=\"line\">        , s.RealFirstName</span><br><span class=\"line\">        , s.RealSurname</span><br><span class=\"line\">        , t.Version</span><br><span class=\"line\">        , t.HeroName</span><br><span class=\"line\">        , t.FirstName</span><br><span class=\"line\">        , t.Surname</span><br><span class=\"line\">        , t.ValidFrom</span><br><span class=\"line\">        , t.ValidTo</span><br><span class=\"line\">        , t.isDeleted</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Staging.MarvelHero                 s</span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Warehouse.dim_MarvelHero t   <span class=\"keyword\">ON</span>  t.HeroName = s.Name</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">           <span class=\"keyword\">ISNULL</span>(s.RealFirstName, <span class=\"string\">'###'</span>)  !=  <span class=\"keyword\">ISNULL</span>(t.FirstName, <span class=\"string\">'###'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">OR</span> <span class=\"keyword\">ISNULL</span>(s.RealSurname  , <span class=\"string\">'###'</span>)  !=  <span class=\"keyword\">ISNULL</span>(t.Surname  , <span class=\"string\">'###'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">OR</span> t.IsDeleted = <span class=\"number\">1</span> <span class=\"comment\">-- If this matches then the entry has been reinstated</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--INSERT NEW ROWS INTO THE TEMP TABLE</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          source_Name</span><br><span class=\"line\">        , source_RealFirstName</span><br><span class=\"line\">        , source_RealSurname</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          s.Name</span><br><span class=\"line\">        , s.RealFirstName</span><br><span class=\"line\">        , s.RealSurname</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Staging.MarvelHero                s</span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> Warehouse.dim_MarvelHero t   <span class=\"keyword\">ON</span>  t.HeroName = s.Name</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> t.ID <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"comment\">-- Not Matched in Target</span></span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--INSERT SOFT DELETED ROWS INTO THE TEMP TABLE .. i.e. rows that are no longer present in source</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          TargetID</span><br><span class=\"line\">        , SoftDelete</span><br><span class=\"line\">        , currentTarget_HeroName</span><br><span class=\"line\">        , currentTarget_FirstName</span><br><span class=\"line\">        , currentTarget_Surname</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          t.ID</span><br><span class=\"line\">        , <span class=\"number\">1</span> <span class=\"comment\">-- Mark to soft delete</span></span><br><span class=\"line\">        , t.HeroName</span><br><span class=\"line\">        , t.FirstName</span><br><span class=\"line\">        , t.Surname</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Staging.MarvelHero                 s</span><br><span class=\"line\">        <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> Warehouse.dim_MarvelHero t   <span class=\"keyword\">ON</span>  t.HeroName = s.Name</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> s.[<span class=\"keyword\">Name</span>] <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"comment\">-- Not Matched in Source</span></span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* At this stage of the code we now know the state of all rows</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">       Unchanged</span></span><br><span class=\"line\"><span class=\"comment\">       Changed</span></span><br><span class=\"line\"><span class=\"comment\">       New</span></span><br><span class=\"line\"><span class=\"comment\">       Deleted (Soft Deleted)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">       Now we can merge into the main table</span></span><br><span class=\"line\"><span class=\"comment\">       and version control into the history table</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">MERGE</span> Warehouse.dim_MarvelHero   t</span><br><span class=\"line\">        <span class=\"keyword\">USING</span> <span class=\"comment\">#heros                 s   ON (s.TargetID = t.ID)</span></span><br><span class=\"line\">    <span class=\"keyword\">WHEN</span> <span class=\"keyword\">MATCHED</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">SET</span></span><br><span class=\"line\">          t.Version    = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">0</span> <span class=\"keyword\">THEN</span> currentTarget_Version + <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> t.Version <span class=\"keyword\">END</span> <span class=\"comment\">-- Increment Version</span></span><br><span class=\"line\">        , t.ValidFrom  = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">0</span> <span class=\"keyword\">THEN</span> <span class=\"keyword\">CAST</span>(<span class=\"keyword\">GETDATE</span>() <span class=\"keyword\">AS</span> <span class=\"built_in\">DATE</span>) <span class=\"keyword\">ELSE</span> t.ValidFrom <span class=\"keyword\">END</span><span class=\"comment\">-- Set Todays date for new version</span></span><br><span class=\"line\">        , t.FirstName  = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">0</span> <span class=\"keyword\">THEN</span> s.source_RealFirstName <span class=\"keyword\">ELSE</span> t.FirstName <span class=\"keyword\">END</span></span><br><span class=\"line\">        , t.Surname    = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">0</span> <span class=\"keyword\">THEN</span> s.source_RealSurname <span class=\"keyword\">ELSE</span> t.Surname <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">        , t.ValidTo    = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> <span class=\"keyword\">CAST</span>(<span class=\"keyword\">GETDATE</span>() <span class=\"keyword\">AS</span> <span class=\"built_in\">DATE</span>) <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">        , t.isDeleted  = s.SoftDelete</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">MATCHED</span> <span class=\"keyword\">BY</span> TARGET <span class=\"keyword\">THEN</span> <span class=\"comment\">-- T.ID IS NULL, THEREFORE IT IS NEW</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          HeroName</span><br><span class=\"line\">        , FirstName</span><br><span class=\"line\">        , Surname</span><br><span class=\"line\">        , [<span class=\"keyword\">Version</span>]</span><br><span class=\"line\">        , ValidFrom</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          s.source_Name</span><br><span class=\"line\">        , s.source_RealFirstName</span><br><span class=\"line\">        , s.source_RealSurname</span><br><span class=\"line\">        , <span class=\"number\">1</span> <span class=\"comment\">-- New row, so 1st version</span></span><br><span class=\"line\">        , <span class=\"keyword\">CAST</span>(<span class=\"keyword\">GETDATE</span>() <span class=\"keyword\">AS</span> <span class=\"built_in\">DATE</span>) <span class=\"comment\">-- Valid from today</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--Merge done, now to handle history</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Warehouse.dim_MarvelHero__history</span><br><span class=\"line\">    (</span><br><span class=\"line\">          <span class=\"keyword\">ID</span></span><br><span class=\"line\">        , [<span class=\"keyword\">Version</span>]</span><br><span class=\"line\">        , HeroName</span><br><span class=\"line\">        , FirstName</span><br><span class=\"line\">        , Surname</span><br><span class=\"line\">        , ValidFrom</span><br><span class=\"line\">        , ValidTo</span><br><span class=\"line\">        , isDeleted</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          TargetID</span><br><span class=\"line\">        , currentTarget_Version</span><br><span class=\"line\">        , currentTarget_HeroName</span><br><span class=\"line\">        , currentTarget_FirstName</span><br><span class=\"line\">        , currentTarget_Surname</span><br><span class=\"line\">        , currentTarget_ValidFrom</span><br><span class=\"line\">        , <span class=\"keyword\">CAST</span>(<span class=\"keyword\">GETDATE</span>() <span class=\"keyword\">AS</span> <span class=\"built_in\">DATE</span>)</span><br><span class=\"line\">        , currentTarget_isDeleted</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TargetID <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"comment\">-- Insert changes only (not soft deletes or new entries)</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> SoftDelete = <span class=\"number\">0</span></span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">GO</span><br></pre></td></tr></table></figure>\n\n<p>I have commented the code, but will go into some detail about each block:</p>\n<ol>\n<li>A temp table is created called #heros. It will be used to store all the relevant details of the staging records coming in and any details about the current record in the dimension, should it match.</li>\n<li>The first insert into the #hero table will be for records that match but that have changed. The unique column in staging and the dim is “Name”/“HeroName”. Therefore staging is joined to the dim based on this column and if either of the columns: FirstName or Surname have changed then a change must have occurred. Also note that if a match occurs to the dim, but the dim had previously been marked as deleted then a change is also written as it will need to be reinstated.</li>\n<li>The second insert, inserts rows that are only in staging. These are new rows that have never been seen before</li>\n<li>The final insert, inserts rows that no longer exist in the staging table. These are rows that will need to be soft deleted.</li>\n<li>The temp table is then used to merge into the dim. The ID of the dim is used to determine the type of match. If the ID matches then we know that this dim exists in “some” state. Therefore if it matches that values will be updated accordingly or it will be soft deleted. If it doesn’t match, then it’s consider new and inserted</li>\n<li>Finally any updates (other than soft deletes) are inserted into the history table. Note that if a soft delete is reinstated, then the record of the soft delete will be stored into the history table</li>\n</ol>\n<p>Some testing:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXEC Warehouse.usp_Populate_dim_MarvelHero;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> Staging.MarvelHero</span><br><span class=\"line\"><span class=\"keyword\">SET</span> RealFirstName = <span class=\"string\">'Peter'</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> RealFirstName = <span class=\"string\">'Petr'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EXEC Warehouse.usp_Populate_dim_MarvelHero;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> top(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> Staging.MarvelHero;</span><br><span class=\"line\"></span><br><span class=\"line\">EXEC Warehouse.usp_Populate_dim_MarvelHero;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Correct the typo and then run the proc</li>\n<li>Delete the first row and run the proc again</li>\n</ol>\n<p>Results:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Warehouse.dim_MarvelHero</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Warehouse.dim_MarvelHero__history</span><br></pre></td></tr></table></figure>\n\n<p>Output:</p>\n<p><img src=\"output.png\" alt=\"Output\"></p>\n<p>We can now see that the old value for the typo is in the history table and that the first row in the main table is now marked has soft deleted.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Understanding\"><a href=\"#Understanding\" class=\"headerlink\" title=\"Understanding\"></a>Understanding</h1><p>For this type of dimension the version history is tracked in a separate table. e.g.</p>\n<p>Main Table:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Version</th>\n<th>Name</th>\n<th>Salary</th>\n<th>H / W / A</th>\n<th>Valid From</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n<td>Joe Bloggs</td>\n<td>11,500</td>\n<td>A</td>\n<td>2018-10-30</td>\n</tr>\n<tr>\n<td>2</td>\n<td>4</td>\n<td>Jane Bloggs</td>\n<td>15,000</td>\n<td>A</td>\n<td>2018-07-12</td>\n</tr>\n</tbody></table>\n<p>History Table:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Version</th>\n<th>Name</th>\n<th>Salary</th>\n<th>H / W / A</th>\n<th>Valid From</th>\n<th>Valid To</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>1</td>\n<td>Jane Bloggs</td>\n<td>6.50</td>\n<td>H</td>\n<td>2012-03-27</td>\n<td>2013-05-22</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>Jane Bloggs</td>\n<td>12,000</td>\n<td>A</td>\n<td>2013-05-22</td>\n<td>2017-07-12</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>Jane Bloggs</td>\n<td>13,500</td>\n<td>A</td>\n<td>2017-07-12</td>\n<td>2018-07-12</td>\n</tr>\n</tbody></table>\n<p>You can see that Joe Bloggs’ salary has remained unchanged and has no records in the history table. However, Jane’s salary has changed three times and the three old records are in the history table.</p>\n<p>This can allow for minimal logging or even “as at” reporting. For example, if the fact table holds the “ID” and “Version”. The ID can be used as a foreign key to the main to give an “as is” result, or the “ID” and “Version” can be used as a foreign key to changed history table to give the “as at” result. <strong>Note</strong> that when a fact is first inserted it will acquire the current version of the dim.</p>\n<h1 id=\"Working-Example\"><a href=\"#Working-Example\" class=\"headerlink\" title=\"Working Example\"></a>Working Example</h1><p>With this understanding, here is how I go about populating and maintaining the two tables associated. For the example this following will happen</p>\n<ol>\n<li>Stage records that contain Marvel Super Heros (Name, Real First Name, Real Surname)</li>\n<li>Record Hero’s Name, First Name and Surname into a warehouse table</li>\n<li>Maintain history of changes that could be referenced</li>\n</ol>\n<p><strong>Create all of the tables and schemaa</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">Schema</span> Staging;</span><br><span class=\"line\">GO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">Schema</span> Warehouse;</span><br><span class=\"line\">GO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Staging.MarvelHero</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">Name</span>           <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>) <span class=\"comment\">-- Considered Unique</span></span><br><span class=\"line\">    , RealFirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , RealSurname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Warehouse.dim_MarvelHero</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>         <span class=\"built_in\">INT</span> <span class=\"keyword\">IDENTITY</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    , [<span class=\"keyword\">Version</span>]  <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , HeroName   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">    , FirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , Surname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , ValidFrom  <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , ValidTo    <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , isDeleted  <span class=\"built_in\">BIT</span> <span class=\"keyword\">DEFAULT</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Warehouse.dim_MarvelHero__history</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"keyword\">ID</span>         <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , [<span class=\"keyword\">Version</span>]  <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , HeroName   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">    , FirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , Surname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">    , ValidFrom  <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , ValidTo    <span class=\"built_in\">DATE</span></span><br><span class=\"line\">    , isDeleted  <span class=\"built_in\">BIT</span></span><br><span class=\"line\">)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Staging.MarvelHero : Holds that entire dataset of the external dimension coming in</li>\n<li>Warehouse.dim_MarvelHero : Main dimension table with the warehouse. Additional Columns:<ul>\n<li>ID : Primary Key;</li>\n<li>Version : Each time there is a change this will be incremented by one;</li>\n<li>ValidFrom : A date to represent when this version became valid</li>\n<li>ValidTo : If the record is soft deleted this will record the deleted date</li>\n<li>isDeleted : Records if the record is soft deleted</li>\n</ul>\n</li>\n<li>Warehouse.dim_MarvelHero__history : As above but storing all version and not just the current one</li>\n</ul>\n<p>Load up the staging table:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Staging.MarvelHero</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">      (<span class=\"string\">'Iron Man'</span>, <span class=\"string\">'Tony'</span>, <span class=\"string\">'Stark'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Spider Man'</span>, <span class=\"string\">'Petr'</span>, <span class=\"string\">'Parker'</span>) <span class=\"comment\">-- Typo</span></span><br><span class=\"line\">    , (<span class=\"string\">'Hulk'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Banner'</span>)</span><br><span class=\"line\">    , (<span class=\"string\">'Black Widow'</span>, <span class=\"string\">'Natasha'</span>, <span class=\"string\">'Romanova'</span>)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>I’ve created a typo as an example of a correction that will result in two versions by the end.</p>\n<p>Now for the stored procedure that will handle populating the dimensional tables for staging whilst obeying the conditions of a type 4 dimension mentioned at the start.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> Warehouse.usp_Populate_dim_MarvelHero</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- Drop Temp table if it exists</span></span><br><span class=\"line\">    <span class=\"keyword\">IF</span> OBJECT_ID(<span class=\"string\">'tempdb..#heros'</span>) <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">        <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- Table to store Source and target where applicable and matched</span></span><br><span class=\"line\">    <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          TargetID    <span class=\"built_in\">INT</span> <span class=\"comment\">-- ID that is in the warehouse</span></span><br><span class=\"line\">        , SoftDelete  <span class=\"built_in\">BIT</span> <span class=\"keyword\">DEFAULT</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- Columns to match source</span></span><br><span class=\"line\">        , source_Name           <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">        , source_RealFirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">        , source_RealSurname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- Columns to match target</span></span><br><span class=\"line\">        , currentTarget_Version    <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , currentTarget_HeroName   <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">        , currentTarget_FirstName  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">        , currentTarget_Surname    <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">        , currentTarget_ValidFrom  <span class=\"built_in\">DATE</span></span><br><span class=\"line\">        , currentTarget_ValidTo    <span class=\"built_in\">DATE</span></span><br><span class=\"line\">        , currentTarget_isDeleted  <span class=\"built_in\">BIT</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--INSERT MATCHES THAT DIFFER INTO TEMP TABLE</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          TargetID</span><br><span class=\"line\"></span><br><span class=\"line\">        , source_Name</span><br><span class=\"line\">        , source_RealFirstName</span><br><span class=\"line\">        , source_RealSurname</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- Columns to match target</span></span><br><span class=\"line\">        , currentTarget_Version</span><br><span class=\"line\">        , currentTarget_HeroName</span><br><span class=\"line\">        , currentTarget_FirstName</span><br><span class=\"line\">        , currentTarget_Surname</span><br><span class=\"line\">        , currentTarget_ValidFrom</span><br><span class=\"line\">        , currentTarget_ValidTo</span><br><span class=\"line\">        , currentTarget_isDeleted</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          t.ID</span><br><span class=\"line\">        , s.Name</span><br><span class=\"line\">        , s.RealFirstName</span><br><span class=\"line\">        , s.RealSurname</span><br><span class=\"line\">        , t.Version</span><br><span class=\"line\">        , t.HeroName</span><br><span class=\"line\">        , t.FirstName</span><br><span class=\"line\">        , t.Surname</span><br><span class=\"line\">        , t.ValidFrom</span><br><span class=\"line\">        , t.ValidTo</span><br><span class=\"line\">        , t.isDeleted</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Staging.MarvelHero                 s</span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Warehouse.dim_MarvelHero t   <span class=\"keyword\">ON</span>  t.HeroName = s.Name</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">           <span class=\"keyword\">ISNULL</span>(s.RealFirstName, <span class=\"string\">'###'</span>)  !=  <span class=\"keyword\">ISNULL</span>(t.FirstName, <span class=\"string\">'###'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">OR</span> <span class=\"keyword\">ISNULL</span>(s.RealSurname  , <span class=\"string\">'###'</span>)  !=  <span class=\"keyword\">ISNULL</span>(t.Surname  , <span class=\"string\">'###'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">OR</span> t.IsDeleted = <span class=\"number\">1</span> <span class=\"comment\">-- If this matches then the entry has been reinstated</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--INSERT NEW ROWS INTO THE TEMP TABLE</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          source_Name</span><br><span class=\"line\">        , source_RealFirstName</span><br><span class=\"line\">        , source_RealSurname</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          s.Name</span><br><span class=\"line\">        , s.RealFirstName</span><br><span class=\"line\">        , s.RealSurname</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Staging.MarvelHero                s</span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> Warehouse.dim_MarvelHero t   <span class=\"keyword\">ON</span>  t.HeroName = s.Name</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> t.ID <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"comment\">-- Not Matched in Target</span></span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--INSERT SOFT DELETED ROWS INTO THE TEMP TABLE .. i.e. rows that are no longer present in source</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          TargetID</span><br><span class=\"line\">        , SoftDelete</span><br><span class=\"line\">        , currentTarget_HeroName</span><br><span class=\"line\">        , currentTarget_FirstName</span><br><span class=\"line\">        , currentTarget_Surname</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          t.ID</span><br><span class=\"line\">        , <span class=\"number\">1</span> <span class=\"comment\">-- Mark to soft delete</span></span><br><span class=\"line\">        , t.HeroName</span><br><span class=\"line\">        , t.FirstName</span><br><span class=\"line\">        , t.Surname</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Staging.MarvelHero                 s</span><br><span class=\"line\">        <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> Warehouse.dim_MarvelHero t   <span class=\"keyword\">ON</span>  t.HeroName = s.Name</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> s.[<span class=\"keyword\">Name</span>] <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"comment\">-- Not Matched in Source</span></span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* At this stage of the code we now know the state of all rows</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">       Unchanged</span></span><br><span class=\"line\"><span class=\"comment\">       Changed</span></span><br><span class=\"line\"><span class=\"comment\">       New</span></span><br><span class=\"line\"><span class=\"comment\">       Deleted (Soft Deleted)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">       Now we can merge into the main table</span></span><br><span class=\"line\"><span class=\"comment\">       and version control into the history table</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">MERGE</span> Warehouse.dim_MarvelHero   t</span><br><span class=\"line\">        <span class=\"keyword\">USING</span> <span class=\"comment\">#heros                 s   ON (s.TargetID = t.ID)</span></span><br><span class=\"line\">    <span class=\"keyword\">WHEN</span> <span class=\"keyword\">MATCHED</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">SET</span></span><br><span class=\"line\">          t.Version    = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">0</span> <span class=\"keyword\">THEN</span> currentTarget_Version + <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> t.Version <span class=\"keyword\">END</span> <span class=\"comment\">-- Increment Version</span></span><br><span class=\"line\">        , t.ValidFrom  = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">0</span> <span class=\"keyword\">THEN</span> <span class=\"keyword\">CAST</span>(<span class=\"keyword\">GETDATE</span>() <span class=\"keyword\">AS</span> <span class=\"built_in\">DATE</span>) <span class=\"keyword\">ELSE</span> t.ValidFrom <span class=\"keyword\">END</span><span class=\"comment\">-- Set Todays date for new version</span></span><br><span class=\"line\">        , t.FirstName  = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">0</span> <span class=\"keyword\">THEN</span> s.source_RealFirstName <span class=\"keyword\">ELSE</span> t.FirstName <span class=\"keyword\">END</span></span><br><span class=\"line\">        , t.Surname    = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">0</span> <span class=\"keyword\">THEN</span> s.source_RealSurname <span class=\"keyword\">ELSE</span> t.Surname <span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\">        , t.ValidTo    = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> SoftDelete = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> <span class=\"keyword\">CAST</span>(<span class=\"keyword\">GETDATE</span>() <span class=\"keyword\">AS</span> <span class=\"built_in\">DATE</span>) <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">        , t.isDeleted  = s.SoftDelete</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">MATCHED</span> <span class=\"keyword\">BY</span> TARGET <span class=\"keyword\">THEN</span> <span class=\"comment\">-- T.ID IS NULL, THEREFORE IT IS NEW</span></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          HeroName</span><br><span class=\"line\">        , FirstName</span><br><span class=\"line\">        , Surname</span><br><span class=\"line\">        , [<span class=\"keyword\">Version</span>]</span><br><span class=\"line\">        , ValidFrom</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">          s.source_Name</span><br><span class=\"line\">        , s.source_RealFirstName</span><br><span class=\"line\">        , s.source_RealSurname</span><br><span class=\"line\">        , <span class=\"number\">1</span> <span class=\"comment\">-- New row, so 1st version</span></span><br><span class=\"line\">        , <span class=\"keyword\">CAST</span>(<span class=\"keyword\">GETDATE</span>() <span class=\"keyword\">AS</span> <span class=\"built_in\">DATE</span>) <span class=\"comment\">-- Valid from today</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">--Merge done, now to handle history</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Warehouse.dim_MarvelHero__history</span><br><span class=\"line\">    (</span><br><span class=\"line\">          <span class=\"keyword\">ID</span></span><br><span class=\"line\">        , [<span class=\"keyword\">Version</span>]</span><br><span class=\"line\">        , HeroName</span><br><span class=\"line\">        , FirstName</span><br><span class=\"line\">        , Surname</span><br><span class=\"line\">        , ValidFrom</span><br><span class=\"line\">        , ValidTo</span><br><span class=\"line\">        , isDeleted</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          TargetID</span><br><span class=\"line\">        , currentTarget_Version</span><br><span class=\"line\">        , currentTarget_HeroName</span><br><span class=\"line\">        , currentTarget_FirstName</span><br><span class=\"line\">        , currentTarget_Surname</span><br><span class=\"line\">        , currentTarget_ValidFrom</span><br><span class=\"line\">        , <span class=\"keyword\">CAST</span>(<span class=\"keyword\">GETDATE</span>() <span class=\"keyword\">AS</span> <span class=\"built_in\">DATE</span>)</span><br><span class=\"line\">        , currentTarget_isDeleted</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> <span class=\"comment\">#heros</span></span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> TargetID <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"comment\">-- Insert changes only (not soft deletes or new entries)</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> SoftDelete = <span class=\"number\">0</span></span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">GO</span><br></pre></td></tr></table></figure>\n\n<p>I have commented the code, but will go into some detail about each block:</p>\n<ol>\n<li>A temp table is created called #heros. It will be used to store all the relevant details of the staging records coming in and any details about the current record in the dimension, should it match.</li>\n<li>The first insert into the #hero table will be for records that match but that have changed. The unique column in staging and the dim is “Name”/“HeroName”. Therefore staging is joined to the dim based on this column and if either of the columns: FirstName or Surname have changed then a change must have occurred. Also note that if a match occurs to the dim, but the dim had previously been marked as deleted then a change is also written as it will need to be reinstated.</li>\n<li>The second insert, inserts rows that are only in staging. These are new rows that have never been seen before</li>\n<li>The final insert, inserts rows that no longer exist in the staging table. These are rows that will need to be soft deleted.</li>\n<li>The temp table is then used to merge into the dim. The ID of the dim is used to determine the type of match. If the ID matches then we know that this dim exists in “some” state. Therefore if it matches that values will be updated accordingly or it will be soft deleted. If it doesn’t match, then it’s consider new and inserted</li>\n<li>Finally any updates (other than soft deletes) are inserted into the history table. Note that if a soft delete is reinstated, then the record of the soft delete will be stored into the history table</li>\n</ol>\n<p>Some testing:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXEC Warehouse.usp_Populate_dim_MarvelHero;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> Staging.MarvelHero</span><br><span class=\"line\"><span class=\"keyword\">SET</span> RealFirstName = <span class=\"string\">'Peter'</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> RealFirstName = <span class=\"string\">'Petr'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">EXEC Warehouse.usp_Populate_dim_MarvelHero;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> top(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> Staging.MarvelHero;</span><br><span class=\"line\"></span><br><span class=\"line\">EXEC Warehouse.usp_Populate_dim_MarvelHero;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Correct the typo and then run the proc</li>\n<li>Delete the first row and run the proc again</li>\n</ol>\n<p>Results:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Warehouse.dim_MarvelHero</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Warehouse.dim_MarvelHero__history</span><br></pre></td></tr></table></figure>\n\n<p>Output:</p>\n<p><img src=\"output.png\" alt=\"Output\"></p>\n<p>We can now see that the old value for the typo is in the history table and that the first row in the main table is now marked has soft deleted.</p>\n"},{"title":"Using merge to capture bulk insert identities","date":"2018-12-30T00:00:00.000Z","_content":"\nOn one occasion I encountered an _interesting_ piece of code.\n\nThere was a user table and the only unique identifier was the identity field itself. I would guess as the month and years progressed this table was enriched with additional columns until someone decided to call a halt on adding columns, but rather created a key value pair table to store additional attributes.\n\nSo this led to an interesting insert process. Inserting a single row was fairly simple. i.e. Insert row into main table, use the scope_identity to then insert additional details into the key value pair table.\n\nHowever, the process to insert in bulk made use of cursors and xml. Each row was processed within a cursor row by row to allow the identity of the first insert to be used to join it the key value pair table. I assume that this was done, because, if the data was inserted in bulk into the first table first, there would be no way to join back to it to identify the identities that had just been created, because there was no secondary unique identifier.\n\ntl:dr\n\nWhatever your reason may be, I sometimes use this little feature of the merge statement to capture identities\n\n> Before we go anywhere, lets have a quick overview of scope identity\n\n#### Scope Identities\n\n##### SCOPE_IDENTITY()\n\nThis will return the identity of the last inserted value. It will be limited to the current session and the current scope.\ni.e. If you insert into a table and that table has a trigger to insert into a second table, it will return the value of the first table.\n\n##### @@IDENTITY\n\nThis will return the identity of the last inserted value. It will be limited to the current session.\ni.e. If you insert into a table and that table has a trigger to insert into a second table, it will return the value of the second table.\n\n##### IDENT_CURRENT('table')\n\nThis will return the identity of the last inserted value. It is not bound to any session.\n\n> Now that we've got this out of the way, lets focus on bulk capturing rather than individual inserts\n\n#### Steps to capture identities using merge\n\n##### 1. Create a test table\n\n```sql\nCREATE TABLE dbo.Users\n(\n      UserID INT IDENTITY(1,1)\n    , FirstName VARCHAR(100)\n)\n```\n\nThe unique key is the ID.. So if we were to insert 'Fred' twice it would be impossible after the inserts are successful to capture which process created the entry. (I know it's bad table design :))\n\n##### 2. Playing with scope identities\n\n```sql\nINSERT INTO dbo.Users\nVALUES ('Fred'), ('Fred')\n;\n\nselect * from dbo.Users\n\nprint @@IDENTITY\nprint SCOPE_IDENTITY()\nprint IDENT_CURRENT('dbo.Users')\n```\n\n![Identities](Identities.png)\n\nAs you can see, two rows were inserted and the final output from the scope identities show the final ID as 2 and obviously disregard the first.\n\nSQL server does also offer the _inserted_ table as reference via the _output_ clause.\n![Output with Insert](OutputWithInsert.png)\nBut there is still no way that this can be tied back to the original data. The source dataset cannot be referenced within the output clause.\n\n> Roll on the merge syntax\n\n##### Merge\n\n```sql\nWITH d\nAS\n(\n    select 'Fred' as FirstName, 'TestRow1' WhichRow\n    union ALL\n    select 'Fred', 'TestRow2'\n)\nMERGE dbo.Users t\nUSING d  ON 1=2\nWHEN NOT MATCHED THEN\nINSERT\nVALUES\n(\n    d.FirstName\n)\nOUTPUT inserted.UserID, d.FirstName, d.WhichRow\n-- INTO #TEMPTABLE\n;\n```\n\n![Output using Merge](OutputUsingMerge.png)\n\nSo breaking this down\n\n- The CTE constructs two rows to be inserted. The column \"WhichRow\" is used to verify the data at the end\n- Merge against the User table\n- Merge using 1=2 .. This means that every row in the source dataset will be treated as not matched\n- Insert the data\n- Return the inserted data and the source data together via the output clause\n- Note: the could be directed into a temp table to be used for a second process\n","source":"_posts/sql-server/Using-Merge-to-Capture-Inserts.md","raw":"---\ntitle: \"Using merge to capture bulk insert identities\"\ndate: \"2018-12-30\"\ntags: [SQL]\ncategories: [SQL Server]\n---\n\nOn one occasion I encountered an _interesting_ piece of code.\n\nThere was a user table and the only unique identifier was the identity field itself. I would guess as the month and years progressed this table was enriched with additional columns until someone decided to call a halt on adding columns, but rather created a key value pair table to store additional attributes.\n\nSo this led to an interesting insert process. Inserting a single row was fairly simple. i.e. Insert row into main table, use the scope_identity to then insert additional details into the key value pair table.\n\nHowever, the process to insert in bulk made use of cursors and xml. Each row was processed within a cursor row by row to allow the identity of the first insert to be used to join it the key value pair table. I assume that this was done, because, if the data was inserted in bulk into the first table first, there would be no way to join back to it to identify the identities that had just been created, because there was no secondary unique identifier.\n\ntl:dr\n\nWhatever your reason may be, I sometimes use this little feature of the merge statement to capture identities\n\n> Before we go anywhere, lets have a quick overview of scope identity\n\n#### Scope Identities\n\n##### SCOPE_IDENTITY()\n\nThis will return the identity of the last inserted value. It will be limited to the current session and the current scope.\ni.e. If you insert into a table and that table has a trigger to insert into a second table, it will return the value of the first table.\n\n##### @@IDENTITY\n\nThis will return the identity of the last inserted value. It will be limited to the current session.\ni.e. If you insert into a table and that table has a trigger to insert into a second table, it will return the value of the second table.\n\n##### IDENT_CURRENT('table')\n\nThis will return the identity of the last inserted value. It is not bound to any session.\n\n> Now that we've got this out of the way, lets focus on bulk capturing rather than individual inserts\n\n#### Steps to capture identities using merge\n\n##### 1. Create a test table\n\n```sql\nCREATE TABLE dbo.Users\n(\n      UserID INT IDENTITY(1,1)\n    , FirstName VARCHAR(100)\n)\n```\n\nThe unique key is the ID.. So if we were to insert 'Fred' twice it would be impossible after the inserts are successful to capture which process created the entry. (I know it's bad table design :))\n\n##### 2. Playing with scope identities\n\n```sql\nINSERT INTO dbo.Users\nVALUES ('Fred'), ('Fred')\n;\n\nselect * from dbo.Users\n\nprint @@IDENTITY\nprint SCOPE_IDENTITY()\nprint IDENT_CURRENT('dbo.Users')\n```\n\n![Identities](Identities.png)\n\nAs you can see, two rows were inserted and the final output from the scope identities show the final ID as 2 and obviously disregard the first.\n\nSQL server does also offer the _inserted_ table as reference via the _output_ clause.\n![Output with Insert](OutputWithInsert.png)\nBut there is still no way that this can be tied back to the original data. The source dataset cannot be referenced within the output clause.\n\n> Roll on the merge syntax\n\n##### Merge\n\n```sql\nWITH d\nAS\n(\n    select 'Fred' as FirstName, 'TestRow1' WhichRow\n    union ALL\n    select 'Fred', 'TestRow2'\n)\nMERGE dbo.Users t\nUSING d  ON 1=2\nWHEN NOT MATCHED THEN\nINSERT\nVALUES\n(\n    d.FirstName\n)\nOUTPUT inserted.UserID, d.FirstName, d.WhichRow\n-- INTO #TEMPTABLE\n;\n```\n\n![Output using Merge](OutputUsingMerge.png)\n\nSo breaking this down\n\n- The CTE constructs two rows to be inserted. The column \"WhichRow\" is used to verify the data at the end\n- Merge against the User table\n- Merge using 1=2 .. This means that every row in the source dataset will be treated as not matched\n- Insert the data\n- Return the inserted data and the source data together via the output clause\n- Note: the could be directed into a temp table to be used for a second process\n","slug":"sql-server/Using-Merge-to-Capture-Inserts","published":1,"updated":"2020-03-09T23:09:44.513Z","_id":"ck7l1ww6k000b1hrr2oyq939k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>On one occasion I encountered an <em>interesting</em> piece of code.</p>\n<p>There was a user table and the only unique identifier was the identity field itself. I would guess as the month and years progressed this table was enriched with additional columns until someone decided to call a halt on adding columns, but rather created a key value pair table to store additional attributes.</p>\n<p>So this led to an interesting insert process. Inserting a single row was fairly simple. i.e. Insert row into main table, use the scope_identity to then insert additional details into the key value pair table.</p>\n<p>However, the process to insert in bulk made use of cursors and xml. Each row was processed within a cursor row by row to allow the identity of the first insert to be used to join it the key value pair table. I assume that this was done, because, if the data was inserted in bulk into the first table first, there would be no way to join back to it to identify the identities that had just been created, because there was no secondary unique identifier.</p>\n<p>tl:dr</p>\n<p>Whatever your reason may be, I sometimes use this little feature of the merge statement to capture identities</p>\n<blockquote>\n<p>Before we go anywhere, lets have a quick overview of scope identity</p>\n</blockquote>\n<h4 id=\"Scope-Identities\"><a href=\"#Scope-Identities\" class=\"headerlink\" title=\"Scope Identities\"></a>Scope Identities</h4><h5 id=\"SCOPE-IDENTITY\"><a href=\"#SCOPE-IDENTITY\" class=\"headerlink\" title=\"SCOPE_IDENTITY()\"></a>SCOPE_IDENTITY()</h5><p>This will return the identity of the last inserted value. It will be limited to the current session and the current scope.<br>i.e. If you insert into a table and that table has a trigger to insert into a second table, it will return the value of the first table.</p>\n<h5 id=\"IDENTITY\"><a href=\"#IDENTITY\" class=\"headerlink\" title=\"@@IDENTITY\"></a>@@IDENTITY</h5><p>This will return the identity of the last inserted value. It will be limited to the current session.<br>i.e. If you insert into a table and that table has a trigger to insert into a second table, it will return the value of the second table.</p>\n<h5 id=\"IDENT-CURRENT-‘table’\"><a href=\"#IDENT-CURRENT-‘table’\" class=\"headerlink\" title=\"IDENT_CURRENT(‘table’)\"></a>IDENT_CURRENT(‘table’)</h5><p>This will return the identity of the last inserted value. It is not bound to any session.</p>\n<blockquote>\n<p>Now that we’ve got this out of the way, lets focus on bulk capturing rather than individual inserts</p>\n</blockquote>\n<h4 id=\"Steps-to-capture-identities-using-merge\"><a href=\"#Steps-to-capture-identities-using-merge\" class=\"headerlink\" title=\"Steps to capture identities using merge\"></a>Steps to capture identities using merge</h4><h5 id=\"1-Create-a-test-table\"><a href=\"#1-Create-a-test-table\" class=\"headerlink\" title=\"1. Create a test table\"></a>1. Create a test table</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dbo.Users</span><br><span class=\"line\">(</span><br><span class=\"line\">      UserID <span class=\"built_in\">INT</span> <span class=\"keyword\">IDENTITY</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    , FirstName <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>The unique key is the ID.. So if we were to insert ‘Fred’ twice it would be impossible after the inserts are successful to capture which process created the entry. (I know it’s bad table design :))</p>\n<h5 id=\"2-Playing-with-scope-identities\"><a href=\"#2-Playing-with-scope-identities\" class=\"headerlink\" title=\"2. Playing with scope identities\"></a>2. Playing with scope identities</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dbo.Users</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'Fred'</span>), (<span class=\"string\">'Fred'</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> dbo.Users</span><br><span class=\"line\"></span><br><span class=\"line\">print @@<span class=\"keyword\">IDENTITY</span></span><br><span class=\"line\">print SCOPE_IDENTITY()</span><br><span class=\"line\">print <span class=\"keyword\">IDENT_CURRENT</span>(<span class=\"string\">'dbo.Users'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"Identities.png\" alt=\"Identities\"></p>\n<p>As you can see, two rows were inserted and the final output from the scope identities show the final ID as 2 and obviously disregard the first.</p>\n<p>SQL server does also offer the <em>inserted</em> table as reference via the <em>output</em> clause.<br><img src=\"OutputWithInsert.png\" alt=\"Output with Insert\"><br>But there is still no way that this can be tied back to the original data. The source dataset cannot be referenced within the output clause.</p>\n<blockquote>\n<p>Roll on the merge syntax</p>\n</blockquote>\n<h5 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> d</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"string\">'Fred'</span> <span class=\"keyword\">as</span> FirstName, <span class=\"string\">'TestRow1'</span> WhichRow</span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"string\">'Fred'</span>, <span class=\"string\">'TestRow2'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">MERGE</span> dbo.Users t</span><br><span class=\"line\"><span class=\"keyword\">USING</span> d  <span class=\"keyword\">ON</span> <span class=\"number\">1</span>=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">MATCHED</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    d.FirstName</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">OUTPUT</span> inserted.UserID, d.FirstName, d.WhichRow</span><br><span class=\"line\"><span class=\"comment\">-- INTO #TEMPTABLE</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"OutputUsingMerge.png\" alt=\"Output using Merge\"></p>\n<p>So breaking this down</p>\n<ul>\n<li>The CTE constructs two rows to be inserted. The column “WhichRow” is used to verify the data at the end</li>\n<li>Merge against the User table</li>\n<li>Merge using 1=2 .. This means that every row in the source dataset will be treated as not matched</li>\n<li>Insert the data</li>\n<li>Return the inserted data and the source data together via the output clause</li>\n<li>Note: the could be directed into a temp table to be used for a second process</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>On one occasion I encountered an <em>interesting</em> piece of code.</p>\n<p>There was a user table and the only unique identifier was the identity field itself. I would guess as the month and years progressed this table was enriched with additional columns until someone decided to call a halt on adding columns, but rather created a key value pair table to store additional attributes.</p>\n<p>So this led to an interesting insert process. Inserting a single row was fairly simple. i.e. Insert row into main table, use the scope_identity to then insert additional details into the key value pair table.</p>\n<p>However, the process to insert in bulk made use of cursors and xml. Each row was processed within a cursor row by row to allow the identity of the first insert to be used to join it the key value pair table. I assume that this was done, because, if the data was inserted in bulk into the first table first, there would be no way to join back to it to identify the identities that had just been created, because there was no secondary unique identifier.</p>\n<p>tl:dr</p>\n<p>Whatever your reason may be, I sometimes use this little feature of the merge statement to capture identities</p>\n<blockquote>\n<p>Before we go anywhere, lets have a quick overview of scope identity</p>\n</blockquote>\n<h4 id=\"Scope-Identities\"><a href=\"#Scope-Identities\" class=\"headerlink\" title=\"Scope Identities\"></a>Scope Identities</h4><h5 id=\"SCOPE-IDENTITY\"><a href=\"#SCOPE-IDENTITY\" class=\"headerlink\" title=\"SCOPE_IDENTITY()\"></a>SCOPE_IDENTITY()</h5><p>This will return the identity of the last inserted value. It will be limited to the current session and the current scope.<br>i.e. If you insert into a table and that table has a trigger to insert into a second table, it will return the value of the first table.</p>\n<h5 id=\"IDENTITY\"><a href=\"#IDENTITY\" class=\"headerlink\" title=\"@@IDENTITY\"></a>@@IDENTITY</h5><p>This will return the identity of the last inserted value. It will be limited to the current session.<br>i.e. If you insert into a table and that table has a trigger to insert into a second table, it will return the value of the second table.</p>\n<h5 id=\"IDENT-CURRENT-‘table’\"><a href=\"#IDENT-CURRENT-‘table’\" class=\"headerlink\" title=\"IDENT_CURRENT(‘table’)\"></a>IDENT_CURRENT(‘table’)</h5><p>This will return the identity of the last inserted value. It is not bound to any session.</p>\n<blockquote>\n<p>Now that we’ve got this out of the way, lets focus on bulk capturing rather than individual inserts</p>\n</blockquote>\n<h4 id=\"Steps-to-capture-identities-using-merge\"><a href=\"#Steps-to-capture-identities-using-merge\" class=\"headerlink\" title=\"Steps to capture identities using merge\"></a>Steps to capture identities using merge</h4><h5 id=\"1-Create-a-test-table\"><a href=\"#1-Create-a-test-table\" class=\"headerlink\" title=\"1. Create a test table\"></a>1. Create a test table</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dbo.Users</span><br><span class=\"line\">(</span><br><span class=\"line\">      UserID <span class=\"built_in\">INT</span> <span class=\"keyword\">IDENTITY</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    , FirstName <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>The unique key is the ID.. So if we were to insert ‘Fred’ twice it would be impossible after the inserts are successful to capture which process created the entry. (I know it’s bad table design :))</p>\n<h5 id=\"2-Playing-with-scope-identities\"><a href=\"#2-Playing-with-scope-identities\" class=\"headerlink\" title=\"2. Playing with scope identities\"></a>2. Playing with scope identities</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dbo.Users</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'Fred'</span>), (<span class=\"string\">'Fred'</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> dbo.Users</span><br><span class=\"line\"></span><br><span class=\"line\">print @@<span class=\"keyword\">IDENTITY</span></span><br><span class=\"line\">print SCOPE_IDENTITY()</span><br><span class=\"line\">print <span class=\"keyword\">IDENT_CURRENT</span>(<span class=\"string\">'dbo.Users'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"Identities.png\" alt=\"Identities\"></p>\n<p>As you can see, two rows were inserted and the final output from the scope identities show the final ID as 2 and obviously disregard the first.</p>\n<p>SQL server does also offer the <em>inserted</em> table as reference via the <em>output</em> clause.<br><img src=\"OutputWithInsert.png\" alt=\"Output with Insert\"><br>But there is still no way that this can be tied back to the original data. The source dataset cannot be referenced within the output clause.</p>\n<blockquote>\n<p>Roll on the merge syntax</p>\n</blockquote>\n<h5 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> d</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"string\">'Fred'</span> <span class=\"keyword\">as</span> FirstName, <span class=\"string\">'TestRow1'</span> WhichRow</span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"string\">'Fred'</span>, <span class=\"string\">'TestRow2'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">MERGE</span> dbo.Users t</span><br><span class=\"line\"><span class=\"keyword\">USING</span> d  <span class=\"keyword\">ON</span> <span class=\"number\">1</span>=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">MATCHED</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    d.FirstName</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">OUTPUT</span> inserted.UserID, d.FirstName, d.WhichRow</span><br><span class=\"line\"><span class=\"comment\">-- INTO #TEMPTABLE</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"OutputUsingMerge.png\" alt=\"Output using Merge\"></p>\n<p>So breaking this down</p>\n<ul>\n<li>The CTE constructs two rows to be inserted. The column “WhichRow” is used to verify the data at the end</li>\n<li>Merge against the User table</li>\n<li>Merge using 1=2 .. This means that every row in the source dataset will be treated as not matched</li>\n<li>Insert the data</li>\n<li>Return the inserted data and the source data together via the output clause</li>\n<li>Note: the could be directed into a temp table to be used for a second process</li>\n</ul>\n"},{"title":"Why 'WHERE 1=1'?","date":"2020-02-12T00:00:00.000Z","_content":"\nHave you ever seen code like this:\n\n```sql\nSELECT\n      A\n    , B\n    , C\nFROM TabA\nWHERE 1=1\nAND A = 'Foo'\nAND B = 'Bar'\n```\n\nThe simple answer is that, this is just for some lazy debugging.\n\nLet's say you have the similar code:\n\n```sql\nSELECT\n      A\n    , B\n    , C\nFROM TabA\nWHERE A = 'Foo'\nAND B = 'Bar'\n```\n\nand you briefly want to ignore the first filter \"A = 'Foo'\" for testing purposes. You would end up with\n\n```sql\nSELECT\n      A\n    , B\n    , C\nFROM TabA\n--WHERE A = 'Foo'\nWHERE B = 'Bar'\n```\n\nNotice that the 'WHERE' line was commented out and therefore the next 'AND' needs to turn in a 'WHERE' to allow the syntax to remain correct.\n\nAs a result a number of developers will always make the WHERE clause 'WHERE 1=1' to avoid ever needing to comment it out and therefore never needing to change the next 'AND' to 'WHERE'.\n","source":"_posts/sql-server/why1-equals-1.md","raw":"---\ntitle: \"Why 'WHERE 1=1'?\"\ndate: \"2020-02-12\"\ntags: [SQL]\ncategories: [SQL Server]\n---\n\nHave you ever seen code like this:\n\n```sql\nSELECT\n      A\n    , B\n    , C\nFROM TabA\nWHERE 1=1\nAND A = 'Foo'\nAND B = 'Bar'\n```\n\nThe simple answer is that, this is just for some lazy debugging.\n\nLet's say you have the similar code:\n\n```sql\nSELECT\n      A\n    , B\n    , C\nFROM TabA\nWHERE A = 'Foo'\nAND B = 'Bar'\n```\n\nand you briefly want to ignore the first filter \"A = 'Foo'\" for testing purposes. You would end up with\n\n```sql\nSELECT\n      A\n    , B\n    , C\nFROM TabA\n--WHERE A = 'Foo'\nWHERE B = 'Bar'\n```\n\nNotice that the 'WHERE' line was commented out and therefore the next 'AND' needs to turn in a 'WHERE' to allow the syntax to remain correct.\n\nAs a result a number of developers will always make the WHERE clause 'WHERE 1=1' to avoid ever needing to comment it out and therefore never needing to change the next 'AND' to 'WHERE'.\n","slug":"sql-server/why1-equals-1","published":1,"updated":"2020-03-09T23:09:30.878Z","_id":"ck7l1ww6l000e1hrrbsnl9tjl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Have you ever seen code like this:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      A</span><br><span class=\"line\">    , B</span><br><span class=\"line\">    , C</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> TabA</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"number\">1</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> A = <span class=\"string\">'Foo'</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> B = <span class=\"string\">'Bar'</span></span><br></pre></td></tr></table></figure>\n\n<p>The simple answer is that, this is just for some lazy debugging.</p>\n<p>Let’s say you have the similar code:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      A</span><br><span class=\"line\">    , B</span><br><span class=\"line\">    , C</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> TabA</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> A = <span class=\"string\">'Foo'</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> B = <span class=\"string\">'Bar'</span></span><br></pre></td></tr></table></figure>\n\n<p>and you briefly want to ignore the first filter “A = ‘Foo’” for testing purposes. You would end up with</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      A</span><br><span class=\"line\">    , B</span><br><span class=\"line\">    , C</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> TabA</span><br><span class=\"line\"><span class=\"comment\">--WHERE A = 'Foo'</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> B = <span class=\"string\">'Bar'</span></span><br></pre></td></tr></table></figure>\n\n<p>Notice that the ‘WHERE’ line was commented out and therefore the next ‘AND’ needs to turn in a ‘WHERE’ to allow the syntax to remain correct.</p>\n<p>As a result a number of developers will always make the WHERE clause ‘WHERE 1=1’ to avoid ever needing to comment it out and therefore never needing to change the next ‘AND’ to ‘WHERE’.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Have you ever seen code like this:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      A</span><br><span class=\"line\">    , B</span><br><span class=\"line\">    , C</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> TabA</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"number\">1</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> A = <span class=\"string\">'Foo'</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> B = <span class=\"string\">'Bar'</span></span><br></pre></td></tr></table></figure>\n\n<p>The simple answer is that, this is just for some lazy debugging.</p>\n<p>Let’s say you have the similar code:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      A</span><br><span class=\"line\">    , B</span><br><span class=\"line\">    , C</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> TabA</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> A = <span class=\"string\">'Foo'</span></span><br><span class=\"line\"><span class=\"keyword\">AND</span> B = <span class=\"string\">'Bar'</span></span><br></pre></td></tr></table></figure>\n\n<p>and you briefly want to ignore the first filter “A = ‘Foo’” for testing purposes. You would end up with</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      A</span><br><span class=\"line\">    , B</span><br><span class=\"line\">    , C</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> TabA</span><br><span class=\"line\"><span class=\"comment\">--WHERE A = 'Foo'</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> B = <span class=\"string\">'Bar'</span></span><br></pre></td></tr></table></figure>\n\n<p>Notice that the ‘WHERE’ line was commented out and therefore the next ‘AND’ needs to turn in a ‘WHERE’ to allow the syntax to remain correct.</p>\n<p>As a result a number of developers will always make the WHERE clause ‘WHERE 1=1’ to avoid ever needing to comment it out and therefore never needing to change the next ‘AND’ to ‘WHERE’.</p>\n"},{"title":"XOR - Bitwise exclusive OR","date":"2020-02-20T00:00:00.000Z","_content":"\nThere are a number of bitwise functions in sql server: AND; OR; Exclusive OR; NOT.\n\nFor this topic I will be giving a working example of using an \"Exclusive OR\".\n\nFirstly lets understand what a bitwise exclusive or operation does:\n\n**XOR**\n\n| LEFT Flag | Right Flag | Result |\n| --------- | ---------- | ------ |\n| True      | True       | False  |\n| False     | True       | True   |\n| True      | False      | True   |\n| False     | False      | False  |\n\nSo a normal 'OR' would return TRUE if: 1) Both Sides are true; 2) one side is true. The difference for XOR is that if both sides are true then the result is false. Another way to think is that it is an 'OR' minus an 'AND'.\n\nWe can also look at the binary representation of this. Courtesy of MS Docs:\n\n```\nLEFT         0000 0000 1010 1010\nRIGHT        0000 0000 0100 1011\n             -------------------\nRESULT       0000 0000 1110 0001\n```\n\nThroughout my experience I have very rarely since this logic used, but as always there will be occasions where these functions are useful.\n\nTake the following example. Suppose you want to compare two tables to see if something has changed:\n\n```sql\n\n--Source table (Incoming data)\nCREATE Table1\n(\n          Col1 VARCHAR(10)\n        , Col2 VARCHAR(10)\n);\n\nINSERT INTO Table1\nVALUES\n    ('Foo','Bar')\n;\n\n--Target table (Data that might be updated)\nCREATE Table2\n(\n          ID INT IDENTITY(1,1)\n        , Col1 VARCHAR(10)\n        , Col2 VARCHAR(10)\n);\n\nINSERT INTO Table2\nVALUES\n    ('Foo',NULL)\n;\n\n--Table to record what will be changed\nCREATE TABLE Updates\n(\n          ID INT\n        , Col1 VARCHAR(10)\n        , Col2 VARCHAR(10)\n)\n```\n\nSo if you want to record what will be changed on Table2 into Updates. You could run the following:\n\n```sql\nwith x\nas\n(\n    SELECT T2.ID, T1.Col1, T1.Col2\n    FROM Table1 T1-- Source\n        INNER JOIN Table2 T2 --Target\n            ON T1.Col1 != T2.Col1 OR (T1.Col1 IS NULL AND T2.Col1 IS NULL)\n    WHERE (ISNULL(T1.Col2,'') != ISNULL(T2.Col2,''))\n)\nINSERT INTO updates\nSELECT * FROM x\n;\n```\n\nThis is fairly typical. **Note** As most experienced SQL devs know, NULLS are our bane of existence. If something can be NULL and it needs to be compared, then you need to protect against it. ie WHERE NULL = NULL is false and NULL != NULL is false, because by default NULLS cannot be compared. So you either SET ANSI_NULLS OFF (which is due to be depreciated), or you replace the NULLS on both sides, as done above.\n\nNow imagine that you cannot replace the NULL with values on both sides. So in this case you are not allowed to use `ISNULL(T1.Col2,'') != ISNULL(T2.Col2,'')`. It would then not be possible to compare `T1.Col1 != T2.Col1` if either side is NULL.\n\nSo `T1.Col2 != T2.Col2` will capture any differences that don't contain nulls, so we need to do something like `T1.Col2 != T2.Col2 OR (T1.Col2 IS NULL XOR T2.Col2 IS NULL)`. The important addition to this is `T1.Col2 IS NULL XOR T2.Col2 IS NULL`. What this means is. If either T1.Col2 is NULL Or T2.Col2 IS NULL, but BOTH are not NULL.\ni.e.\n\n| T1.COL2  | T2.Col2  | Result |\n| -------- | -------- | ------ |\n| NULL     | NULL     | False  |\n| NULL     | NOT NULL | True   |\n| NOT NULL | NULL     | True   |\n| NOT NULL | NOT NULL | N/A    |\n\n**N/A** The NOT NULL AND NOT NULL logic would never occur as that would be captured by the `T1.Col1 != T2.Col1` side of `T1.Col2 != T2.Col2 OR (T1.Col2 IS NULL XOR T2.Col2 IS NULL)`\n\nBefore we look at fixing the where clause we will replicate the table above:\n\n```sql\nDECLARE @T1_COL2 VARCHAR(10), @T2_COL2 VARCHAR(10);\n\nSELECT\n      T1bool = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END\n    , T2bool = CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END\n    , Result = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END;\n\n/*\nRESULT\n\n     T1bool   T2bool   Result\n     1        1        0\n*/\n\n\n\nSELECT @T1_COL2 ='BAR', @T2_COL2 = NULL;\n\nSELECT\n      T1bool = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END\n    , T2bool = CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END\n    , Result = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END;\n\n\n/*\nRESULT\n\n     T1bool   T2bool   Result\n     0        1        1\n*/\n\n\n\nSELECT @T1_COL2 =NULL, @T2_COL2 = 'BAR';\n\nSELECT\n      T1bool = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END\n    , T2bool = CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END\n    , Result = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END;\n\n\n/*\nRESULT\n\n     T1bool   T2bool   Result\n     1        0        1\n*/\n\n```\n\nSo we can see that the sql code `CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END` will equal '1' if either T1.Col2 is NULL or T2.Col2 is NULL but NOT both.\n\nTherefore the original piece of SQL can become:\n\n```sql\nwith x\nas\n(\n    SELECT T2.ID, T1.Col1, T1.Col2\n    FROM Table1 T1-- Source\n        INNER JOIN Table2 T2 --Target\n            ON T1.Col1 != T2.Col1 OR (T1.Col1 IS NULL AND T2.Col1 IS NULL)\n    WHERE (CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END) = 1\n)\nINSERT INTO updates\nSELECT * FROM x\n;\n```\n","source":"_posts/sql-server/XOR.md","raw":"---\ntitle: \"XOR - Bitwise exclusive OR\"\ndate: \"2020-02-20\"\ntags: [SQL]\ncategories: [SQL Server]\n---\n\nThere are a number of bitwise functions in sql server: AND; OR; Exclusive OR; NOT.\n\nFor this topic I will be giving a working example of using an \"Exclusive OR\".\n\nFirstly lets understand what a bitwise exclusive or operation does:\n\n**XOR**\n\n| LEFT Flag | Right Flag | Result |\n| --------- | ---------- | ------ |\n| True      | True       | False  |\n| False     | True       | True   |\n| True      | False      | True   |\n| False     | False      | False  |\n\nSo a normal 'OR' would return TRUE if: 1) Both Sides are true; 2) one side is true. The difference for XOR is that if both sides are true then the result is false. Another way to think is that it is an 'OR' minus an 'AND'.\n\nWe can also look at the binary representation of this. Courtesy of MS Docs:\n\n```\nLEFT         0000 0000 1010 1010\nRIGHT        0000 0000 0100 1011\n             -------------------\nRESULT       0000 0000 1110 0001\n```\n\nThroughout my experience I have very rarely since this logic used, but as always there will be occasions where these functions are useful.\n\nTake the following example. Suppose you want to compare two tables to see if something has changed:\n\n```sql\n\n--Source table (Incoming data)\nCREATE Table1\n(\n          Col1 VARCHAR(10)\n        , Col2 VARCHAR(10)\n);\n\nINSERT INTO Table1\nVALUES\n    ('Foo','Bar')\n;\n\n--Target table (Data that might be updated)\nCREATE Table2\n(\n          ID INT IDENTITY(1,1)\n        , Col1 VARCHAR(10)\n        , Col2 VARCHAR(10)\n);\n\nINSERT INTO Table2\nVALUES\n    ('Foo',NULL)\n;\n\n--Table to record what will be changed\nCREATE TABLE Updates\n(\n          ID INT\n        , Col1 VARCHAR(10)\n        , Col2 VARCHAR(10)\n)\n```\n\nSo if you want to record what will be changed on Table2 into Updates. You could run the following:\n\n```sql\nwith x\nas\n(\n    SELECT T2.ID, T1.Col1, T1.Col2\n    FROM Table1 T1-- Source\n        INNER JOIN Table2 T2 --Target\n            ON T1.Col1 != T2.Col1 OR (T1.Col1 IS NULL AND T2.Col1 IS NULL)\n    WHERE (ISNULL(T1.Col2,'') != ISNULL(T2.Col2,''))\n)\nINSERT INTO updates\nSELECT * FROM x\n;\n```\n\nThis is fairly typical. **Note** As most experienced SQL devs know, NULLS are our bane of existence. If something can be NULL and it needs to be compared, then you need to protect against it. ie WHERE NULL = NULL is false and NULL != NULL is false, because by default NULLS cannot be compared. So you either SET ANSI_NULLS OFF (which is due to be depreciated), or you replace the NULLS on both sides, as done above.\n\nNow imagine that you cannot replace the NULL with values on both sides. So in this case you are not allowed to use `ISNULL(T1.Col2,'') != ISNULL(T2.Col2,'')`. It would then not be possible to compare `T1.Col1 != T2.Col1` if either side is NULL.\n\nSo `T1.Col2 != T2.Col2` will capture any differences that don't contain nulls, so we need to do something like `T1.Col2 != T2.Col2 OR (T1.Col2 IS NULL XOR T2.Col2 IS NULL)`. The important addition to this is `T1.Col2 IS NULL XOR T2.Col2 IS NULL`. What this means is. If either T1.Col2 is NULL Or T2.Col2 IS NULL, but BOTH are not NULL.\ni.e.\n\n| T1.COL2  | T2.Col2  | Result |\n| -------- | -------- | ------ |\n| NULL     | NULL     | False  |\n| NULL     | NOT NULL | True   |\n| NOT NULL | NULL     | True   |\n| NOT NULL | NOT NULL | N/A    |\n\n**N/A** The NOT NULL AND NOT NULL logic would never occur as that would be captured by the `T1.Col1 != T2.Col1` side of `T1.Col2 != T2.Col2 OR (T1.Col2 IS NULL XOR T2.Col2 IS NULL)`\n\nBefore we look at fixing the where clause we will replicate the table above:\n\n```sql\nDECLARE @T1_COL2 VARCHAR(10), @T2_COL2 VARCHAR(10);\n\nSELECT\n      T1bool = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END\n    , T2bool = CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END\n    , Result = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END;\n\n/*\nRESULT\n\n     T1bool   T2bool   Result\n     1        1        0\n*/\n\n\n\nSELECT @T1_COL2 ='BAR', @T2_COL2 = NULL;\n\nSELECT\n      T1bool = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END\n    , T2bool = CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END\n    , Result = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END;\n\n\n/*\nRESULT\n\n     T1bool   T2bool   Result\n     0        1        1\n*/\n\n\n\nSELECT @T1_COL2 =NULL, @T2_COL2 = 'BAR';\n\nSELECT\n      T1bool = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END\n    , T2bool = CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END\n    , Result = CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END;\n\n\n/*\nRESULT\n\n     T1bool   T2bool   Result\n     1        0        1\n*/\n\n```\n\nSo we can see that the sql code `CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END` will equal '1' if either T1.Col2 is NULL or T2.Col2 is NULL but NOT both.\n\nTherefore the original piece of SQL can become:\n\n```sql\nwith x\nas\n(\n    SELECT T2.ID, T1.Col1, T1.Col2\n    FROM Table1 T1-- Source\n        INNER JOIN Table2 T2 --Target\n            ON T1.Col1 != T2.Col1 OR (T1.Col1 IS NULL AND T2.Col1 IS NULL)\n    WHERE (CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END) = 1\n)\nINSERT INTO updates\nSELECT * FROM x\n;\n```\n","slug":"sql-server/XOR","published":1,"updated":"2020-03-09T23:09:18.004Z","_id":"ck7l1ww6m000f1hrrc5b3gm7i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>There are a number of bitwise functions in sql server: AND; OR; Exclusive OR; NOT.</p>\n<p>For this topic I will be giving a working example of using an “Exclusive OR”.</p>\n<p>Firstly lets understand what a bitwise exclusive or operation does:</p>\n<p><strong>XOR</strong></p>\n<table>\n<thead>\n<tr>\n<th>LEFT Flag</th>\n<th>Right Flag</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>True</td>\n<td>True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False</td>\n<td>True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True</td>\n<td>False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False</td>\n<td>False</td>\n<td>False</td>\n</tr>\n</tbody></table>\n<p>So a normal ‘OR’ would return TRUE if: 1) Both Sides are true; 2) one side is true. The difference for XOR is that if both sides are true then the result is false. Another way to think is that it is an ‘OR’ minus an ‘AND’.</p>\n<p>We can also look at the binary representation of this. Courtesy of MS Docs:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEFT         0000 0000 1010 1010</span><br><span class=\"line\">RIGHT        0000 0000 0100 1011</span><br><span class=\"line\">             -------------------</span><br><span class=\"line\">RESULT       0000 0000 1110 0001</span><br></pre></td></tr></table></figure>\n\n<p>Throughout my experience I have very rarely since this logic used, but as always there will be occasions where these functions are useful.</p>\n<p>Take the following example. Suppose you want to compare two tables to see if something has changed:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Source table (Incoming data)</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> Table1</span><br><span class=\"line\">(</span><br><span class=\"line\">          Col1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        , Col2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Table1</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">    (<span class=\"string\">'Foo'</span>,<span class=\"string\">'Bar'</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Target table (Data that might be updated)</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> Table2</span><br><span class=\"line\">(</span><br><span class=\"line\">          <span class=\"keyword\">ID</span> <span class=\"built_in\">INT</span> <span class=\"keyword\">IDENTITY</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        , Col1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        , Col2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Table2</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">    (<span class=\"string\">'Foo'</span>,<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Table to record what will be changed</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Updates</span><br><span class=\"line\">(</span><br><span class=\"line\">          <span class=\"keyword\">ID</span> <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , Col1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        , Col2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>So if you want to record what will be changed on Table2 into Updates. You could run the following:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> x</span><br><span class=\"line\"><span class=\"keyword\">as</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> T2.ID, T1.Col1, T1.Col2</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Table1 T1<span class=\"comment\">-- Source</span></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Table2 T2 <span class=\"comment\">--Target</span></span><br><span class=\"line\">            <span class=\"keyword\">ON</span> T1.Col1 != T2.Col1 <span class=\"keyword\">OR</span> (T1.Col1 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">AND</span> T2.Col1 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> (<span class=\"keyword\">ISNULL</span>(T1.Col2,<span class=\"string\">''</span>) != <span class=\"keyword\">ISNULL</span>(T2.Col2,<span class=\"string\">''</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> updates</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> x</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>This is fairly typical. <strong>Note</strong> As most experienced SQL devs know, NULLS are our bane of existence. If something can be NULL and it needs to be compared, then you need to protect against it. ie WHERE NULL = NULL is false and NULL != NULL is false, because by default NULLS cannot be compared. So you either SET ANSI_NULLS OFF (which is due to be depreciated), or you replace the NULLS on both sides, as done above.</p>\n<p>Now imagine that you cannot replace the NULL with values on both sides. So in this case you are not allowed to use <code>ISNULL(T1.Col2,&#39;&#39;) != ISNULL(T2.Col2,&#39;&#39;)</code>. It would then not be possible to compare <code>T1.Col1 != T2.Col1</code> if either side is NULL.</p>\n<p>So <code>T1.Col2 != T2.Col2</code> will capture any differences that don’t contain nulls, so we need to do something like <code>T1.Col2 != T2.Col2 OR (T1.Col2 IS NULL XOR T2.Col2 IS NULL)</code>. The important addition to this is <code>T1.Col2 IS NULL XOR T2.Col2 IS NULL</code>. What this means is. If either T1.Col2 is NULL Or T2.Col2 IS NULL, but BOTH are not NULL.<br>i.e.</p>\n<table>\n<thead>\n<tr>\n<th>T1.COL2</th>\n<th>T2.Col2</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NULL</td>\n<td>NULL</td>\n<td>False</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>NOT NULL</td>\n<td>True</td>\n</tr>\n<tr>\n<td>NOT NULL</td>\n<td>NULL</td>\n<td>True</td>\n</tr>\n<tr>\n<td>NOT NULL</td>\n<td>NOT NULL</td>\n<td>N/A</td>\n</tr>\n</tbody></table>\n<p><strong>N/A</strong> The NOT NULL AND NOT NULL logic would never occur as that would be captured by the <code>T1.Col1 != T2.Col1</code> side of <code>T1.Col2 != T2.Col2 OR (T1.Col2 IS NULL XOR T2.Col2 IS NULL)</code></p>\n<p>Before we look at fixing the where clause we will replicate the table above:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> @T1_COL2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>), @T2_COL2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      T1bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , T2bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , <span class=\"keyword\">Result</span> = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ^ <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">RESULT</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     T1bool   T2bool   Result</span></span><br><span class=\"line\"><span class=\"comment\">     1        1        0</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @T1_COL2 =<span class=\"string\">'BAR'</span>, @T2_COL2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      T1bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , T2bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , <span class=\"keyword\">Result</span> = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ^ <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">RESULT</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     T1bool   T2bool   Result</span></span><br><span class=\"line\"><span class=\"comment\">     0        1        1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @T1_COL2 =<span class=\"literal\">NULL</span>, @T2_COL2 = <span class=\"string\">'BAR'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      T1bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , T2bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , <span class=\"keyword\">Result</span> = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ^ <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">RESULT</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     T1bool   T2bool   Result</span></span><br><span class=\"line\"><span class=\"comment\">     1        0        1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>So we can see that the sql code <code>CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END</code> will equal ‘1’ if either T1.Col2 is NULL or T2.Col2 is NULL but NOT both.</p>\n<p>Therefore the original piece of SQL can become:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> x</span><br><span class=\"line\"><span class=\"keyword\">as</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> T2.ID, T1.Col1, T1.Col2</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Table1 T1<span class=\"comment\">-- Source</span></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Table2 T2 <span class=\"comment\">--Target</span></span><br><span class=\"line\">            <span class=\"keyword\">ON</span> T1.Col1 != T2.Col1 <span class=\"keyword\">OR</span> (T1.Col1 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">AND</span> T2.Col1 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> (<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ^ <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) = <span class=\"number\">1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> updates</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> x</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>There are a number of bitwise functions in sql server: AND; OR; Exclusive OR; NOT.</p>\n<p>For this topic I will be giving a working example of using an “Exclusive OR”.</p>\n<p>Firstly lets understand what a bitwise exclusive or operation does:</p>\n<p><strong>XOR</strong></p>\n<table>\n<thead>\n<tr>\n<th>LEFT Flag</th>\n<th>Right Flag</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>True</td>\n<td>True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False</td>\n<td>True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True</td>\n<td>False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False</td>\n<td>False</td>\n<td>False</td>\n</tr>\n</tbody></table>\n<p>So a normal ‘OR’ would return TRUE if: 1) Both Sides are true; 2) one side is true. The difference for XOR is that if both sides are true then the result is false. Another way to think is that it is an ‘OR’ minus an ‘AND’.</p>\n<p>We can also look at the binary representation of this. Courtesy of MS Docs:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEFT         0000 0000 1010 1010</span><br><span class=\"line\">RIGHT        0000 0000 0100 1011</span><br><span class=\"line\">             -------------------</span><br><span class=\"line\">RESULT       0000 0000 1110 0001</span><br></pre></td></tr></table></figure>\n\n<p>Throughout my experience I have very rarely since this logic used, but as always there will be occasions where these functions are useful.</p>\n<p>Take the following example. Suppose you want to compare two tables to see if something has changed:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Source table (Incoming data)</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> Table1</span><br><span class=\"line\">(</span><br><span class=\"line\">          Col1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        , Col2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Table1</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">    (<span class=\"string\">'Foo'</span>,<span class=\"string\">'Bar'</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Target table (Data that might be updated)</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> Table2</span><br><span class=\"line\">(</span><br><span class=\"line\">          <span class=\"keyword\">ID</span> <span class=\"built_in\">INT</span> <span class=\"keyword\">IDENTITY</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        , Col1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        , Col2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Table2</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span></span><br><span class=\"line\">    (<span class=\"string\">'Foo'</span>,<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Table to record what will be changed</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Updates</span><br><span class=\"line\">(</span><br><span class=\"line\">          <span class=\"keyword\">ID</span> <span class=\"built_in\">INT</span></span><br><span class=\"line\">        , Col1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        , Col2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>So if you want to record what will be changed on Table2 into Updates. You could run the following:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> x</span><br><span class=\"line\"><span class=\"keyword\">as</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> T2.ID, T1.Col1, T1.Col2</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Table1 T1<span class=\"comment\">-- Source</span></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Table2 T2 <span class=\"comment\">--Target</span></span><br><span class=\"line\">            <span class=\"keyword\">ON</span> T1.Col1 != T2.Col1 <span class=\"keyword\">OR</span> (T1.Col1 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">AND</span> T2.Col1 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> (<span class=\"keyword\">ISNULL</span>(T1.Col2,<span class=\"string\">''</span>) != <span class=\"keyword\">ISNULL</span>(T2.Col2,<span class=\"string\">''</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> updates</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> x</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>This is fairly typical. <strong>Note</strong> As most experienced SQL devs know, NULLS are our bane of existence. If something can be NULL and it needs to be compared, then you need to protect against it. ie WHERE NULL = NULL is false and NULL != NULL is false, because by default NULLS cannot be compared. So you either SET ANSI_NULLS OFF (which is due to be depreciated), or you replace the NULLS on both sides, as done above.</p>\n<p>Now imagine that you cannot replace the NULL with values on both sides. So in this case you are not allowed to use <code>ISNULL(T1.Col2,&#39;&#39;) != ISNULL(T2.Col2,&#39;&#39;)</code>. It would then not be possible to compare <code>T1.Col1 != T2.Col1</code> if either side is NULL.</p>\n<p>So <code>T1.Col2 != T2.Col2</code> will capture any differences that don’t contain nulls, so we need to do something like <code>T1.Col2 != T2.Col2 OR (T1.Col2 IS NULL XOR T2.Col2 IS NULL)</code>. The important addition to this is <code>T1.Col2 IS NULL XOR T2.Col2 IS NULL</code>. What this means is. If either T1.Col2 is NULL Or T2.Col2 IS NULL, but BOTH are not NULL.<br>i.e.</p>\n<table>\n<thead>\n<tr>\n<th>T1.COL2</th>\n<th>T2.Col2</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NULL</td>\n<td>NULL</td>\n<td>False</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>NOT NULL</td>\n<td>True</td>\n</tr>\n<tr>\n<td>NOT NULL</td>\n<td>NULL</td>\n<td>True</td>\n</tr>\n<tr>\n<td>NOT NULL</td>\n<td>NOT NULL</td>\n<td>N/A</td>\n</tr>\n</tbody></table>\n<p><strong>N/A</strong> The NOT NULL AND NOT NULL logic would never occur as that would be captured by the <code>T1.Col1 != T2.Col1</code> side of <code>T1.Col2 != T2.Col2 OR (T1.Col2 IS NULL XOR T2.Col2 IS NULL)</code></p>\n<p>Before we look at fixing the where clause we will replicate the table above:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> @T1_COL2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>), @T2_COL2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      T1bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , T2bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , <span class=\"keyword\">Result</span> = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ^ <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">RESULT</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     T1bool   T2bool   Result</span></span><br><span class=\"line\"><span class=\"comment\">     1        1        0</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @T1_COL2 =<span class=\"string\">'BAR'</span>, @T2_COL2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      T1bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , T2bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , <span class=\"keyword\">Result</span> = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ^ <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">RESULT</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     T1bool   T2bool   Result</span></span><br><span class=\"line\"><span class=\"comment\">     0        1        1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @T1_COL2 =<span class=\"literal\">NULL</span>, @T2_COL2 = <span class=\"string\">'BAR'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">      T1bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , T2bool = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span></span><br><span class=\"line\">    , <span class=\"keyword\">Result</span> = <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ^ <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">RESULT</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     T1bool   T2bool   Result</span></span><br><span class=\"line\"><span class=\"comment\">     1        0        1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>So we can see that the sql code <code>CASE WHEN @T1_COL2 IS NULL THEN 1 ELSE 0 END ^ CASE WHEN @T2_COL2 IS NULL THEN 1 ELSE 0 END</code> will equal ‘1’ if either T1.Col2 is NULL or T2.Col2 is NULL but NOT both.</p>\n<p>Therefore the original piece of SQL can become:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> x</span><br><span class=\"line\"><span class=\"keyword\">as</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> T2.ID, T1.Col1, T1.Col2</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Table1 T1<span class=\"comment\">-- Source</span></span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Table2 T2 <span class=\"comment\">--Target</span></span><br><span class=\"line\">            <span class=\"keyword\">ON</span> T1.Col1 != T2.Col1 <span class=\"keyword\">OR</span> (T1.Col1 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">AND</span> T2.Col1 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> (<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T1_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ^ <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> @T2_COL2 <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) = <span class=\"number\">1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> updates</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> x</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n"},{"title":"Golang and Databases - Part 1","date":"2019-05-31T00:00:00.000Z","_content":"\nWhen I moved into the world of cloud, open source, big data etc. I quickly learned that a data engineer needs to be someone who can do just more than write advanced SQL, procs, data admin and ETL. I need to have a 'general' understanding of the back end code as well. My current position has exposed me to Golang (and python).\n\nOver the next few posts I will go into detail on how to interact with postgres and dynamo and create a simple CRUD (well maybe just CR) endpoint using clean architecture in Go.\n\n# Notes\n\nThis blog is as much for my recollection as it is to help others\nRather than installing local databases I will be using docker images\nIf I have used examples/code from other sources, I'll give it a shout-out\n\nThere are sites much better at it explaining it than me but the tools/IDEs etc. I will be using are:\n\n- OSX Terminal\n- Bash\n- Go Mod\n- Visual Studio Code (with Go extension installed including **gofmt** for formatting)\n- Docker (Postgres and Dynamo)\n- PGAdmin\n\n# My First Golang package connecting to Postgres\n\n# Getting a local pg db running\n\n> **SHOUT OUT** - [hackernoon.com](https://hackernoon.com/dont-install-postgres-docker-pull-postgres-bee20e200198)\n\nTo get golang talking to Postgres locally, we'll need some sort of pg database running. The quickest and easiest way to do this is to pull down a docker image and run it.\n\nThe following steps can accomplish this (in bash):\n\n```bash\n\ndocker pull postgres\n\nmkdir -p $HOME/docker/volumes/postgres\n\ndocker run --rm   --name pg-docker -e POSTGRES_PASSWORD=postgres_docker -d -p 5432:5432 -v $HOME/docker/volumes/postgres:/var/lib/postgresql/data  postgres\n```\n\n> The bash above has started the db running on **localhost**, port **5432**, password **postgres_docker** and physically stored at **\\$HOME/docker/volumes/postgres:/var/lib/postgresql/data**\n\nWith that up and running you should now be able to connect to it using any DB IDE tool of your choosing. I'll just use PG admin in this case.\n\nLets create a doggo table\n\n![image](part1-1.png)\n\n```sql\nCREATE TABLE demo.doggos\n(\n      \"ID\"    integer\n    , \"Name\"  text\n    , \"Breed\" text\n)\n```\n\n# Interaction from Go\n\nCreate a need go mod project in a directory of your choice.\n\n```bash\ngo mod init doggos\ntouch main.go\n```\n\nThis will initialise a new project and create the main.go file to write the code into.\n\n> I will include all of the main.go code at the end.\n\n# Imports\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n```\n\nI will use these for:\n\n- database/sql: used for db interaction\n- fmt: printing out and string manipulation\n- os: pulling environment variables\n- github.com/lib/pq: Extends the `database/sql` import to add postgres compatibility\n\n# Variables\n\n```go\nvar (\n\thost     string\n\tport     string\n\tuser     string\n\tpassword string\n\tdbname   string\n)\n\nfunc loadOSEnvs() {\n\thost = os.Getenv(\"pgHost\")\n\tport = os.Getenv(\"pgPort\")\n\tuser = os.Getenv(\"pgUser\")\n\tpassword = os.Getenv(\"pgPassword\")\n\tdbname = os.Getenv(\"pgDbName\")\n}\n```\n\nThis creates all the variables needed to connect to the pg database. The os.Getenv command will assign the variable from environment variables\n\n# Defining the table object\n\n```go\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n```\n\nThe first struct defines the 3 columns. The second creates an array of them.\n\n# Main\n\n> The rest of the logic will take place in the main func\n>\n> ```go\n> func main() {\n> \tloadOSEnvs()\n> }\n> ```\n\nI will not be raising errors/panics but just printing to the console. It will also be, somewhat uncommented.\n\n# Database Connection\n\n```go\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n    defer db.Close()\n```\n\n- psqlInfo: Connection string using the environment variables.\n- sql.Open: Attempt to connect to the db using the connection string. Connection and error variables are stored. If there is an error ii will be printed to the console.\n- dp.Ping: Attempt to ping the database. If there is an error ii will be printed to the console\n- defer: Keeps the connection open until the func using it has completed\n\n# Writing a row\n\n```go\n\tsqlStatement := `TRUNCATE TABLE demo.doggos`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsqlStatement = `INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n    }\n```\n\n- Creates a truncate script and then executes it\n- Create an insert script and then executes it\n\n# Reading the contents\n\n```go\nrows, err := db.Query(`select \"ID\", \"Name\", \"Breed\" from demo.doggos`)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdoggo := Doggo{}\n\tdoggoList := Doggos{}\n\n\tfor rows.Next() {\n\t\terr := rows.Scan(&doggo.ID, &doggo.Name, &doggo.Breed)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tdoggoList = append(doggoList, doggo)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(doggoList)\n    }\n```\n\n- db.Query: Reads the three columns and stores the contents in `rows`. If there is an error it will be printed to the console\n- doggo: Sets up an empty holder for a row. Doggo Struct was created earlier.\n- doggoList: Sets up an empty holder for a collection of rows. Doggos Struct was created earlier.\n- for rows.Next() { : The code within that block will be run for each row. If there is an error it will be printed to the console\n- rows.Scan: row Columns are mapped to the columns in the doggo variable. If there is an error it will be printed to the console\n- doggoList = append: For each doggo collect it will be added to the list of doggos\n- fmt.Println(doggoList): The List of dogs will be written to the console\n\n# Running the code\n\nWithin terminal run the following command\n\n```bash\nexport pgHost=localhost\nexport pgPort=5432\nexport pgUser=postgres\nexport pgPassword=postgres_docker\nexport pgDbName=postgres\n\ngo run .\n```\n\nThe output should look like this:\n\n```bash\n$ go run .\n[{1 Patch Lab}]\n```\n\nThe data returned `[{1 Patch Lab}]` is the one row the we inserted at the start being read out at the end.\n\n# Entire code\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n\nvar (\n\thost     string\n\tport     string\n\tuser     string\n\tpassword string\n\tdbname   string\n)\n\nfunc loadOSEnvs() {\n\thost = os.Getenv(\"pgHost\")\n\tport = os.Getenv(\"pgPort\")\n\tuser = os.Getenv(\"pgUser\")\n\tpassword = os.Getenv(\"pgPassword\")\n\tdbname = os.Getenv(\"pgDbName\")\n}\n\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n\nfunc main() {\n\tloadOSEnvs()\n\n\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdefer db.Close()\n\n\tsqlStatement := `TRUNCATE TABLE demo.doggos`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsqlStatement = `INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\n\trows, err := db.Query(`select \"ID\", \"Name\", \"Breed\" from demo.doggos`)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdoggo := Doggo{}\n\tdoggoList := Doggos{}\n\n\tfor rows.Next() {\n\t\terr := rows.Scan(&doggo.ID, &doggo.Name, &doggo.Breed)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tdoggoList = append(doggoList, doggo)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(doggoList)\n}\n```\n\n# Coming up next\n\nMy set of blogs will use this as a basis to create an HTTP service that will provide endpoints to allow a user to perform CRUD actions.\n","source":"_posts/coding/golang/Golang-and-databases-Part1.md","raw":"---\ntitle: \"Golang and Databases - Part 1\"\ndate: \"2019-05-31\"\ntags: [golang, db-services, coding]\ncategories: \n\t- [Coding - golang]\n---\n\nWhen I moved into the world of cloud, open source, big data etc. I quickly learned that a data engineer needs to be someone who can do just more than write advanced SQL, procs, data admin and ETL. I need to have a 'general' understanding of the back end code as well. My current position has exposed me to Golang (and python).\n\nOver the next few posts I will go into detail on how to interact with postgres and dynamo and create a simple CRUD (well maybe just CR) endpoint using clean architecture in Go.\n\n# Notes\n\nThis blog is as much for my recollection as it is to help others\nRather than installing local databases I will be using docker images\nIf I have used examples/code from other sources, I'll give it a shout-out\n\nThere are sites much better at it explaining it than me but the tools/IDEs etc. I will be using are:\n\n- OSX Terminal\n- Bash\n- Go Mod\n- Visual Studio Code (with Go extension installed including **gofmt** for formatting)\n- Docker (Postgres and Dynamo)\n- PGAdmin\n\n# My First Golang package connecting to Postgres\n\n# Getting a local pg db running\n\n> **SHOUT OUT** - [hackernoon.com](https://hackernoon.com/dont-install-postgres-docker-pull-postgres-bee20e200198)\n\nTo get golang talking to Postgres locally, we'll need some sort of pg database running. The quickest and easiest way to do this is to pull down a docker image and run it.\n\nThe following steps can accomplish this (in bash):\n\n```bash\n\ndocker pull postgres\n\nmkdir -p $HOME/docker/volumes/postgres\n\ndocker run --rm   --name pg-docker -e POSTGRES_PASSWORD=postgres_docker -d -p 5432:5432 -v $HOME/docker/volumes/postgres:/var/lib/postgresql/data  postgres\n```\n\n> The bash above has started the db running on **localhost**, port **5432**, password **postgres_docker** and physically stored at **\\$HOME/docker/volumes/postgres:/var/lib/postgresql/data**\n\nWith that up and running you should now be able to connect to it using any DB IDE tool of your choosing. I'll just use PG admin in this case.\n\nLets create a doggo table\n\n![image](part1-1.png)\n\n```sql\nCREATE TABLE demo.doggos\n(\n      \"ID\"    integer\n    , \"Name\"  text\n    , \"Breed\" text\n)\n```\n\n# Interaction from Go\n\nCreate a need go mod project in a directory of your choice.\n\n```bash\ngo mod init doggos\ntouch main.go\n```\n\nThis will initialise a new project and create the main.go file to write the code into.\n\n> I will include all of the main.go code at the end.\n\n# Imports\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n```\n\nI will use these for:\n\n- database/sql: used for db interaction\n- fmt: printing out and string manipulation\n- os: pulling environment variables\n- github.com/lib/pq: Extends the `database/sql` import to add postgres compatibility\n\n# Variables\n\n```go\nvar (\n\thost     string\n\tport     string\n\tuser     string\n\tpassword string\n\tdbname   string\n)\n\nfunc loadOSEnvs() {\n\thost = os.Getenv(\"pgHost\")\n\tport = os.Getenv(\"pgPort\")\n\tuser = os.Getenv(\"pgUser\")\n\tpassword = os.Getenv(\"pgPassword\")\n\tdbname = os.Getenv(\"pgDbName\")\n}\n```\n\nThis creates all the variables needed to connect to the pg database. The os.Getenv command will assign the variable from environment variables\n\n# Defining the table object\n\n```go\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n```\n\nThe first struct defines the 3 columns. The second creates an array of them.\n\n# Main\n\n> The rest of the logic will take place in the main func\n>\n> ```go\n> func main() {\n> \tloadOSEnvs()\n> }\n> ```\n\nI will not be raising errors/panics but just printing to the console. It will also be, somewhat uncommented.\n\n# Database Connection\n\n```go\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n    defer db.Close()\n```\n\n- psqlInfo: Connection string using the environment variables.\n- sql.Open: Attempt to connect to the db using the connection string. Connection and error variables are stored. If there is an error ii will be printed to the console.\n- dp.Ping: Attempt to ping the database. If there is an error ii will be printed to the console\n- defer: Keeps the connection open until the func using it has completed\n\n# Writing a row\n\n```go\n\tsqlStatement := `TRUNCATE TABLE demo.doggos`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsqlStatement = `INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n    }\n```\n\n- Creates a truncate script and then executes it\n- Create an insert script and then executes it\n\n# Reading the contents\n\n```go\nrows, err := db.Query(`select \"ID\", \"Name\", \"Breed\" from demo.doggos`)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdoggo := Doggo{}\n\tdoggoList := Doggos{}\n\n\tfor rows.Next() {\n\t\terr := rows.Scan(&doggo.ID, &doggo.Name, &doggo.Breed)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tdoggoList = append(doggoList, doggo)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(doggoList)\n    }\n```\n\n- db.Query: Reads the three columns and stores the contents in `rows`. If there is an error it will be printed to the console\n- doggo: Sets up an empty holder for a row. Doggo Struct was created earlier.\n- doggoList: Sets up an empty holder for a collection of rows. Doggos Struct was created earlier.\n- for rows.Next() { : The code within that block will be run for each row. If there is an error it will be printed to the console\n- rows.Scan: row Columns are mapped to the columns in the doggo variable. If there is an error it will be printed to the console\n- doggoList = append: For each doggo collect it will be added to the list of doggos\n- fmt.Println(doggoList): The List of dogs will be written to the console\n\n# Running the code\n\nWithin terminal run the following command\n\n```bash\nexport pgHost=localhost\nexport pgPort=5432\nexport pgUser=postgres\nexport pgPassword=postgres_docker\nexport pgDbName=postgres\n\ngo run .\n```\n\nThe output should look like this:\n\n```bash\n$ go run .\n[{1 Patch Lab}]\n```\n\nThe data returned `[{1 Patch Lab}]` is the one row the we inserted at the start being read out at the end.\n\n# Entire code\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n\nvar (\n\thost     string\n\tport     string\n\tuser     string\n\tpassword string\n\tdbname   string\n)\n\nfunc loadOSEnvs() {\n\thost = os.Getenv(\"pgHost\")\n\tport = os.Getenv(\"pgPort\")\n\tuser = os.Getenv(\"pgUser\")\n\tpassword = os.Getenv(\"pgPassword\")\n\tdbname = os.Getenv(\"pgDbName\")\n}\n\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n\nfunc main() {\n\tloadOSEnvs()\n\n\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdefer db.Close()\n\n\tsqlStatement := `TRUNCATE TABLE demo.doggos`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsqlStatement = `INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\n\trows, err := db.Query(`select \"ID\", \"Name\", \"Breed\" from demo.doggos`)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdoggo := Doggo{}\n\tdoggoList := Doggos{}\n\n\tfor rows.Next() {\n\t\terr := rows.Scan(&doggo.ID, &doggo.Name, &doggo.Breed)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tdoggoList = append(doggoList, doggo)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(doggoList)\n}\n```\n\n# Coming up next\n\nMy set of blogs will use this as a basis to create an HTTP service that will provide endpoints to allow a user to perform CRUD actions.\n","slug":"coding/golang/Golang-and-databases-Part1","published":1,"updated":"2020-03-09T23:13:01.495Z","_id":"ck7l20gx6000j1hrrgx3k7iau","comments":1,"layout":"post","photos":[],"link":"","content":"<p>When I moved into the world of cloud, open source, big data etc. I quickly learned that a data engineer needs to be someone who can do just more than write advanced SQL, procs, data admin and ETL. I need to have a ‘general’ understanding of the back end code as well. My current position has exposed me to Golang (and python).</p>\n<p>Over the next few posts I will go into detail on how to interact with postgres and dynamo and create a simple CRUD (well maybe just CR) endpoint using clean architecture in Go.</p>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><p>This blog is as much for my recollection as it is to help others<br>Rather than installing local databases I will be using docker images<br>If I have used examples/code from other sources, I’ll give it a shout-out</p>\n<p>There are sites much better at it explaining it than me but the tools/IDEs etc. I will be using are:</p>\n<ul>\n<li>OSX Terminal</li>\n<li>Bash</li>\n<li>Go Mod</li>\n<li>Visual Studio Code (with Go extension installed including <strong>gofmt</strong> for formatting)</li>\n<li>Docker (Postgres and Dynamo)</li>\n<li>PGAdmin</li>\n</ul>\n<h1 id=\"My-First-Golang-package-connecting-to-Postgres\"><a href=\"#My-First-Golang-package-connecting-to-Postgres\" class=\"headerlink\" title=\"My First Golang package connecting to Postgres\"></a>My First Golang package connecting to Postgres</h1><h1 id=\"Getting-a-local-pg-db-running\"><a href=\"#Getting-a-local-pg-db-running\" class=\"headerlink\" title=\"Getting a local pg db running\"></a>Getting a local pg db running</h1><blockquote>\n<p><strong>SHOUT OUT</strong> - <a href=\"https://hackernoon.com/dont-install-postgres-docker-pull-postgres-bee20e200198\" target=\"_blank\" rel=\"noopener\">hackernoon.com</a></p>\n</blockquote>\n<p>To get golang talking to Postgres locally, we’ll need some sort of pg database running. The quickest and easiest way to do this is to pull down a docker image and run it.</p>\n<p>The following steps can accomplish this (in bash):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker pull postgres</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/docker/volumes/postgres</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --rm   --name pg-docker -e POSTGRES_PASSWORD=postgres_docker -d -p 5432:5432 -v <span class=\"variable\">$HOME</span>/docker/volumes/postgres:/var/lib/postgresql/data  postgres</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>The bash above has started the db running on <strong>localhost</strong>, port <strong>5432</strong>, password <strong>postgres_docker</strong> and physically stored at <strong>$HOME/docker/volumes/postgres:/var/lib/postgresql/data</strong></p>\n</blockquote>\n<p>With that up and running you should now be able to connect to it using any DB IDE tool of your choosing. I’ll just use PG admin in this case.</p>\n<p>Lets create a doggo table</p>\n<p><img src=\"part1-1.png\" alt=\"image\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> demo.doggos</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"string\">\"ID\"</span>    <span class=\"built_in\">integer</span></span><br><span class=\"line\">    , <span class=\"string\">\"Name\"</span>  <span class=\"built_in\">text</span></span><br><span class=\"line\">    , <span class=\"string\">\"Breed\"</span> <span class=\"built_in\">text</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Interaction-from-Go\"><a href=\"#Interaction-from-Go\" class=\"headerlink\" title=\"Interaction from Go\"></a>Interaction from Go</h1><p>Create a need go mod project in a directory of your choice.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod init doggos</span><br><span class=\"line\">touch main.go</span><br></pre></td></tr></table></figure>\n\n<p>This will initialise a new project and create the main.go file to write the code into.</p>\n<blockquote>\n<p>I will include all of the main.go code at the end.</p>\n</blockquote>\n<h1 id=\"Imports\"><a href=\"#Imports\" class=\"headerlink\" title=\"Imports\"></a>Imports</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>I will use these for:</p>\n<ul>\n<li>database/sql: used for db interaction</li>\n<li>fmt: printing out and string manipulation</li>\n<li>os: pulling environment variables</li>\n<li>github.com/lib/pq: Extends the <code>database/sql</code> import to add postgres compatibility</li>\n</ul>\n<h1 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thost     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tport     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tuser     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpassword <span class=\"keyword\">string</span></span><br><span class=\"line\">\tdbname   <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadOSEnvs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thost = os.Getenv(<span class=\"string\">\"pgHost\"</span>)</span><br><span class=\"line\">\tport = os.Getenv(<span class=\"string\">\"pgPort\"</span>)</span><br><span class=\"line\">\tuser = os.Getenv(<span class=\"string\">\"pgUser\"</span>)</span><br><span class=\"line\">\tpassword = os.Getenv(<span class=\"string\">\"pgPassword\"</span>)</span><br><span class=\"line\">\tdbname = os.Getenv(<span class=\"string\">\"pgDbName\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This creates all the variables needed to connect to the pg database. The os.Getenv command will assign the variable from environment variables</p>\n<h1 id=\"Defining-the-table-object\"><a href=\"#Defining-the-table-object\" class=\"headerlink\" title=\"Defining the table object\"></a>Defining the table object</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br></pre></td></tr></table></figure>\n\n<p>The first struct defines the 3 columns. The second creates an array of them.</p>\n<h1 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h1><blockquote>\n<p>The rest of the logic will take place in the main func</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>I will not be raising errors/panics but just printing to the console. It will also be, somewhat uncommented.</p>\n<h1 id=\"Database-Connection\"><a href=\"#Database-Connection\" class=\"headerlink\" title=\"Database Connection\"></a>Database Connection</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psqlInfo := fmt.Sprintf(<span class=\"string\">\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\"</span>, host, port, user, password, dbname)</span><br><span class=\"line\"></span><br><span class=\"line\">db, err := sql.Open(<span class=\"string\">\"postgres\"</span>, psqlInfo)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">err = db.Ping()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">defer</span> db.Close()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>psqlInfo: Connection string using the environment variables.</li>\n<li>sql.Open: Attempt to connect to the db using the connection string. Connection and error variables are stored. If there is an error ii will be printed to the console.</li>\n<li>dp.Ping: Attempt to ping the database. If there is an error ii will be printed to the console</li>\n<li>defer: Keeps the connection open until the func using it has completed</li>\n</ul>\n<h1 id=\"Writing-a-row\"><a href=\"#Writing-a-row\" class=\"headerlink\" title=\"Writing a row\"></a>Writing a row</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlStatement := <span class=\"string\">`TRUNCATE TABLE demo.doggos`</span></span><br><span class=\"line\">_, err = db.Exec(sqlStatement)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sqlStatement = <span class=\"string\">`INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`</span></span><br><span class=\"line\">_, err = db.Exec(sqlStatement)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Creates a truncate script and then executes it</li>\n<li>Create an insert script and then executes it</li>\n</ul>\n<h1 id=\"Reading-the-contents\"><a href=\"#Reading-the-contents\" class=\"headerlink\" title=\"Reading the contents\"></a>Reading the contents</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rows, err := db.Query(<span class=\"string\">`select \"ID\", \"Name\", \"Breed\" from demo.doggos`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggo := Doggo&#123;&#125;</span><br><span class=\"line\">\tdoggoList := Doggos&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\terr := rows.Scan(&amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoggoList = <span class=\"built_in\">append</span>(doggoList, doggo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = rows.Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(doggoList)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>db.Query: Reads the three columns and stores the contents in <code>rows</code>. If there is an error it will be printed to the console</li>\n<li>doggo: Sets up an empty holder for a row. Doggo Struct was created earlier.</li>\n<li>doggoList: Sets up an empty holder for a collection of rows. Doggos Struct was created earlier.</li>\n<li>for rows.Next() { : The code within that block will be run for each row. If there is an error it will be printed to the console</li>\n<li>rows.Scan: row Columns are mapped to the columns in the doggo variable. If there is an error it will be printed to the console</li>\n<li>doggoList = append: For each doggo collect it will be added to the list of doggos</li>\n<li>fmt.Println(doggoList): The List of dogs will be written to the console</li>\n</ul>\n<h1 id=\"Running-the-code\"><a href=\"#Running-the-code\" class=\"headerlink\" title=\"Running the code\"></a>Running the code</h1><p>Within terminal run the following command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> pgHost=localhost</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPort=5432</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgUser=postgres</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPassword=postgres_docker</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgDbName=postgres</span><br><span class=\"line\"></span><br><span class=\"line\">go run .</span><br></pre></td></tr></table></figure>\n\n<p>The output should look like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go run .</span><br><span class=\"line\">[&#123;1 Patch Lab&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>The data returned <code>[{1 Patch Lab}]</code> is the one row the we inserted at the start being read out at the end.</p>\n<h1 id=\"Entire-code\"><a href=\"#Entire-code\" class=\"headerlink\" title=\"Entire code\"></a>Entire code</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thost     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tport     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tuser     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpassword <span class=\"keyword\">string</span></span><br><span class=\"line\">\tdbname   <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadOSEnvs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thost = os.Getenv(<span class=\"string\">\"pgHost\"</span>)</span><br><span class=\"line\">\tport = os.Getenv(<span class=\"string\">\"pgPort\"</span>)</span><br><span class=\"line\">\tuser = os.Getenv(<span class=\"string\">\"pgUser\"</span>)</span><br><span class=\"line\">\tpassword = os.Getenv(<span class=\"string\">\"pgPassword\"</span>)</span><br><span class=\"line\">\tdbname = os.Getenv(<span class=\"string\">\"pgDbName\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpsqlInfo := fmt.Sprintf(<span class=\"string\">\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\"</span>, host, port, user, password, dbname)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">\"postgres\"</span>, psqlInfo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement := <span class=\"string\">`TRUNCATE TABLE demo.doggos`</span></span><br><span class=\"line\">\t_, err = db.Exec(sqlStatement)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement = <span class=\"string\">`INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`</span></span><br><span class=\"line\">\t_, err = db.Exec(sqlStatement)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\trows, err := db.Query(<span class=\"string\">`select \"ID\", \"Name\", \"Breed\" from demo.doggos`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggo := Doggo&#123;&#125;</span><br><span class=\"line\">\tdoggoList := Doggos&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\terr := rows.Scan(&amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoggoList = <span class=\"built_in\">append</span>(doggoList, doggo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = rows.Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(doggoList)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Coming-up-next\"><a href=\"#Coming-up-next\" class=\"headerlink\" title=\"Coming up next\"></a>Coming up next</h1><p>My set of blogs will use this as a basis to create an HTTP service that will provide endpoints to allow a user to perform CRUD actions.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>When I moved into the world of cloud, open source, big data etc. I quickly learned that a data engineer needs to be someone who can do just more than write advanced SQL, procs, data admin and ETL. I need to have a ‘general’ understanding of the back end code as well. My current position has exposed me to Golang (and python).</p>\n<p>Over the next few posts I will go into detail on how to interact with postgres and dynamo and create a simple CRUD (well maybe just CR) endpoint using clean architecture in Go.</p>\n<h1 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h1><p>This blog is as much for my recollection as it is to help others<br>Rather than installing local databases I will be using docker images<br>If I have used examples/code from other sources, I’ll give it a shout-out</p>\n<p>There are sites much better at it explaining it than me but the tools/IDEs etc. I will be using are:</p>\n<ul>\n<li>OSX Terminal</li>\n<li>Bash</li>\n<li>Go Mod</li>\n<li>Visual Studio Code (with Go extension installed including <strong>gofmt</strong> for formatting)</li>\n<li>Docker (Postgres and Dynamo)</li>\n<li>PGAdmin</li>\n</ul>\n<h1 id=\"My-First-Golang-package-connecting-to-Postgres\"><a href=\"#My-First-Golang-package-connecting-to-Postgres\" class=\"headerlink\" title=\"My First Golang package connecting to Postgres\"></a>My First Golang package connecting to Postgres</h1><h1 id=\"Getting-a-local-pg-db-running\"><a href=\"#Getting-a-local-pg-db-running\" class=\"headerlink\" title=\"Getting a local pg db running\"></a>Getting a local pg db running</h1><blockquote>\n<p><strong>SHOUT OUT</strong> - <a href=\"https://hackernoon.com/dont-install-postgres-docker-pull-postgres-bee20e200198\" target=\"_blank\" rel=\"noopener\">hackernoon.com</a></p>\n</blockquote>\n<p>To get golang talking to Postgres locally, we’ll need some sort of pg database running. The quickest and easiest way to do this is to pull down a docker image and run it.</p>\n<p>The following steps can accomplish this (in bash):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker pull postgres</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/docker/volumes/postgres</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --rm   --name pg-docker -e POSTGRES_PASSWORD=postgres_docker -d -p 5432:5432 -v <span class=\"variable\">$HOME</span>/docker/volumes/postgres:/var/lib/postgresql/data  postgres</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>The bash above has started the db running on <strong>localhost</strong>, port <strong>5432</strong>, password <strong>postgres_docker</strong> and physically stored at <strong>$HOME/docker/volumes/postgres:/var/lib/postgresql/data</strong></p>\n</blockquote>\n<p>With that up and running you should now be able to connect to it using any DB IDE tool of your choosing. I’ll just use PG admin in this case.</p>\n<p>Lets create a doggo table</p>\n<p><img src=\"part1-1.png\" alt=\"image\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> demo.doggos</span><br><span class=\"line\">(</span><br><span class=\"line\">      <span class=\"string\">\"ID\"</span>    <span class=\"built_in\">integer</span></span><br><span class=\"line\">    , <span class=\"string\">\"Name\"</span>  <span class=\"built_in\">text</span></span><br><span class=\"line\">    , <span class=\"string\">\"Breed\"</span> <span class=\"built_in\">text</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Interaction-from-Go\"><a href=\"#Interaction-from-Go\" class=\"headerlink\" title=\"Interaction from Go\"></a>Interaction from Go</h1><p>Create a need go mod project in a directory of your choice.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod init doggos</span><br><span class=\"line\">touch main.go</span><br></pre></td></tr></table></figure>\n\n<p>This will initialise a new project and create the main.go file to write the code into.</p>\n<blockquote>\n<p>I will include all of the main.go code at the end.</p>\n</blockquote>\n<h1 id=\"Imports\"><a href=\"#Imports\" class=\"headerlink\" title=\"Imports\"></a>Imports</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>I will use these for:</p>\n<ul>\n<li>database/sql: used for db interaction</li>\n<li>fmt: printing out and string manipulation</li>\n<li>os: pulling environment variables</li>\n<li>github.com/lib/pq: Extends the <code>database/sql</code> import to add postgres compatibility</li>\n</ul>\n<h1 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thost     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tport     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tuser     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpassword <span class=\"keyword\">string</span></span><br><span class=\"line\">\tdbname   <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadOSEnvs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thost = os.Getenv(<span class=\"string\">\"pgHost\"</span>)</span><br><span class=\"line\">\tport = os.Getenv(<span class=\"string\">\"pgPort\"</span>)</span><br><span class=\"line\">\tuser = os.Getenv(<span class=\"string\">\"pgUser\"</span>)</span><br><span class=\"line\">\tpassword = os.Getenv(<span class=\"string\">\"pgPassword\"</span>)</span><br><span class=\"line\">\tdbname = os.Getenv(<span class=\"string\">\"pgDbName\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This creates all the variables needed to connect to the pg database. The os.Getenv command will assign the variable from environment variables</p>\n<h1 id=\"Defining-the-table-object\"><a href=\"#Defining-the-table-object\" class=\"headerlink\" title=\"Defining the table object\"></a>Defining the table object</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br></pre></td></tr></table></figure>\n\n<p>The first struct defines the 3 columns. The second creates an array of them.</p>\n<h1 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h1><blockquote>\n<p>The rest of the logic will take place in the main func</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>I will not be raising errors/panics but just printing to the console. It will also be, somewhat uncommented.</p>\n<h1 id=\"Database-Connection\"><a href=\"#Database-Connection\" class=\"headerlink\" title=\"Database Connection\"></a>Database Connection</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psqlInfo := fmt.Sprintf(<span class=\"string\">\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\"</span>, host, port, user, password, dbname)</span><br><span class=\"line\"></span><br><span class=\"line\">db, err := sql.Open(<span class=\"string\">\"postgres\"</span>, psqlInfo)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">err = db.Ping()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">defer</span> db.Close()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>psqlInfo: Connection string using the environment variables.</li>\n<li>sql.Open: Attempt to connect to the db using the connection string. Connection and error variables are stored. If there is an error ii will be printed to the console.</li>\n<li>dp.Ping: Attempt to ping the database. If there is an error ii will be printed to the console</li>\n<li>defer: Keeps the connection open until the func using it has completed</li>\n</ul>\n<h1 id=\"Writing-a-row\"><a href=\"#Writing-a-row\" class=\"headerlink\" title=\"Writing a row\"></a>Writing a row</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlStatement := <span class=\"string\">`TRUNCATE TABLE demo.doggos`</span></span><br><span class=\"line\">_, err = db.Exec(sqlStatement)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sqlStatement = <span class=\"string\">`INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`</span></span><br><span class=\"line\">_, err = db.Exec(sqlStatement)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Println(err)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Creates a truncate script and then executes it</li>\n<li>Create an insert script and then executes it</li>\n</ul>\n<h1 id=\"Reading-the-contents\"><a href=\"#Reading-the-contents\" class=\"headerlink\" title=\"Reading the contents\"></a>Reading the contents</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rows, err := db.Query(<span class=\"string\">`select \"ID\", \"Name\", \"Breed\" from demo.doggos`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggo := Doggo&#123;&#125;</span><br><span class=\"line\">\tdoggoList := Doggos&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\terr := rows.Scan(&amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoggoList = <span class=\"built_in\">append</span>(doggoList, doggo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = rows.Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(doggoList)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>db.Query: Reads the three columns and stores the contents in <code>rows</code>. If there is an error it will be printed to the console</li>\n<li>doggo: Sets up an empty holder for a row. Doggo Struct was created earlier.</li>\n<li>doggoList: Sets up an empty holder for a collection of rows. Doggos Struct was created earlier.</li>\n<li>for rows.Next() { : The code within that block will be run for each row. If there is an error it will be printed to the console</li>\n<li>rows.Scan: row Columns are mapped to the columns in the doggo variable. If there is an error it will be printed to the console</li>\n<li>doggoList = append: For each doggo collect it will be added to the list of doggos</li>\n<li>fmt.Println(doggoList): The List of dogs will be written to the console</li>\n</ul>\n<h1 id=\"Running-the-code\"><a href=\"#Running-the-code\" class=\"headerlink\" title=\"Running the code\"></a>Running the code</h1><p>Within terminal run the following command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> pgHost=localhost</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPort=5432</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgUser=postgres</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPassword=postgres_docker</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgDbName=postgres</span><br><span class=\"line\"></span><br><span class=\"line\">go run .</span><br></pre></td></tr></table></figure>\n\n<p>The output should look like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go run .</span><br><span class=\"line\">[&#123;1 Patch Lab&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>The data returned <code>[{1 Patch Lab}]</code> is the one row the we inserted at the start being read out at the end.</p>\n<h1 id=\"Entire-code\"><a href=\"#Entire-code\" class=\"headerlink\" title=\"Entire code\"></a>Entire code</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thost     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tport     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tuser     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpassword <span class=\"keyword\">string</span></span><br><span class=\"line\">\tdbname   <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadOSEnvs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thost = os.Getenv(<span class=\"string\">\"pgHost\"</span>)</span><br><span class=\"line\">\tport = os.Getenv(<span class=\"string\">\"pgPort\"</span>)</span><br><span class=\"line\">\tuser = os.Getenv(<span class=\"string\">\"pgUser\"</span>)</span><br><span class=\"line\">\tpassword = os.Getenv(<span class=\"string\">\"pgPassword\"</span>)</span><br><span class=\"line\">\tdbname = os.Getenv(<span class=\"string\">\"pgDbName\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpsqlInfo := fmt.Sprintf(<span class=\"string\">\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\"</span>, host, port, user, password, dbname)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">\"postgres\"</span>, psqlInfo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement := <span class=\"string\">`TRUNCATE TABLE demo.doggos`</span></span><br><span class=\"line\">\t_, err = db.Exec(sqlStatement)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement = <span class=\"string\">`INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`</span></span><br><span class=\"line\">\t_, err = db.Exec(sqlStatement)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\trows, err := db.Query(<span class=\"string\">`select \"ID\", \"Name\", \"Breed\" from demo.doggos`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggo := Doggo&#123;&#125;</span><br><span class=\"line\">\tdoggoList := Doggos&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\terr := rows.Scan(&amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoggoList = <span class=\"built_in\">append</span>(doggoList, doggo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = rows.Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(doggoList)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Coming-up-next\"><a href=\"#Coming-up-next\" class=\"headerlink\" title=\"Coming up next\"></a>Coming up next</h1><p>My set of blogs will use this as a basis to create an HTTP service that will provide endpoints to allow a user to perform CRUD actions.</p>\n"},{"title":"Golang and Databases - Part 2","date":"2019-06-01T00:00:00.000Z","_content":"\n# Details\n\nI will cover converting the previous code into a simple http endpoint that executes and returns the output.\n\n> This is not the final solution but a journey towards it and I will continue with each post.\n\n# Code changes\n\n# Rename Main\n\nAll of our database logic is currently under the main func, we'll need to replace that. So for now, lets rename **main** to **dbstuff**\n\n```go\n...\n...\ntype Doggos []Doggo\n\nfunc main() {\n\tloadOSEnvs()\n\n...\n...\n```\n\nto\n\n```go\n...\n...\ntype Doggos []Doggo\n\nfunc dbstuff() {\n\tloadOSEnvs()\n\n...\n...\n```\n\n# Imports\n\nLets add the following:\n\n- \"net/http\"\n\nThis will provide us with the needed logic do http logic\n\n```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"log\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n```\n\nto\n\n```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"log\"\n\n\t\"net/http\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n```\n\n# New main func\n\n```go\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprintln(w, \"Hello Doggo World!\")\n    })\n\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```\n\nThis new main func will create a simple index page **\"/\"**, and write `Hello Doggo World!` to it. It will then start the service up.\n\nWe can test this out by running the following in the command line\n\n```bash\ngo run .\n```\n\nThe terminal prompt wont return as it's now staying open to host the http service. Open up http://localhost:8080/ in your browser and you should see:\n\n![image](part2-1.png)\n\nNot earth shattering, but we now do have some sort of endpoint ;)\n\n# Mux (github.com/gorilla/mux)\n\nSo now we want to set up some route logic. i.e. We want to expose an endpoint that actually executes our dbstuff func, rather than attempting to write all of the routing logic ourselves, there is a third party library `github.com/gorilla/mux` that does a great job at this.\n\nSo firstly, added it to the imports:\n\n```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"log\"\n\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n```\n\nNow lets test it out by creating an indexPage func to represent the homepage and get mux to handle the routing.\n\nTime to refactor the main func slightly:\n\n```go\nfunc main() {\n\n    router := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", indexPage)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\nSo rather than creating **Hello Doggo World** in the main func, mux will provide a route to the indexPage func whenever someone hits the \"/\" endpoint.\n\nSo let's create the indexPage func:\n\n```go\nfunc indexPage(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"Hello Doggo World!\")\n}\n```\n\nThis is the original code from the old main but now sits within its own func.\n\nAs we did it before, to test it out\n\n```bash\ngo run .\n```\n\nThe terminal prompt won't return as it's now staying open to host the http service. Open up http://localhost:8080/ in your browser and you should still see:\n![image](part2-1.png)\n\n> We can also hit this from curl. From here on it, I'll be using curl, as we aren't creating a website.\n> e.g.\n>\n> ```bash\n> >curl http://localhost:8080/\n> Hello Doggo World!\n> ```\n\n# Calling the db func\n\nTime to add another handler to the main func\n\n```go\nfunc main() {\n\n    router := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", indexPage)\n\trouter.HandleFunc(\"/create-and-return-doggo\", dbstuff)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\nWe'll also need amend the the dbstuff func to accept an http writer and request. And finally, make use of the writer to respond with the doog that's been created:\n\n```bash\nfunc dbstuff() {\n```\n\nto\n\n```bash\nfunc dbstuff(w http.ResponseWriter, r *http.Request) {\n```\n\nand add `fmt.Fprintln(w, doggoList)` to the end of that dbstuff func\n\n```bash\n...\n...\n\n\tfmt.Println(doggoList)\n\tfmt.Fprintln(w, doggoList)\n}\n```\n\n# Running the code\n\nWithin terminal run the following command\n\n```bash\nexport pgHost=localhost\nexport pgPort=5432\nexport pgUser=postgres\nexport pgPassword=postgres_docker\nexport pgDbName=postgres\n\ngo run .\n```\n\nOn a new terminal window run the following\n\n```bash\nexport pgHost=localhost\nexport pgPort=5432\nexport pgUser=postgres\nexport pgPassword=postgres_docker\nexport pgDbName=postgres\n\ncurl http://localhost:8080/\ncurl http://localhost:8080/create-and-return-doggo\n```\n\nand you should see the following output\n\n![image](part2-2.png)\n\n# Entire code\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"log\"\n\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n\nvar (\n\thost     string\n\tport     string\n\tuser     string\n\tpassword string\n\tdbname   string\n)\n\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n\nfunc main() {\n\n    router := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", indexPage)\n\trouter.HandleFunc(\"/create-and-return-doggo\", dbstuff)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\nfunc indexPage(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"Hello Doggo World!\")\n}\n\nfunc dbstuff(w http.ResponseWriter, r *http.Request) {\n\tloadOSEnvs()\n\n\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdefer db.Close()\n\n\tsqlStatement := `TRUNCATE TABLE demo.doggos`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsqlStatement = `INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\n\n\n\trows, err := db.Query(`select \"ID\", \"Name\", \"Breed\" from demo.doggos`)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdoggo := Doggo{}\n\tdoggoList := Doggos{}\n\n\tfor rows.Next() {\n\t\terr := rows.Scan(&doggo.ID, &doggo.Name, &doggo.Breed)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tdoggoList = append(doggoList, doggo)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(doggoList)\n\tfmt.Fprintln(w, doggoList)\n}\n\n\nfunc loadOSEnvs() {\n\thost = os.Getenv(\"pgHost\")\n\tport = os.Getenv(\"pgPort\")\n\tuser = os.Getenv(\"pgUser\")\n\tpassword = os.Getenv(\"pgPassword\")\n\tdbname = os.Getenv(\"pgDbName\")\n}\n```\n\n# Coming up directly next\n\nCleaning the code and following some clean architectures\n","source":"_posts/coding/golang/Golang-and-databases-Part2.md","raw":"---\ntitle: \"Golang and Databases - Part 2\"\ndate: \"2019-06-01\"\ntags: [golang, db-services, coding]\ncategories: \n\t- [Coding - golang]\n---\n\n# Details\n\nI will cover converting the previous code into a simple http endpoint that executes and returns the output.\n\n> This is not the final solution but a journey towards it and I will continue with each post.\n\n# Code changes\n\n# Rename Main\n\nAll of our database logic is currently under the main func, we'll need to replace that. So for now, lets rename **main** to **dbstuff**\n\n```go\n...\n...\ntype Doggos []Doggo\n\nfunc main() {\n\tloadOSEnvs()\n\n...\n...\n```\n\nto\n\n```go\n...\n...\ntype Doggos []Doggo\n\nfunc dbstuff() {\n\tloadOSEnvs()\n\n...\n...\n```\n\n# Imports\n\nLets add the following:\n\n- \"net/http\"\n\nThis will provide us with the needed logic do http logic\n\n```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"log\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n```\n\nto\n\n```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"log\"\n\n\t\"net/http\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n```\n\n# New main func\n\n```go\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprintln(w, \"Hello Doggo World!\")\n    })\n\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```\n\nThis new main func will create a simple index page **\"/\"**, and write `Hello Doggo World!` to it. It will then start the service up.\n\nWe can test this out by running the following in the command line\n\n```bash\ngo run .\n```\n\nThe terminal prompt wont return as it's now staying open to host the http service. Open up http://localhost:8080/ in your browser and you should see:\n\n![image](part2-1.png)\n\nNot earth shattering, but we now do have some sort of endpoint ;)\n\n# Mux (github.com/gorilla/mux)\n\nSo now we want to set up some route logic. i.e. We want to expose an endpoint that actually executes our dbstuff func, rather than attempting to write all of the routing logic ourselves, there is a third party library `github.com/gorilla/mux` that does a great job at this.\n\nSo firstly, added it to the imports:\n\n```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"log\"\n\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n```\n\nNow lets test it out by creating an indexPage func to represent the homepage and get mux to handle the routing.\n\nTime to refactor the main func slightly:\n\n```go\nfunc main() {\n\n    router := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", indexPage)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\nSo rather than creating **Hello Doggo World** in the main func, mux will provide a route to the indexPage func whenever someone hits the \"/\" endpoint.\n\nSo let's create the indexPage func:\n\n```go\nfunc indexPage(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"Hello Doggo World!\")\n}\n```\n\nThis is the original code from the old main but now sits within its own func.\n\nAs we did it before, to test it out\n\n```bash\ngo run .\n```\n\nThe terminal prompt won't return as it's now staying open to host the http service. Open up http://localhost:8080/ in your browser and you should still see:\n![image](part2-1.png)\n\n> We can also hit this from curl. From here on it, I'll be using curl, as we aren't creating a website.\n> e.g.\n>\n> ```bash\n> >curl http://localhost:8080/\n> Hello Doggo World!\n> ```\n\n# Calling the db func\n\nTime to add another handler to the main func\n\n```go\nfunc main() {\n\n    router := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", indexPage)\n\trouter.HandleFunc(\"/create-and-return-doggo\", dbstuff)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\nWe'll also need amend the the dbstuff func to accept an http writer and request. And finally, make use of the writer to respond with the doog that's been created:\n\n```bash\nfunc dbstuff() {\n```\n\nto\n\n```bash\nfunc dbstuff(w http.ResponseWriter, r *http.Request) {\n```\n\nand add `fmt.Fprintln(w, doggoList)` to the end of that dbstuff func\n\n```bash\n...\n...\n\n\tfmt.Println(doggoList)\n\tfmt.Fprintln(w, doggoList)\n}\n```\n\n# Running the code\n\nWithin terminal run the following command\n\n```bash\nexport pgHost=localhost\nexport pgPort=5432\nexport pgUser=postgres\nexport pgPassword=postgres_docker\nexport pgDbName=postgres\n\ngo run .\n```\n\nOn a new terminal window run the following\n\n```bash\nexport pgHost=localhost\nexport pgPort=5432\nexport pgUser=postgres\nexport pgPassword=postgres_docker\nexport pgDbName=postgres\n\ncurl http://localhost:8080/\ncurl http://localhost:8080/create-and-return-doggo\n```\n\nand you should see the following output\n\n![image](part2-2.png)\n\n# Entire code\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"log\"\n\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n)\n\nvar (\n\thost     string\n\tport     string\n\tuser     string\n\tpassword string\n\tdbname   string\n)\n\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n\nfunc main() {\n\n    router := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", indexPage)\n\trouter.HandleFunc(\"/create-and-return-doggo\", dbstuff)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\nfunc indexPage(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"Hello Doggo World!\")\n}\n\nfunc dbstuff(w http.ResponseWriter, r *http.Request) {\n\tloadOSEnvs()\n\n\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdefer db.Close()\n\n\tsqlStatement := `TRUNCATE TABLE demo.doggos`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsqlStatement = `INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`\n\t_, err = db.Exec(sqlStatement)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\n\n\n\trows, err := db.Query(`select \"ID\", \"Name\", \"Breed\" from demo.doggos`)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tdoggo := Doggo{}\n\tdoggoList := Doggos{}\n\n\tfor rows.Next() {\n\t\terr := rows.Scan(&doggo.ID, &doggo.Name, &doggo.Breed)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tdoggoList = append(doggoList, doggo)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(doggoList)\n\tfmt.Fprintln(w, doggoList)\n}\n\n\nfunc loadOSEnvs() {\n\thost = os.Getenv(\"pgHost\")\n\tport = os.Getenv(\"pgPort\")\n\tuser = os.Getenv(\"pgUser\")\n\tpassword = os.Getenv(\"pgPassword\")\n\tdbname = os.Getenv(\"pgDbName\")\n}\n```\n\n# Coming up directly next\n\nCleaning the code and following some clean architectures\n","slug":"coding/golang/Golang-and-databases-Part2","published":1,"updated":"2020-03-09T23:13:06.741Z","_id":"ck7l20lvf000k1hrr0gnrbs3g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h1><p>I will cover converting the previous code into a simple http endpoint that executes and returns the output.</p>\n<blockquote>\n<p>This is not the final solution but a journey towards it and I will continue with each post.</p>\n</blockquote>\n<h1 id=\"Code-changes\"><a href=\"#Code-changes\" class=\"headerlink\" title=\"Code changes\"></a>Code changes</h1><h1 id=\"Rename-Main\"><a href=\"#Rename-Main\" class=\"headerlink\" title=\"Rename Main\"></a>Rename Main</h1><p>All of our database logic is currently under the main func, we’ll need to replace that. So for now, lets rename <strong>main</strong> to <strong>dbstuff</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>to</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dbstuff</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Imports\"><a href=\"#Imports\" class=\"headerlink\" title=\"Imports\"></a>Imports</h1><p>Lets add the following:</p>\n<ul>\n<li>“net/http”</li>\n</ul>\n<p>This will provide us with the needed logic do http logic</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>to</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"New-main-func\"><a href=\"#New-main-func\" class=\"headerlink\" title=\"New main func\"></a>New main func</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        fmt.Fprintln(w, <span class=\"string\">\"Hello Doggo World!\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This new main func will create a simple index page <strong>“/“</strong>, and write <code>Hello Doggo World!</code> to it. It will then start the service up.</p>\n<p>We can test this out by running the following in the command line</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run .</span><br></pre></td></tr></table></figure>\n\n<p>The terminal prompt wont return as it’s now staying open to host the http service. Open up <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a> in your browser and you should see:</p>\n<p><img src=\"part2-1.png\" alt=\"image\"></p>\n<p>Not earth shattering, but we now do have some sort of endpoint ;)</p>\n<h1 id=\"Mux-github-com-gorilla-mux\"><a href=\"#Mux-github-com-gorilla-mux\" class=\"headerlink\" title=\"Mux (github.com/gorilla/mux)\"></a>Mux (github.com/gorilla/mux)</h1><p>So now we want to set up some route logic. i.e. We want to expose an endpoint that actually executes our dbstuff func, rather than attempting to write all of the routing logic ourselves, there is a third party library <code>github.com/gorilla/mux</code> that does a great job at this.</p>\n<p>So firstly, added it to the imports:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>Now lets test it out by creating an indexPage func to represent the homepage and get mux to handle the routing.</p>\n<p>Time to refactor the main func slightly:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    router := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/\"</span>, indexPage)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>So rather than creating <strong>Hello Doggo World</strong> in the main func, mux will provide a route to the indexPage func whenever someone hits the “/“ endpoint.</p>\n<p>So let’s create the indexPage func:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">indexPage</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintln(w, <span class=\"string\">\"Hello Doggo World!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This is the original code from the old main but now sits within its own func.</p>\n<p>As we did it before, to test it out</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run .</span><br></pre></td></tr></table></figure>\n\n<p>The terminal prompt won’t return as it’s now staying open to host the http service. Open up <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a> in your browser and you should still see:<br><img src=\"part2-1.png\" alt=\"image\"></p>\n<blockquote>\n<p>We can also hit this from curl. From here on it, I’ll be using curl, as we aren’t creating a website.<br>e.g.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;curl http://localhost:8080/</span><br><span class=\"line\">Hello Doggo World!</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Calling-the-db-func\"><a href=\"#Calling-the-db-func\" class=\"headerlink\" title=\"Calling the db func\"></a>Calling the db func</h1><p>Time to add another handler to the main func</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    router := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/\"</span>, indexPage)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/create-and-return-doggo\"</span>, dbstuff)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We’ll also need amend the the dbstuff func to accept an http writer and request. And finally, make use of the writer to respond with the doog that’s been created:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func <span class=\"function\"><span class=\"title\">dbstuff</span></span>() &#123;</span><br></pre></td></tr></table></figure>\n\n<p>to</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func dbstuff(w http.ResponseWriter, r *http.Request) &#123;</span><br></pre></td></tr></table></figure>\n\n<p>and add <code>fmt.Fprintln(w, doggoList)</code> to the end of that dbstuff func</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(doggoList)</span><br><span class=\"line\">\tfmt.Fprintln(w, doggoList)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Running-the-code\"><a href=\"#Running-the-code\" class=\"headerlink\" title=\"Running the code\"></a>Running the code</h1><p>Within terminal run the following command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> pgHost=localhost</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPort=5432</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgUser=postgres</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPassword=postgres_docker</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgDbName=postgres</span><br><span class=\"line\"></span><br><span class=\"line\">go run .</span><br></pre></td></tr></table></figure>\n\n<p>On a new terminal window run the following</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> pgHost=localhost</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPort=5432</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgUser=postgres</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPassword=postgres_docker</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgDbName=postgres</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:8080/</span><br><span class=\"line\">curl http://localhost:8080/create-and-return-doggo</span><br></pre></td></tr></table></figure>\n\n<p>and you should see the following output</p>\n<p><img src=\"part2-2.png\" alt=\"image\"></p>\n<h1 id=\"Entire-code\"><a href=\"#Entire-code\" class=\"headerlink\" title=\"Entire code\"></a>Entire code</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thost     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tport     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tuser     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpassword <span class=\"keyword\">string</span></span><br><span class=\"line\">\tdbname   <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    router := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/\"</span>, indexPage)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/create-and-return-doggo\"</span>, dbstuff)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">indexPage</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintln(w, <span class=\"string\">\"Hello Doggo World!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dbstuff</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpsqlInfo := fmt.Sprintf(<span class=\"string\">\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\"</span>, host, port, user, password, dbname)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">\"postgres\"</span>, psqlInfo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement := <span class=\"string\">`TRUNCATE TABLE demo.doggos`</span></span><br><span class=\"line\">\t_, err = db.Exec(sqlStatement)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement = <span class=\"string\">`INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`</span></span><br><span class=\"line\">\t_, err = db.Exec(sqlStatement)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\trows, err := db.Query(<span class=\"string\">`select \"ID\", \"Name\", \"Breed\" from demo.doggos`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggo := Doggo&#123;&#125;</span><br><span class=\"line\">\tdoggoList := Doggos&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\terr := rows.Scan(&amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoggoList = <span class=\"built_in\">append</span>(doggoList, doggo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = rows.Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(doggoList)</span><br><span class=\"line\">\tfmt.Fprintln(w, doggoList)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadOSEnvs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thost = os.Getenv(<span class=\"string\">\"pgHost\"</span>)</span><br><span class=\"line\">\tport = os.Getenv(<span class=\"string\">\"pgPort\"</span>)</span><br><span class=\"line\">\tuser = os.Getenv(<span class=\"string\">\"pgUser\"</span>)</span><br><span class=\"line\">\tpassword = os.Getenv(<span class=\"string\">\"pgPassword\"</span>)</span><br><span class=\"line\">\tdbname = os.Getenv(<span class=\"string\">\"pgDbName\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Coming-up-directly-next\"><a href=\"#Coming-up-directly-next\" class=\"headerlink\" title=\"Coming up directly next\"></a>Coming up directly next</h1><p>Cleaning the code and following some clean architectures</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h1><p>I will cover converting the previous code into a simple http endpoint that executes and returns the output.</p>\n<blockquote>\n<p>This is not the final solution but a journey towards it and I will continue with each post.</p>\n</blockquote>\n<h1 id=\"Code-changes\"><a href=\"#Code-changes\" class=\"headerlink\" title=\"Code changes\"></a>Code changes</h1><h1 id=\"Rename-Main\"><a href=\"#Rename-Main\" class=\"headerlink\" title=\"Rename Main\"></a>Rename Main</h1><p>All of our database logic is currently under the main func, we’ll need to replace that. So for now, lets rename <strong>main</strong> to <strong>dbstuff</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>to</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dbstuff</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Imports\"><a href=\"#Imports\" class=\"headerlink\" title=\"Imports\"></a>Imports</h1><p>Lets add the following:</p>\n<ul>\n<li>“net/http”</li>\n</ul>\n<p>This will provide us with the needed logic do http logic</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>to</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"New-main-func\"><a href=\"#New-main-func\" class=\"headerlink\" title=\"New main func\"></a>New main func</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        fmt.Fprintln(w, <span class=\"string\">\"Hello Doggo World!\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This new main func will create a simple index page <strong>“/“</strong>, and write <code>Hello Doggo World!</code> to it. It will then start the service up.</p>\n<p>We can test this out by running the following in the command line</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run .</span><br></pre></td></tr></table></figure>\n\n<p>The terminal prompt wont return as it’s now staying open to host the http service. Open up <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a> in your browser and you should see:</p>\n<p><img src=\"part2-1.png\" alt=\"image\"></p>\n<p>Not earth shattering, but we now do have some sort of endpoint ;)</p>\n<h1 id=\"Mux-github-com-gorilla-mux\"><a href=\"#Mux-github-com-gorilla-mux\" class=\"headerlink\" title=\"Mux (github.com/gorilla/mux)\"></a>Mux (github.com/gorilla/mux)</h1><p>So now we want to set up some route logic. i.e. We want to expose an endpoint that actually executes our dbstuff func, rather than attempting to write all of the routing logic ourselves, there is a third party library <code>github.com/gorilla/mux</code> that does a great job at this.</p>\n<p>So firstly, added it to the imports:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>Now lets test it out by creating an indexPage func to represent the homepage and get mux to handle the routing.</p>\n<p>Time to refactor the main func slightly:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    router := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/\"</span>, indexPage)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>So rather than creating <strong>Hello Doggo World</strong> in the main func, mux will provide a route to the indexPage func whenever someone hits the “/“ endpoint.</p>\n<p>So let’s create the indexPage func:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">indexPage</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintln(w, <span class=\"string\">\"Hello Doggo World!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This is the original code from the old main but now sits within its own func.</p>\n<p>As we did it before, to test it out</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run .</span><br></pre></td></tr></table></figure>\n\n<p>The terminal prompt won’t return as it’s now staying open to host the http service. Open up <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a> in your browser and you should still see:<br><img src=\"part2-1.png\" alt=\"image\"></p>\n<blockquote>\n<p>We can also hit this from curl. From here on it, I’ll be using curl, as we aren’t creating a website.<br>e.g.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;curl http://localhost:8080/</span><br><span class=\"line\">Hello Doggo World!</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h1 id=\"Calling-the-db-func\"><a href=\"#Calling-the-db-func\" class=\"headerlink\" title=\"Calling the db func\"></a>Calling the db func</h1><p>Time to add another handler to the main func</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    router := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/\"</span>, indexPage)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/create-and-return-doggo\"</span>, dbstuff)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We’ll also need amend the the dbstuff func to accept an http writer and request. And finally, make use of the writer to respond with the doog that’s been created:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func <span class=\"function\"><span class=\"title\">dbstuff</span></span>() &#123;</span><br></pre></td></tr></table></figure>\n\n<p>to</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func dbstuff(w http.ResponseWriter, r *http.Request) &#123;</span><br></pre></td></tr></table></figure>\n\n<p>and add <code>fmt.Fprintln(w, doggoList)</code> to the end of that dbstuff func</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(doggoList)</span><br><span class=\"line\">\tfmt.Fprintln(w, doggoList)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Running-the-code\"><a href=\"#Running-the-code\" class=\"headerlink\" title=\"Running the code\"></a>Running the code</h1><p>Within terminal run the following command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> pgHost=localhost</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPort=5432</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgUser=postgres</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPassword=postgres_docker</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgDbName=postgres</span><br><span class=\"line\"></span><br><span class=\"line\">go run .</span><br></pre></td></tr></table></figure>\n\n<p>On a new terminal window run the following</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> pgHost=localhost</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPort=5432</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgUser=postgres</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgPassword=postgres_docker</span><br><span class=\"line\"><span class=\"built_in\">export</span> pgDbName=postgres</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:8080/</span><br><span class=\"line\">curl http://localhost:8080/create-and-return-doggo</span><br></pre></td></tr></table></figure>\n\n<p>and you should see the following output</p>\n<p><img src=\"part2-2.png\" alt=\"image\"></p>\n<h1 id=\"Entire-code\"><a href=\"#Entire-code\" class=\"headerlink\" title=\"Entire code\"></a>Entire code</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thost     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tport     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tuser     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpassword <span class=\"keyword\">string</span></span><br><span class=\"line\">\tdbname   <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    router := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/\"</span>, indexPage)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/create-and-return-doggo\"</span>, dbstuff)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, router))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">indexPage</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintln(w, <span class=\"string\">\"Hello Doggo World!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dbstuff</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpsqlInfo := fmt.Sprintf(<span class=\"string\">\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\"</span>, host, port, user, password, dbname)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">\"postgres\"</span>, psqlInfo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> db.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement := <span class=\"string\">`TRUNCATE TABLE demo.doggos`</span></span><br><span class=\"line\">\t_, err = db.Exec(sqlStatement)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement = <span class=\"string\">`INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES (1,'Patch','Lab')`</span></span><br><span class=\"line\">\t_, err = db.Exec(sqlStatement)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\trows, err := db.Query(<span class=\"string\">`select \"ID\", \"Name\", \"Breed\" from demo.doggos`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggo := Doggo&#123;&#125;</span><br><span class=\"line\">\tdoggoList := Doggos&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\terr := rows.Scan(&amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoggoList = <span class=\"built_in\">append</span>(doggoList, doggo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = rows.Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(doggoList)</span><br><span class=\"line\">\tfmt.Fprintln(w, doggoList)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadOSEnvs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thost = os.Getenv(<span class=\"string\">\"pgHost\"</span>)</span><br><span class=\"line\">\tport = os.Getenv(<span class=\"string\">\"pgPort\"</span>)</span><br><span class=\"line\">\tuser = os.Getenv(<span class=\"string\">\"pgUser\"</span>)</span><br><span class=\"line\">\tpassword = os.Getenv(<span class=\"string\">\"pgPassword\"</span>)</span><br><span class=\"line\">\tdbname = os.Getenv(<span class=\"string\">\"pgDbName\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Coming-up-directly-next\"><a href=\"#Coming-up-directly-next\" class=\"headerlink\" title=\"Coming up directly next\"></a>Coming up directly next</h1><p>Cleaning the code and following some clean architectures</p>\n"},{"title":"Golang and Databases - Part 3","date":"2019-06-08T00:00:00.000Z","_content":"\n# Details\n\nI will cover applying some clean architecture to my prior post\n\n> This is not the final solution but a journey towards it and I will continue with each post.\n\nFrom this point on though, I will reference my [github project](https://github.com/davidtstafford/golang-doggos/tree/blog-post-3)\n\n> **SHOUT OUT** - A lot of inspiration came from this github account [corylanou](https://github.com/corylanou/tns-restful-json-api)\n\n# Code changes\n\n> Before I go any further. There are many different methods for clean architecture and numerous blogs, sites, books etc. that go into great detail. some examples would be DDD (domain driven design), \"The Ben Johnson way\", \"The Bill Kennedy way, POD (Package Oriented Design). Frankly, the list is ever growing, and I don't plan to push you down any particular route. Follow what works for you and/or your company. The important thing is that your code: doesn't become overly complicated; parts can be swapped out with ease, a separation between business domains .... and I guess you get where i'm going with this.\n\n> Also, the main.go file will be radically changed by the end, so don't worry too much about it during the refactor process.\n\n# Model\n\nSo the first thing I'll focus on, is to pull out the structs that define the data model. By pulling them out it allows them to be decoupled from the main logic and from the database logic.\n\nLet's mess around with the directory structure a bit and create a models folder and create a file **doggos.go**. So you should end up with somethings like this:\n\n```\n/ models\n    - doggos.go\n- main.go\n- go.mod\n- go.sum\n```\n\nMigrate the code\n\n```go\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n```\n\nOf course this won't do much on it's own. It needs some fluff at the start. Now that code has been separated we need to expose the model. The entire doggos.go will look like this:\n\n```go\npackage models\n\nfunc Main() *Doggos {\n\treturn &Doggos{}\n}\n\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n```\n\nNote that I have changed the package name of this to be **models** .. This will decouple it from the main package and therefore would need to be imported to be used. The function will return a pointer to the array of type Doggo.\n\n# Repositories (DB connections)\n\nNow bare with me for a while on this one. I am going to pull out the DB logic and create a new directory structure and a few new files. I'll be creating a repositories and postgres folder, and repositories.go and postgres.go file. So you should end up with somethings like this:\n\n```\n/ models\n    - doggos.go\n/ repositories\n    / postgres\n        - postgres.go\n    - repositories.go\n- main.go\n- go.mod\n- go.sum\n```\n\n# repositories.go / interface\n\nThe repositories.go file, is a very simplistic file that holds an interface to describe the access methods for the model we have just created. In this file we will create our first import to pull in the model.\n\nThe entire code will be:\n\n```go\npackage repositories\n\nimport (\n\t\"github.com/davidtstafford/golang-doggos/models\"\n)\n\ntype DBClient interface {\n\tGetDoggos() (*models.Doggos, error)\n\tWriteDoggo(doggo *models.Doggo) error\n\tDeleteDoggo(doggo *models.Doggo) error\n}\n```\n\nAgain we have a different package name, which will be imported at a later date.\n\nNotice that I am created the import `github.com/davidtstafford/golang-doggos/models`. My main modeule is now `module github.com/davidtstafford/golang-doggos` and defined in the go.mod file. It is within my github space and \"models\" has been created within it.\n\nThe **DBClient** interface describes the three functions that would be used to interact with the Doggo db model defined within the models package (models.go)\n\nSo we have now defined a client that provides three interface functions:\n\n1. GetDoggos will return the defined array of Doggos in the model.\n2. WriteDoggo will take in a defined doggo from the model and will write it.\n3. DeleteDoggo will take in a defined doggo from the model and will delete it.\n\nAll of these functions can return an error\n\n# The client / postgres.go\n\nThe majority of the following code is a refactor of the database code from the prior main.go file.\n\nFluff at the start:\n\n```go\npackage postgres\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n\n\t\"github.com/davidtstafford/golang-doggos/models\"\n\trepo \"github.com/davidtstafford/golang-doggos/repositories\"\n)\n\nvar (\n\thost     string\n\tport     string\n\tuser     string\n\tpassword string\n\tdbname   string\n)\n\ntype postgresRepo struct {\n\tclient *sql.DB\n}\n```\n\nMost of this you should recognise already. The differences so far are: imported the models and repositories and created a struct to represent the client.\n\n# New Client function\n\n```go\nfunc NewClient() (repo.DBClient, error) {\n\tloadOSEnvs()\n\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\terr = db.Ping()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &postgresRepo{client: db}, nil\n}\n\nfunc loadOSEnvs() {\n\thost = os.Getenv(\"pgHost\")\n\tport = os.Getenv(\"pgPort\")\n\tuser = os.Getenv(\"pgUser\")\n\tpassword = os.Getenv(\"pgPassword\")\n\tdbname = os.Getenv(\"pgDbName\")\n}\n```\n\nYou will have seen nearly all of this code in my prior posts. The new aspects are the func itself `func NewClient() (repo.DBClient, error)` and therefore it's return `return &postgresRepo{client: db}, nil`. I think the easiest way to explain what's happening here is: This method is returning back a Database Client which will allow packages to interact with it. In my dabbling C# days this was similar to me providing something that can be instantiated. Therefore at a later stage we'll be able to build another package add something like\n\n```go\ndbclient, err := postgres.NewClient()\nif err != nil\n{\n    //Oh no .. code went kaboom\n}\n// Then invoke some function eg....\ndbclient.WriteSomeDataToDoggo(SomeDoggoData)\n```\n\n# Get function\n\nThis is a new chunk of code. There's nothing especially magic about it, but I figured it made sense to have a simple method that churns out all the doggos in the database. So here's the code\n\n```go\nfunc (repo *postgresRepo) GetDoggos() (*models.Doggos, error) {\n\n\tdoggo := models.Doggo{}\n\tdoggoList := make(models.Doggos, 0)\n\n\trows, err := repo.client.Query(`select \"ID\", \"Name\", \"Breed\" from demo.doggos`)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor rows.Next() {\n\t\terr := rows.Scan(&doggo.ID, &doggo.Name, &doggo.Breed)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdoggoList = append(doggoList, doggo)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo.client.Close()\n\n\treturn &doggoList, nil\n}\n```\n\nIm not going to go into every line as hopefully most of it is obvious, but here's a run down of some of the lines:\n\n- `(repo *postgresRepo) GetDoggos() (*models.Doggos, error)`\n- - As mentioned before, the DBClient will be instantiated. That is the 'repo' variable. Func is called 'GetDoggos' and it will return an array of Doggos as defined in the model file and will also return an error if there is one\n- `doggo := models.Doggo{}`\n- - Creates a placeholder variable for an empty doggo row\n- `doggoList := make(models.Doggos, 0)`\n- - Creates a placeholder variable for an empty set (array) of doggos\n- Doggos are then read, and add to the array 1 by 1 (not the most efficient method, but for this demo, it does the job)\n- DB connection closed\n- Array is returned\n\n# Write & Delete functions\n\nSelf explanatory. So here is the code with zero explanation ;)\n\n```go\nfunc (repo *postgresRepo) WriteDoggo(doggo *models.Doggo) error {\n\n\tsqlStatement := `INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES ($1, $2, $3)`\n\t_, err := repo.client.Exec(sqlStatement, &doggo.ID, &doggo.Name, &doggo.Breed)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc (repo *postgresRepo) DeleteDoggo(doggo *models.Doggo) error {\n\n\tsqlStatement := `DELETE FROM demo.doggos WHERE \"ID\" = $1`\n\t_, err := repo.client.Exec(sqlStatement, &doggo.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```\n\n# Routes\n\nIn my previous post I had only two routes and therefore had this code:\n\n```go\n    router := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", indexPage)\n\trouter.HandleFunc(\"/create-and-return-doggo\", dbstuff)\n```\n\nIt did the job, but we could make it cleaner. If we imagine that there there are multiple methods then we're going to still end up with a main piece of execution logic that's going to have numerous lines of code to perform the routing. So let's strip this out and create two more files at the top level, router.go and routes.go. So you should end up with somethings like this:\n\n```\n/ models\n    - doggos.go\n/ repositories\n    / postgres\n        - postgres.go\n    - repositories.go\n- main.go\n- go.mod\n- go.sum\n- router.go\n- routes.go\n```\n\nIn a similar fashion to the the model, we are extracting this logic into a separate file, however on this occasion it is still going to be tied into the main package.\n\nThe routes file will have the following code:\n\n```go\npackage main\n\nimport \"net/http\"\n\ntype Route struct {\nName        string\nMethod      string\nPattern     string\nHandlerFunc http.HandlerFunc\n}\n\ntype Routes []Route\n\nvar routes = Routes{\nRoute{\n\t\"DoggoIndex\",\n\t\"GET\",\n\t\"/Doggos\",\n\tDoggoIndex,\n},\nRoute{\n\t\"DoggoCreate\",\n\t\"POST\",\n\t\"/Doggos\",\n\tAddDoggo,\n},\nRoute{\n\t\"DoggoDelete\",\n\t\"DELETE\",\n\t\"/Doggos\",\n\tDeleteDoggo,\n},\n}\n```\n\n1.  We import 'net/http' for the http handler logic\n2.  We create a struct to represent a route.. A name, rest method, URL extension and the func that it will call (route to)\n3.  Finally we create the three routes that represent our three methods for Get, Write and Delete ..\n\nIn the future we could add many more .. one example could be\n\n```go\nRoute{\n\t\"GetDoggoByID\",\n\t\"GET\",\n\t\"/Doggos/{DoggoId}\",\n\tGetDoggo,\n},\n```\n\nThis would look up a particular row with the given ID. That's one for a future post.\n\nNow we need to add the actual router logic again using mux as we did last time. So the following code will be added to the router.go file:\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc NewRouter() *mux.Router {\n\trouter := mux.NewRouter().StrictSlash(true)\n\tfor _, route := range routes {\n\t\tvar handler http.Handler\n\n\t\thandler = route.HandlerFunc\n\n\t\trouter.\n\t\t\tMethods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(handler)\n\n\t}\n\treturn router\n}\n```\n\nUsing Mux, for each of the routes that we previously created, we are now actually creating the router. You may be wondering what these routes are actually pointing to though. DoggoIndex, AddDoggo, DeleteDoggo don't actually exists as functions. In fact, there is no logic that sits between the router and the DB calls. This is where the handlers come in. ->\n\n#Handlers\n\nTime to create another file at the top level. handlers.go. So you should end up with somethings like this:\n\n```\n/ models\n    - doggos.go\n/ repositories\n    / postgres\n        - postgres.go\n    - repositories.go\n- main.go\n- go.mod\n- go.sum\n- router.go\n- routes.go\n- handlers.go\n```\n\nI've added the following code to it:\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\tmo \"github.com/davidtstafford/golang-doggos/models\"\n\trepo \"github.com/davidtstafford/golang-doggos/repositories/postgres\"\n)\n\nfunc DoggoIndex(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n\tdbClient, _ := repo.NewClient()\n\n\tdoggoList, _ := dbClient.GetDoggos()\n\n\tif err := json.NewEncoder(w).Encode(doggoList); err != nil {\n\t\tpanic(err)\n\t}\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc AddDoggo(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n\tdbClient, _ := repo.NewClient()\n\tdoggo := &mo.Doggo{}\n\tbody, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576))\n\n\tfmt.Println(body)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := r.Body.Close(); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := json.Unmarshal(body, doggo); err != nil {\n\t\tw.WriteHeader(http.StatusUnprocessableEntity)\n\t\tif err := json.NewEncoder(w).Encode(err); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\terr = dbClient.WriteDoggo(doggo)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteDoggo(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n\tdbClient, _ := repo.NewClient()\n\tdoggo := &mo.Doggo{}\n\tbody, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576))\n\n\tfmt.Println(body)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := r.Body.Close(); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := json.Unmarshal(body, doggo); err != nil {\n\t\tw.WriteHeader(http.StatusUnprocessableEntity)\n\t\tif err := json.NewEncoder(w).Encode(err); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\terr = dbClient.DeleteDoggo(doggo)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n}\n```\n\nI'm being a bit lazy here and not breaking down the code. You may also notice that I could have done a much better job and handling and reporting errors.\n\nLooking at the code then:\n\n1. The imports contain a reference to models and postgres (and remember the routers are part of the same package). Therefore, everything is now brought together\n2. All funcs do a similar thing. They will init to Database Client and then call its relevant function and the handler returns the data.\n3. For DoggoIndex, it will push the output of an array of doggos into json and write it\n4. For AddDoggo, it will take the doggo object and pass it onto the client. Once written it will return the success\n5. For DeleteDoggo, it will take the doggo object and pass it onto the client. Once deleted it will return the success\n\nIt may look complicated but it is relatively straight forward.\n\n# Main\n\nFinally the main file.\n\nHere's the code:\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\trouter := NewRouter()\n\tlog.Fatal(http.ListenAndServe(\":7000\", router))\n}\n```\n\nThat's what happens well all the rest of the code is moved else where. ;)\n\nTime to build\n\n# Output\n\nWe have three http methods that we can can. I'll use the following example:\n\n```bash\ncurl http://localhost:7000/Doggos -X GET\n\ncurl http://localhost:7000/Doggos -X POST -d '{\"ID\":\"1\", \"Name\":\"Blake\", \"Breed\":\"Pug\"}'\ncurl http://localhost:7000/Doggos -X POST -d '{\"ID\":\"2\", \"Name\":\"Patch\", \"Breed\":\"Lab\"}'\ncurl http://localhost:7000/Doggos -X POST -d '{\"ID\":\"3\", \"Name\":\"Rosie\", \"Breed\":\"Terrier\"}'\n\ncurl http://localhost:7000/Doggos -X GET\n\ncurl http://localhost:7000/Doggos -X DELETE -d '{\"ID\":\"2\"}'\n\ncurl http://localhost:7000/Doggos -X GET\n```\n\nThe will show us the blank collection at the start. Then adding three doggos and then removing one.\n\n.. and here's my output (note I piped the output json to format it)\n\n![image](part3-1.png)\n\n# Up Next\n\nI have a few things that i still need to show:\n\n- Logging\n- Better error handling (e.g. I forgot to export my envs and was running around in circles for a while whilst making this)\n- Unit Tests\n- Showing how to swap out databases .. eg going from postgres to dynamo\n\nMore than likely my next post will apply basic logging on the http side and I'll show how the clean architecture makes it very easy to swap databases.\n","source":"_posts/coding/golang/Golang-and-databases-Part3.md","raw":"---\ntitle: \"Golang and Databases - Part 3\"\ndate: \"2019-06-08\"\ntags: [golang, db-services, coding]\ncategories: \n\t- [Coding - golang]\n---\n\n# Details\n\nI will cover applying some clean architecture to my prior post\n\n> This is not the final solution but a journey towards it and I will continue with each post.\n\nFrom this point on though, I will reference my [github project](https://github.com/davidtstafford/golang-doggos/tree/blog-post-3)\n\n> **SHOUT OUT** - A lot of inspiration came from this github account [corylanou](https://github.com/corylanou/tns-restful-json-api)\n\n# Code changes\n\n> Before I go any further. There are many different methods for clean architecture and numerous blogs, sites, books etc. that go into great detail. some examples would be DDD (domain driven design), \"The Ben Johnson way\", \"The Bill Kennedy way, POD (Package Oriented Design). Frankly, the list is ever growing, and I don't plan to push you down any particular route. Follow what works for you and/or your company. The important thing is that your code: doesn't become overly complicated; parts can be swapped out with ease, a separation between business domains .... and I guess you get where i'm going with this.\n\n> Also, the main.go file will be radically changed by the end, so don't worry too much about it during the refactor process.\n\n# Model\n\nSo the first thing I'll focus on, is to pull out the structs that define the data model. By pulling them out it allows them to be decoupled from the main logic and from the database logic.\n\nLet's mess around with the directory structure a bit and create a models folder and create a file **doggos.go**. So you should end up with somethings like this:\n\n```\n/ models\n    - doggos.go\n- main.go\n- go.mod\n- go.sum\n```\n\nMigrate the code\n\n```go\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n```\n\nOf course this won't do much on it's own. It needs some fluff at the start. Now that code has been separated we need to expose the model. The entire doggos.go will look like this:\n\n```go\npackage models\n\nfunc Main() *Doggos {\n\treturn &Doggos{}\n}\n\ntype Doggo struct {\n\tID    string `json:\"ID\"`\n\tName  string `json:\"Name\"`\n\tBreed string `json:\"Breed\"`\n}\n\ntype Doggos []Doggo\n```\n\nNote that I have changed the package name of this to be **models** .. This will decouple it from the main package and therefore would need to be imported to be used. The function will return a pointer to the array of type Doggo.\n\n# Repositories (DB connections)\n\nNow bare with me for a while on this one. I am going to pull out the DB logic and create a new directory structure and a few new files. I'll be creating a repositories and postgres folder, and repositories.go and postgres.go file. So you should end up with somethings like this:\n\n```\n/ models\n    - doggos.go\n/ repositories\n    / postgres\n        - postgres.go\n    - repositories.go\n- main.go\n- go.mod\n- go.sum\n```\n\n# repositories.go / interface\n\nThe repositories.go file, is a very simplistic file that holds an interface to describe the access methods for the model we have just created. In this file we will create our first import to pull in the model.\n\nThe entire code will be:\n\n```go\npackage repositories\n\nimport (\n\t\"github.com/davidtstafford/golang-doggos/models\"\n)\n\ntype DBClient interface {\n\tGetDoggos() (*models.Doggos, error)\n\tWriteDoggo(doggo *models.Doggo) error\n\tDeleteDoggo(doggo *models.Doggo) error\n}\n```\n\nAgain we have a different package name, which will be imported at a later date.\n\nNotice that I am created the import `github.com/davidtstafford/golang-doggos/models`. My main modeule is now `module github.com/davidtstafford/golang-doggos` and defined in the go.mod file. It is within my github space and \"models\" has been created within it.\n\nThe **DBClient** interface describes the three functions that would be used to interact with the Doggo db model defined within the models package (models.go)\n\nSo we have now defined a client that provides three interface functions:\n\n1. GetDoggos will return the defined array of Doggos in the model.\n2. WriteDoggo will take in a defined doggo from the model and will write it.\n3. DeleteDoggo will take in a defined doggo from the model and will delete it.\n\nAll of these functions can return an error\n\n# The client / postgres.go\n\nThe majority of the following code is a refactor of the database code from the prior main.go file.\n\nFluff at the start:\n\n```go\npackage postgres\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\n\t// Used in conjunction with database/sql\" to provide Postgres driver\n\t_ \"github.com/lib/pq\"\n\n\t\"github.com/davidtstafford/golang-doggos/models\"\n\trepo \"github.com/davidtstafford/golang-doggos/repositories\"\n)\n\nvar (\n\thost     string\n\tport     string\n\tuser     string\n\tpassword string\n\tdbname   string\n)\n\ntype postgresRepo struct {\n\tclient *sql.DB\n}\n```\n\nMost of this you should recognise already. The differences so far are: imported the models and repositories and created a struct to represent the client.\n\n# New Client function\n\n```go\nfunc NewClient() (repo.DBClient, error) {\n\tloadOSEnvs()\n\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\terr = db.Ping()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &postgresRepo{client: db}, nil\n}\n\nfunc loadOSEnvs() {\n\thost = os.Getenv(\"pgHost\")\n\tport = os.Getenv(\"pgPort\")\n\tuser = os.Getenv(\"pgUser\")\n\tpassword = os.Getenv(\"pgPassword\")\n\tdbname = os.Getenv(\"pgDbName\")\n}\n```\n\nYou will have seen nearly all of this code in my prior posts. The new aspects are the func itself `func NewClient() (repo.DBClient, error)` and therefore it's return `return &postgresRepo{client: db}, nil`. I think the easiest way to explain what's happening here is: This method is returning back a Database Client which will allow packages to interact with it. In my dabbling C# days this was similar to me providing something that can be instantiated. Therefore at a later stage we'll be able to build another package add something like\n\n```go\ndbclient, err := postgres.NewClient()\nif err != nil\n{\n    //Oh no .. code went kaboom\n}\n// Then invoke some function eg....\ndbclient.WriteSomeDataToDoggo(SomeDoggoData)\n```\n\n# Get function\n\nThis is a new chunk of code. There's nothing especially magic about it, but I figured it made sense to have a simple method that churns out all the doggos in the database. So here's the code\n\n```go\nfunc (repo *postgresRepo) GetDoggos() (*models.Doggos, error) {\n\n\tdoggo := models.Doggo{}\n\tdoggoList := make(models.Doggos, 0)\n\n\trows, err := repo.client.Query(`select \"ID\", \"Name\", \"Breed\" from demo.doggos`)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor rows.Next() {\n\t\terr := rows.Scan(&doggo.ID, &doggo.Name, &doggo.Breed)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdoggoList = append(doggoList, doggo)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo.client.Close()\n\n\treturn &doggoList, nil\n}\n```\n\nIm not going to go into every line as hopefully most of it is obvious, but here's a run down of some of the lines:\n\n- `(repo *postgresRepo) GetDoggos() (*models.Doggos, error)`\n- - As mentioned before, the DBClient will be instantiated. That is the 'repo' variable. Func is called 'GetDoggos' and it will return an array of Doggos as defined in the model file and will also return an error if there is one\n- `doggo := models.Doggo{}`\n- - Creates a placeholder variable for an empty doggo row\n- `doggoList := make(models.Doggos, 0)`\n- - Creates a placeholder variable for an empty set (array) of doggos\n- Doggos are then read, and add to the array 1 by 1 (not the most efficient method, but for this demo, it does the job)\n- DB connection closed\n- Array is returned\n\n# Write & Delete functions\n\nSelf explanatory. So here is the code with zero explanation ;)\n\n```go\nfunc (repo *postgresRepo) WriteDoggo(doggo *models.Doggo) error {\n\n\tsqlStatement := `INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES ($1, $2, $3)`\n\t_, err := repo.client.Exec(sqlStatement, &doggo.ID, &doggo.Name, &doggo.Breed)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc (repo *postgresRepo) DeleteDoggo(doggo *models.Doggo) error {\n\n\tsqlStatement := `DELETE FROM demo.doggos WHERE \"ID\" = $1`\n\t_, err := repo.client.Exec(sqlStatement, &doggo.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```\n\n# Routes\n\nIn my previous post I had only two routes and therefore had this code:\n\n```go\n    router := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", indexPage)\n\trouter.HandleFunc(\"/create-and-return-doggo\", dbstuff)\n```\n\nIt did the job, but we could make it cleaner. If we imagine that there there are multiple methods then we're going to still end up with a main piece of execution logic that's going to have numerous lines of code to perform the routing. So let's strip this out and create two more files at the top level, router.go and routes.go. So you should end up with somethings like this:\n\n```\n/ models\n    - doggos.go\n/ repositories\n    / postgres\n        - postgres.go\n    - repositories.go\n- main.go\n- go.mod\n- go.sum\n- router.go\n- routes.go\n```\n\nIn a similar fashion to the the model, we are extracting this logic into a separate file, however on this occasion it is still going to be tied into the main package.\n\nThe routes file will have the following code:\n\n```go\npackage main\n\nimport \"net/http\"\n\ntype Route struct {\nName        string\nMethod      string\nPattern     string\nHandlerFunc http.HandlerFunc\n}\n\ntype Routes []Route\n\nvar routes = Routes{\nRoute{\n\t\"DoggoIndex\",\n\t\"GET\",\n\t\"/Doggos\",\n\tDoggoIndex,\n},\nRoute{\n\t\"DoggoCreate\",\n\t\"POST\",\n\t\"/Doggos\",\n\tAddDoggo,\n},\nRoute{\n\t\"DoggoDelete\",\n\t\"DELETE\",\n\t\"/Doggos\",\n\tDeleteDoggo,\n},\n}\n```\n\n1.  We import 'net/http' for the http handler logic\n2.  We create a struct to represent a route.. A name, rest method, URL extension and the func that it will call (route to)\n3.  Finally we create the three routes that represent our three methods for Get, Write and Delete ..\n\nIn the future we could add many more .. one example could be\n\n```go\nRoute{\n\t\"GetDoggoByID\",\n\t\"GET\",\n\t\"/Doggos/{DoggoId}\",\n\tGetDoggo,\n},\n```\n\nThis would look up a particular row with the given ID. That's one for a future post.\n\nNow we need to add the actual router logic again using mux as we did last time. So the following code will be added to the router.go file:\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc NewRouter() *mux.Router {\n\trouter := mux.NewRouter().StrictSlash(true)\n\tfor _, route := range routes {\n\t\tvar handler http.Handler\n\n\t\thandler = route.HandlerFunc\n\n\t\trouter.\n\t\t\tMethods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(handler)\n\n\t}\n\treturn router\n}\n```\n\nUsing Mux, for each of the routes that we previously created, we are now actually creating the router. You may be wondering what these routes are actually pointing to though. DoggoIndex, AddDoggo, DeleteDoggo don't actually exists as functions. In fact, there is no logic that sits between the router and the DB calls. This is where the handlers come in. ->\n\n#Handlers\n\nTime to create another file at the top level. handlers.go. So you should end up with somethings like this:\n\n```\n/ models\n    - doggos.go\n/ repositories\n    / postgres\n        - postgres.go\n    - repositories.go\n- main.go\n- go.mod\n- go.sum\n- router.go\n- routes.go\n- handlers.go\n```\n\nI've added the following code to it:\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\tmo \"github.com/davidtstafford/golang-doggos/models\"\n\trepo \"github.com/davidtstafford/golang-doggos/repositories/postgres\"\n)\n\nfunc DoggoIndex(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n\tdbClient, _ := repo.NewClient()\n\n\tdoggoList, _ := dbClient.GetDoggos()\n\n\tif err := json.NewEncoder(w).Encode(doggoList); err != nil {\n\t\tpanic(err)\n\t}\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc AddDoggo(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n\tdbClient, _ := repo.NewClient()\n\tdoggo := &mo.Doggo{}\n\tbody, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576))\n\n\tfmt.Println(body)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := r.Body.Close(); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := json.Unmarshal(body, doggo); err != nil {\n\t\tw.WriteHeader(http.StatusUnprocessableEntity)\n\t\tif err := json.NewEncoder(w).Encode(err); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\terr = dbClient.WriteDoggo(doggo)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc DeleteDoggo(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n\tdbClient, _ := repo.NewClient()\n\tdoggo := &mo.Doggo{}\n\tbody, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576))\n\n\tfmt.Println(body)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := r.Body.Close(); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := json.Unmarshal(body, doggo); err != nil {\n\t\tw.WriteHeader(http.StatusUnprocessableEntity)\n\t\tif err := json.NewEncoder(w).Encode(err); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\terr = dbClient.DeleteDoggo(doggo)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n}\n```\n\nI'm being a bit lazy here and not breaking down the code. You may also notice that I could have done a much better job and handling and reporting errors.\n\nLooking at the code then:\n\n1. The imports contain a reference to models and postgres (and remember the routers are part of the same package). Therefore, everything is now brought together\n2. All funcs do a similar thing. They will init to Database Client and then call its relevant function and the handler returns the data.\n3. For DoggoIndex, it will push the output of an array of doggos into json and write it\n4. For AddDoggo, it will take the doggo object and pass it onto the client. Once written it will return the success\n5. For DeleteDoggo, it will take the doggo object and pass it onto the client. Once deleted it will return the success\n\nIt may look complicated but it is relatively straight forward.\n\n# Main\n\nFinally the main file.\n\nHere's the code:\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\trouter := NewRouter()\n\tlog.Fatal(http.ListenAndServe(\":7000\", router))\n}\n```\n\nThat's what happens well all the rest of the code is moved else where. ;)\n\nTime to build\n\n# Output\n\nWe have three http methods that we can can. I'll use the following example:\n\n```bash\ncurl http://localhost:7000/Doggos -X GET\n\ncurl http://localhost:7000/Doggos -X POST -d '{\"ID\":\"1\", \"Name\":\"Blake\", \"Breed\":\"Pug\"}'\ncurl http://localhost:7000/Doggos -X POST -d '{\"ID\":\"2\", \"Name\":\"Patch\", \"Breed\":\"Lab\"}'\ncurl http://localhost:7000/Doggos -X POST -d '{\"ID\":\"3\", \"Name\":\"Rosie\", \"Breed\":\"Terrier\"}'\n\ncurl http://localhost:7000/Doggos -X GET\n\ncurl http://localhost:7000/Doggos -X DELETE -d '{\"ID\":\"2\"}'\n\ncurl http://localhost:7000/Doggos -X GET\n```\n\nThe will show us the blank collection at the start. Then adding three doggos and then removing one.\n\n.. and here's my output (note I piped the output json to format it)\n\n![image](part3-1.png)\n\n# Up Next\n\nI have a few things that i still need to show:\n\n- Logging\n- Better error handling (e.g. I forgot to export my envs and was running around in circles for a while whilst making this)\n- Unit Tests\n- Showing how to swap out databases .. eg going from postgres to dynamo\n\nMore than likely my next post will apply basic logging on the http side and I'll show how the clean architecture makes it very easy to swap databases.\n","slug":"coding/golang/Golang-and-databases-Part3","published":1,"updated":"2020-03-09T23:13:12.823Z","_id":"ck7l20t1q000l1hrr6t9h0zbu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h1><p>I will cover applying some clean architecture to my prior post</p>\n<blockquote>\n<p>This is not the final solution but a journey towards it and I will continue with each post.</p>\n</blockquote>\n<p>From this point on though, I will reference my <a href=\"https://github.com/davidtstafford/golang-doggos/tree/blog-post-3\" target=\"_blank\" rel=\"noopener\">github project</a></p>\n<blockquote>\n<p><strong>SHOUT OUT</strong> - A lot of inspiration came from this github account <a href=\"https://github.com/corylanou/tns-restful-json-api\" target=\"_blank\" rel=\"noopener\">corylanou</a></p>\n</blockquote>\n<h1 id=\"Code-changes\"><a href=\"#Code-changes\" class=\"headerlink\" title=\"Code changes\"></a>Code changes</h1><blockquote>\n<p>Before I go any further. There are many different methods for clean architecture and numerous blogs, sites, books etc. that go into great detail. some examples would be DDD (domain driven design), “The Ben Johnson way”, “The Bill Kennedy way, POD (Package Oriented Design). Frankly, the list is ever growing, and I don’t plan to push you down any particular route. Follow what works for you and/or your company. The important thing is that your code: doesn’t become overly complicated; parts can be swapped out with ease, a separation between business domains …. and I guess you get where i’m going with this.</p>\n</blockquote>\n<blockquote>\n<p>Also, the main.go file will be radically changed by the end, so don’t worry too much about it during the refactor process.</p>\n</blockquote>\n<h1 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h1><p>So the first thing I’ll focus on, is to pull out the structs that define the data model. By pulling them out it allows them to be decoupled from the main logic and from the database logic.</p>\n<p>Let’s mess around with the directory structure a bit and create a models folder and create a file <strong>doggos.go</strong>. So you should end up with somethings like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; models</span><br><span class=\"line\">    - doggos.go</span><br><span class=\"line\">- main.go</span><br><span class=\"line\">- go.mod</span><br><span class=\"line\">- go.sum</span><br></pre></td></tr></table></figure>\n\n<p>Migrate the code</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br></pre></td></tr></table></figure>\n\n<p>Of course this won’t do much on it’s own. It needs some fluff at the start. Now that code has been separated we need to expose the model. The entire doggos.go will look like this:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Main</span><span class=\"params\">()</span> *<span class=\"title\">Doggos</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Doggos&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br></pre></td></tr></table></figure>\n\n<p>Note that I have changed the package name of this to be <strong>models</strong> .. This will decouple it from the main package and therefore would need to be imported to be used. The function will return a pointer to the array of type Doggo.</p>\n<h1 id=\"Repositories-DB-connections\"><a href=\"#Repositories-DB-connections\" class=\"headerlink\" title=\"Repositories (DB connections)\"></a>Repositories (DB connections)</h1><p>Now bare with me for a while on this one. I am going to pull out the DB logic and create a new directory structure and a few new files. I’ll be creating a repositories and postgres folder, and repositories.go and postgres.go file. So you should end up with somethings like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; models</span><br><span class=\"line\">    - doggos.go</span><br><span class=\"line\">&#x2F; repositories</span><br><span class=\"line\">    &#x2F; postgres</span><br><span class=\"line\">        - postgres.go</span><br><span class=\"line\">    - repositories.go</span><br><span class=\"line\">- main.go</span><br><span class=\"line\">- go.mod</span><br><span class=\"line\">- go.sum</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"repositories-go-interface\"><a href=\"#repositories-go-interface\" class=\"headerlink\" title=\"repositories.go / interface\"></a>repositories.go / interface</h1><p>The repositories.go file, is a very simplistic file that holds an interface to describe the access methods for the model we have just created. In this file we will create our first import to pull in the model.</p>\n<p>The entire code will be:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> repositories</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/davidtstafford/golang-doggos/models\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DBClient <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tGetDoggos() (*models.Doggos, error)</span><br><span class=\"line\">\tWriteDoggo(doggo *models.Doggo) error</span><br><span class=\"line\">\tDeleteDoggo(doggo *models.Doggo) error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Again we have a different package name, which will be imported at a later date.</p>\n<p>Notice that I am created the import <code>github.com/davidtstafford/golang-doggos/models</code>. My main modeule is now <code>module github.com/davidtstafford/golang-doggos</code> and defined in the go.mod file. It is within my github space and “models” has been created within it.</p>\n<p>The <strong>DBClient</strong> interface describes the three functions that would be used to interact with the Doggo db model defined within the models package (models.go)</p>\n<p>So we have now defined a client that provides three interface functions:</p>\n<ol>\n<li>GetDoggos will return the defined array of Doggos in the model.</li>\n<li>WriteDoggo will take in a defined doggo from the model and will write it.</li>\n<li>DeleteDoggo will take in a defined doggo from the model and will delete it.</li>\n</ol>\n<p>All of these functions can return an error</p>\n<h1 id=\"The-client-postgres-go\"><a href=\"#The-client-postgres-go\" class=\"headerlink\" title=\"The client / postgres.go\"></a>The client / postgres.go</h1><p>The majority of the following code is a refactor of the database code from the prior main.go file.</p>\n<p>Fluff at the start:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> postgres</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/davidtstafford/golang-doggos/models\"</span></span><br><span class=\"line\">\trepo <span class=\"string\">\"github.com/davidtstafford/golang-doggos/repositories\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thost     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tport     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tuser     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpassword <span class=\"keyword\">string</span></span><br><span class=\"line\">\tdbname   <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> postgresRepo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tclient *sql.DB</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Most of this you should recognise already. The differences so far are: imported the models and repositories and created a struct to represent the client.</p>\n<h1 id=\"New-Client-function\"><a href=\"#New-Client-function\" class=\"headerlink\" title=\"New Client function\"></a>New Client function</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewClient</span><span class=\"params\">()</span> <span class=\"params\">(repo.DBClient, error)</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\">\tpsqlInfo := fmt.Sprintf(<span class=\"string\">\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\"</span>, host, port, user, password, dbname)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">\"postgres\"</span>, psqlInfo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;postgresRepo&#123;client: db&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadOSEnvs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thost = os.Getenv(<span class=\"string\">\"pgHost\"</span>)</span><br><span class=\"line\">\tport = os.Getenv(<span class=\"string\">\"pgPort\"</span>)</span><br><span class=\"line\">\tuser = os.Getenv(<span class=\"string\">\"pgUser\"</span>)</span><br><span class=\"line\">\tpassword = os.Getenv(<span class=\"string\">\"pgPassword\"</span>)</span><br><span class=\"line\">\tdbname = os.Getenv(<span class=\"string\">\"pgDbName\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You will have seen nearly all of this code in my prior posts. The new aspects are the func itself <code>func NewClient() (repo.DBClient, error)</code> and therefore it’s return <code>return &amp;postgresRepo{client: db}, nil</code>. I think the easiest way to explain what’s happening here is: This method is returning back a Database Client which will allow packages to interact with it. In my dabbling C# days this was similar to me providing something that can be instantiated. Therefore at a later stage we’ll be able to build another package add something like</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbclient, err := postgres.NewClient()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Oh no .. code went kaboom</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Then invoke some function eg....</span></span><br><span class=\"line\">dbclient.WriteSomeDataToDoggo(SomeDoggoData)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Get-function\"><a href=\"#Get-function\" class=\"headerlink\" title=\"Get function\"></a>Get function</h1><p>This is a new chunk of code. There’s nothing especially magic about it, but I figured it made sense to have a simple method that churns out all the doggos in the database. So here’s the code</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(repo *postgresRepo)</span> <span class=\"title\">GetDoggos</span><span class=\"params\">()</span> <span class=\"params\">(*models.Doggos, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggo := models.Doggo&#123;&#125;</span><br><span class=\"line\">\tdoggoList := <span class=\"built_in\">make</span>(models.Doggos, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\trows, err := repo.client.Query(<span class=\"string\">`select \"ID\", \"Name\", \"Breed\" from demo.doggos`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\terr := rows.Scan(&amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoggoList = <span class=\"built_in\">append</span>(doggoList, doggo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = rows.Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trepo.client.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;doggoList, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Im not going to go into every line as hopefully most of it is obvious, but here’s a run down of some of the lines:</p>\n<ul>\n<li><code>(repo *postgresRepo) GetDoggos() (*models.Doggos, error)</code></li>\n<li><ul>\n<li>As mentioned before, the DBClient will be instantiated. That is the ‘repo’ variable. Func is called ‘GetDoggos’ and it will return an array of Doggos as defined in the model file and will also return an error if there is one</li>\n</ul>\n</li>\n<li><code>doggo := models.Doggo{}</code></li>\n<li><ul>\n<li>Creates a placeholder variable for an empty doggo row</li>\n</ul>\n</li>\n<li><code>doggoList := make(models.Doggos, 0)</code></li>\n<li><ul>\n<li>Creates a placeholder variable for an empty set (array) of doggos</li>\n</ul>\n</li>\n<li>Doggos are then read, and add to the array 1 by 1 (not the most efficient method, but for this demo, it does the job)</li>\n<li>DB connection closed</li>\n<li>Array is returned</li>\n</ul>\n<h1 id=\"Write-amp-Delete-functions\"><a href=\"#Write-amp-Delete-functions\" class=\"headerlink\" title=\"Write &amp; Delete functions\"></a>Write &amp; Delete functions</h1><p>Self explanatory. So here is the code with zero explanation ;)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(repo *postgresRepo)</span> <span class=\"title\">WriteDoggo</span><span class=\"params\">(doggo *models.Doggo)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement := <span class=\"string\">`INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES ($1, $2, $3)`</span></span><br><span class=\"line\">\t_, err := repo.client.Exec(sqlStatement, &amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(repo *postgresRepo)</span> <span class=\"title\">DeleteDoggo</span><span class=\"params\">(doggo *models.Doggo)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement := <span class=\"string\">`DELETE FROM demo.doggos WHERE \"ID\" = $1`</span></span><br><span class=\"line\">\t_, err := repo.client.Exec(sqlStatement, &amp;doggo.ID)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Routes\"><a href=\"#Routes\" class=\"headerlink\" title=\"Routes\"></a>Routes</h1><p>In my previous post I had only two routes and therefore had this code:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   router := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">router.HandleFunc(<span class=\"string\">\"/\"</span>, indexPage)</span><br><span class=\"line\">router.HandleFunc(<span class=\"string\">\"/create-and-return-doggo\"</span>, dbstuff)</span><br></pre></td></tr></table></figure>\n\n<p>It did the job, but we could make it cleaner. If we imagine that there there are multiple methods then we’re going to still end up with a main piece of execution logic that’s going to have numerous lines of code to perform the routing. So let’s strip this out and create two more files at the top level, router.go and routes.go. So you should end up with somethings like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; models</span><br><span class=\"line\">    - doggos.go</span><br><span class=\"line\">&#x2F; repositories</span><br><span class=\"line\">    &#x2F; postgres</span><br><span class=\"line\">        - postgres.go</span><br><span class=\"line\">    - repositories.go</span><br><span class=\"line\">- main.go</span><br><span class=\"line\">- go.mod</span><br><span class=\"line\">- go.sum</span><br><span class=\"line\">- router.go</span><br><span class=\"line\">- routes.go</span><br></pre></td></tr></table></figure>\n\n<p>In a similar fashion to the the model, we are extracting this logic into a separate file, however on this occasion it is still going to be tied into the main package.</p>\n<p>The routes file will have the following code:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Route <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">Name        <span class=\"keyword\">string</span></span><br><span class=\"line\">Method      <span class=\"keyword\">string</span></span><br><span class=\"line\">Pattern     <span class=\"keyword\">string</span></span><br><span class=\"line\">HandlerFunc http.HandlerFunc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Routes []Route</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> routes = Routes&#123;</span><br><span class=\"line\">Route&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"DoggoIndex\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"/Doggos\"</span>,</span><br><span class=\"line\">\tDoggoIndex,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">Route&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"DoggoCreate\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"/Doggos\"</span>,</span><br><span class=\"line\">\tAddDoggo,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">Route&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"DoggoDelete\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"DELETE\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"/Doggos\"</span>,</span><br><span class=\"line\">\tDeleteDoggo,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>We import ‘net/http’ for the http handler logic</li>\n<li>We create a struct to represent a route.. A name, rest method, URL extension and the func that it will call (route to)</li>\n<li>Finally we create the three routes that represent our three methods for Get, Write and Delete ..</li>\n</ol>\n<p>In the future we could add many more .. one example could be</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"GetDoggoByID\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"/Doggos/&#123;DoggoId&#125;\"</span>,</span><br><span class=\"line\">\tGetDoggo,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>This would look up a particular row with the given ID. That’s one for a future post.</p>\n<p>Now we need to add the actual router logic again using mux as we did last time. So the following code will be added to the router.go file:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRouter</span><span class=\"params\">()</span> *<span class=\"title\">mux</span>.<span class=\"title\">Router</span></span> &#123;</span><br><span class=\"line\">\trouter := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, route := <span class=\"keyword\">range</span> routes &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> handler http.Handler</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thandler = route.HandlerFunc</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trouter.</span><br><span class=\"line\">\t\t\tMethods(route.Method).</span><br><span class=\"line\">\t\t\tPath(route.Pattern).</span><br><span class=\"line\">\t\t\tName(route.Name).</span><br><span class=\"line\">\t\t\tHandler(handler)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> router</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Using Mux, for each of the routes that we previously created, we are now actually creating the router. You may be wondering what these routes are actually pointing to though. DoggoIndex, AddDoggo, DeleteDoggo don’t actually exists as functions. In fact, there is no logic that sits between the router and the DB calls. This is where the handlers come in. -&gt;</p>\n<p>#Handlers</p>\n<p>Time to create another file at the top level. handlers.go. So you should end up with somethings like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; models</span><br><span class=\"line\">    - doggos.go</span><br><span class=\"line\">&#x2F; repositories</span><br><span class=\"line\">    &#x2F; postgres</span><br><span class=\"line\">        - postgres.go</span><br><span class=\"line\">    - repositories.go</span><br><span class=\"line\">- main.go</span><br><span class=\"line\">- go.mod</span><br><span class=\"line\">- go.sum</span><br><span class=\"line\">- router.go</span><br><span class=\"line\">- routes.go</span><br><span class=\"line\">- handlers.go</span><br></pre></td></tr></table></figure>\n\n<p>I’ve added the following code to it:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmo <span class=\"string\">\"github.com/davidtstafford/golang-doggos/models\"</span></span><br><span class=\"line\">\trepo <span class=\"string\">\"github.com/davidtstafford/golang-doggos/repositories/postgres\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DoggoIndex</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json; charset=UTF-8\"</span>)</span><br><span class=\"line\">\tdbClient, _ := repo.NewClient()</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggoList, _ := dbClient.GetDoggos()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.NewEncoder(w).Encode(doggoList); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tw.WriteHeader(http.StatusOK)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddDoggo</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json; charset=UTF-8\"</span>)</span><br><span class=\"line\">\tdbClient, _ := repo.NewClient()</span><br><span class=\"line\">\tdoggo := &amp;mo.Doggo&#123;&#125;</span><br><span class=\"line\">\tbody, err := ioutil.ReadAll(io.LimitReader(r.Body, <span class=\"number\">1048576</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(body)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := r.Body.Close(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.Unmarshal(body, doggo); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tw.WriteHeader(http.StatusUnprocessableEntity)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := json.NewEncoder(w).Encode(err); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = dbClient.WriteDoggo(doggo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tw.WriteHeader(http.StatusOK)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeleteDoggo</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json; charset=UTF-8\"</span>)</span><br><span class=\"line\">\tdbClient, _ := repo.NewClient()</span><br><span class=\"line\">\tdoggo := &amp;mo.Doggo&#123;&#125;</span><br><span class=\"line\">\tbody, err := ioutil.ReadAll(io.LimitReader(r.Body, <span class=\"number\">1048576</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(body)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := r.Body.Close(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.Unmarshal(body, doggo); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tw.WriteHeader(http.StatusUnprocessableEntity)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := json.NewEncoder(w).Encode(err); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = dbClient.DeleteDoggo(doggo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tw.WriteHeader(http.StatusOK)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I’m being a bit lazy here and not breaking down the code. You may also notice that I could have done a much better job and handling and reporting errors.</p>\n<p>Looking at the code then:</p>\n<ol>\n<li>The imports contain a reference to models and postgres (and remember the routers are part of the same package). Therefore, everything is now brought together</li>\n<li>All funcs do a similar thing. They will init to Database Client and then call its relevant function and the handler returns the data.</li>\n<li>For DoggoIndex, it will push the output of an array of doggos into json and write it</li>\n<li>For AddDoggo, it will take the doggo object and pass it onto the client. Once written it will return the success</li>\n<li>For DeleteDoggo, it will take the doggo object and pass it onto the client. Once deleted it will return the success</li>\n</ol>\n<p>It may look complicated but it is relatively straight forward.</p>\n<h1 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h1><p>Finally the main file.</p>\n<p>Here’s the code:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := NewRouter()</span><br><span class=\"line\">\tlog.Fatal(http.ListenAndServe(<span class=\"string\">\":7000\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That’s what happens well all the rest of the code is moved else where. ;)</p>\n<p>Time to build</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>We have three http methods that we can can. I’ll use the following example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:7000/Doggos -X GET</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X POST -d <span class=\"string\">'&#123;\"ID\":\"1\", \"Name\":\"Blake\", \"Breed\":\"Pug\"&#125;'</span></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X POST -d <span class=\"string\">'&#123;\"ID\":\"2\", \"Name\":\"Patch\", \"Breed\":\"Lab\"&#125;'</span></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X POST -d <span class=\"string\">'&#123;\"ID\":\"3\", \"Name\":\"Rosie\", \"Breed\":\"Terrier\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X GET</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X DELETE -d <span class=\"string\">'&#123;\"ID\":\"2\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X GET</span><br></pre></td></tr></table></figure>\n\n<p>The will show us the blank collection at the start. Then adding three doggos and then removing one.</p>\n<p>.. and here’s my output (note I piped the output json to format it)</p>\n<p><img src=\"part3-1.png\" alt=\"image\"></p>\n<h1 id=\"Up-Next\"><a href=\"#Up-Next\" class=\"headerlink\" title=\"Up Next\"></a>Up Next</h1><p>I have a few things that i still need to show:</p>\n<ul>\n<li>Logging</li>\n<li>Better error handling (e.g. I forgot to export my envs and was running around in circles for a while whilst making this)</li>\n<li>Unit Tests</li>\n<li>Showing how to swap out databases .. eg going from postgres to dynamo</li>\n</ul>\n<p>More than likely my next post will apply basic logging on the http side and I’ll show how the clean architecture makes it very easy to swap databases.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h1><p>I will cover applying some clean architecture to my prior post</p>\n<blockquote>\n<p>This is not the final solution but a journey towards it and I will continue with each post.</p>\n</blockquote>\n<p>From this point on though, I will reference my <a href=\"https://github.com/davidtstafford/golang-doggos/tree/blog-post-3\" target=\"_blank\" rel=\"noopener\">github project</a></p>\n<blockquote>\n<p><strong>SHOUT OUT</strong> - A lot of inspiration came from this github account <a href=\"https://github.com/corylanou/tns-restful-json-api\" target=\"_blank\" rel=\"noopener\">corylanou</a></p>\n</blockquote>\n<h1 id=\"Code-changes\"><a href=\"#Code-changes\" class=\"headerlink\" title=\"Code changes\"></a>Code changes</h1><blockquote>\n<p>Before I go any further. There are many different methods for clean architecture and numerous blogs, sites, books etc. that go into great detail. some examples would be DDD (domain driven design), “The Ben Johnson way”, “The Bill Kennedy way, POD (Package Oriented Design). Frankly, the list is ever growing, and I don’t plan to push you down any particular route. Follow what works for you and/or your company. The important thing is that your code: doesn’t become overly complicated; parts can be swapped out with ease, a separation between business domains …. and I guess you get where i’m going with this.</p>\n</blockquote>\n<blockquote>\n<p>Also, the main.go file will be radically changed by the end, so don’t worry too much about it during the refactor process.</p>\n</blockquote>\n<h1 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h1><p>So the first thing I’ll focus on, is to pull out the structs that define the data model. By pulling them out it allows them to be decoupled from the main logic and from the database logic.</p>\n<p>Let’s mess around with the directory structure a bit and create a models folder and create a file <strong>doggos.go</strong>. So you should end up with somethings like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; models</span><br><span class=\"line\">    - doggos.go</span><br><span class=\"line\">- main.go</span><br><span class=\"line\">- go.mod</span><br><span class=\"line\">- go.sum</span><br></pre></td></tr></table></figure>\n\n<p>Migrate the code</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br></pre></td></tr></table></figure>\n\n<p>Of course this won’t do much on it’s own. It needs some fluff at the start. Now that code has been separated we need to expose the model. The entire doggos.go will look like this:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Main</span><span class=\"params\">()</span> *<span class=\"title\">Doggos</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Doggos&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"ID\"`</span></span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Name\"`</span></span><br><span class=\"line\">\tBreed <span class=\"keyword\">string</span> <span class=\"string\">`json:\"Breed\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Doggos []Doggo</span><br></pre></td></tr></table></figure>\n\n<p>Note that I have changed the package name of this to be <strong>models</strong> .. This will decouple it from the main package and therefore would need to be imported to be used. The function will return a pointer to the array of type Doggo.</p>\n<h1 id=\"Repositories-DB-connections\"><a href=\"#Repositories-DB-connections\" class=\"headerlink\" title=\"Repositories (DB connections)\"></a>Repositories (DB connections)</h1><p>Now bare with me for a while on this one. I am going to pull out the DB logic and create a new directory structure and a few new files. I’ll be creating a repositories and postgres folder, and repositories.go and postgres.go file. So you should end up with somethings like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; models</span><br><span class=\"line\">    - doggos.go</span><br><span class=\"line\">&#x2F; repositories</span><br><span class=\"line\">    &#x2F; postgres</span><br><span class=\"line\">        - postgres.go</span><br><span class=\"line\">    - repositories.go</span><br><span class=\"line\">- main.go</span><br><span class=\"line\">- go.mod</span><br><span class=\"line\">- go.sum</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"repositories-go-interface\"><a href=\"#repositories-go-interface\" class=\"headerlink\" title=\"repositories.go / interface\"></a>repositories.go / interface</h1><p>The repositories.go file, is a very simplistic file that holds an interface to describe the access methods for the model we have just created. In this file we will create our first import to pull in the model.</p>\n<p>The entire code will be:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> repositories</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/davidtstafford/golang-doggos/models\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DBClient <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tGetDoggos() (*models.Doggos, error)</span><br><span class=\"line\">\tWriteDoggo(doggo *models.Doggo) error</span><br><span class=\"line\">\tDeleteDoggo(doggo *models.Doggo) error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Again we have a different package name, which will be imported at a later date.</p>\n<p>Notice that I am created the import <code>github.com/davidtstafford/golang-doggos/models</code>. My main modeule is now <code>module github.com/davidtstafford/golang-doggos</code> and defined in the go.mod file. It is within my github space and “models” has been created within it.</p>\n<p>The <strong>DBClient</strong> interface describes the three functions that would be used to interact with the Doggo db model defined within the models package (models.go)</p>\n<p>So we have now defined a client that provides three interface functions:</p>\n<ol>\n<li>GetDoggos will return the defined array of Doggos in the model.</li>\n<li>WriteDoggo will take in a defined doggo from the model and will write it.</li>\n<li>DeleteDoggo will take in a defined doggo from the model and will delete it.</li>\n</ol>\n<p>All of these functions can return an error</p>\n<h1 id=\"The-client-postgres-go\"><a href=\"#The-client-postgres-go\" class=\"headerlink\" title=\"The client / postgres.go\"></a>The client / postgres.go</h1><p>The majority of the following code is a refactor of the database code from the prior main.go file.</p>\n<p>Fluff at the start:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> postgres</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Used in conjunction with database/sql\" to provide Postgres driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/lib/pq\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/davidtstafford/golang-doggos/models\"</span></span><br><span class=\"line\">\trepo <span class=\"string\">\"github.com/davidtstafford/golang-doggos/repositories\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thost     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tport     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tuser     <span class=\"keyword\">string</span></span><br><span class=\"line\">\tpassword <span class=\"keyword\">string</span></span><br><span class=\"line\">\tdbname   <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> postgresRepo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tclient *sql.DB</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Most of this you should recognise already. The differences so far are: imported the models and repositories and created a struct to represent the client.</p>\n<h1 id=\"New-Client-function\"><a href=\"#New-Client-function\" class=\"headerlink\" title=\"New Client function\"></a>New Client function</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewClient</span><span class=\"params\">()</span> <span class=\"params\">(repo.DBClient, error)</span></span> &#123;</span><br><span class=\"line\">\tloadOSEnvs()</span><br><span class=\"line\"></span><br><span class=\"line\">\tpsqlInfo := fmt.Sprintf(<span class=\"string\">\"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable\"</span>, host, port, user, password, dbname)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">\"postgres\"</span>, psqlInfo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;postgresRepo&#123;client: db&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadOSEnvs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thost = os.Getenv(<span class=\"string\">\"pgHost\"</span>)</span><br><span class=\"line\">\tport = os.Getenv(<span class=\"string\">\"pgPort\"</span>)</span><br><span class=\"line\">\tuser = os.Getenv(<span class=\"string\">\"pgUser\"</span>)</span><br><span class=\"line\">\tpassword = os.Getenv(<span class=\"string\">\"pgPassword\"</span>)</span><br><span class=\"line\">\tdbname = os.Getenv(<span class=\"string\">\"pgDbName\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You will have seen nearly all of this code in my prior posts. The new aspects are the func itself <code>func NewClient() (repo.DBClient, error)</code> and therefore it’s return <code>return &amp;postgresRepo{client: db}, nil</code>. I think the easiest way to explain what’s happening here is: This method is returning back a Database Client which will allow packages to interact with it. In my dabbling C# days this was similar to me providing something that can be instantiated. Therefore at a later stage we’ll be able to build another package add something like</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbclient, err := postgres.NewClient()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Oh no .. code went kaboom</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Then invoke some function eg....</span></span><br><span class=\"line\">dbclient.WriteSomeDataToDoggo(SomeDoggoData)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Get-function\"><a href=\"#Get-function\" class=\"headerlink\" title=\"Get function\"></a>Get function</h1><p>This is a new chunk of code. There’s nothing especially magic about it, but I figured it made sense to have a simple method that churns out all the doggos in the database. So here’s the code</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(repo *postgresRepo)</span> <span class=\"title\">GetDoggos</span><span class=\"params\">()</span> <span class=\"params\">(*models.Doggos, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggo := models.Doggo&#123;&#125;</span><br><span class=\"line\">\tdoggoList := <span class=\"built_in\">make</span>(models.Doggos, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\trows, err := repo.client.Query(<span class=\"string\">`select \"ID\", \"Name\", \"Breed\" from demo.doggos`</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\terr := rows.Scan(&amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoggoList = <span class=\"built_in\">append</span>(doggoList, doggo)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = rows.Err()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trepo.client.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;doggoList, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Im not going to go into every line as hopefully most of it is obvious, but here’s a run down of some of the lines:</p>\n<ul>\n<li><code>(repo *postgresRepo) GetDoggos() (*models.Doggos, error)</code></li>\n<li><ul>\n<li>As mentioned before, the DBClient will be instantiated. That is the ‘repo’ variable. Func is called ‘GetDoggos’ and it will return an array of Doggos as defined in the model file and will also return an error if there is one</li>\n</ul>\n</li>\n<li><code>doggo := models.Doggo{}</code></li>\n<li><ul>\n<li>Creates a placeholder variable for an empty doggo row</li>\n</ul>\n</li>\n<li><code>doggoList := make(models.Doggos, 0)</code></li>\n<li><ul>\n<li>Creates a placeholder variable for an empty set (array) of doggos</li>\n</ul>\n</li>\n<li>Doggos are then read, and add to the array 1 by 1 (not the most efficient method, but for this demo, it does the job)</li>\n<li>DB connection closed</li>\n<li>Array is returned</li>\n</ul>\n<h1 id=\"Write-amp-Delete-functions\"><a href=\"#Write-amp-Delete-functions\" class=\"headerlink\" title=\"Write &amp; Delete functions\"></a>Write &amp; Delete functions</h1><p>Self explanatory. So here is the code with zero explanation ;)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(repo *postgresRepo)</span> <span class=\"title\">WriteDoggo</span><span class=\"params\">(doggo *models.Doggo)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement := <span class=\"string\">`INSERT INTO demo.doggos (\"ID\", \"Name\", \"Breed\" ) VALUES ($1, $2, $3)`</span></span><br><span class=\"line\">\t_, err := repo.client.Exec(sqlStatement, &amp;doggo.ID, &amp;doggo.Name, &amp;doggo.Breed)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(repo *postgresRepo)</span> <span class=\"title\">DeleteDoggo</span><span class=\"params\">(doggo *models.Doggo)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsqlStatement := <span class=\"string\">`DELETE FROM demo.doggos WHERE \"ID\" = $1`</span></span><br><span class=\"line\">\t_, err := repo.client.Exec(sqlStatement, &amp;doggo.ID)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Routes\"><a href=\"#Routes\" class=\"headerlink\" title=\"Routes\"></a>Routes</h1><p>In my previous post I had only two routes and therefore had this code:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   router := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">router.HandleFunc(<span class=\"string\">\"/\"</span>, indexPage)</span><br><span class=\"line\">router.HandleFunc(<span class=\"string\">\"/create-and-return-doggo\"</span>, dbstuff)</span><br></pre></td></tr></table></figure>\n\n<p>It did the job, but we could make it cleaner. If we imagine that there there are multiple methods then we’re going to still end up with a main piece of execution logic that’s going to have numerous lines of code to perform the routing. So let’s strip this out and create two more files at the top level, router.go and routes.go. So you should end up with somethings like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; models</span><br><span class=\"line\">    - doggos.go</span><br><span class=\"line\">&#x2F; repositories</span><br><span class=\"line\">    &#x2F; postgres</span><br><span class=\"line\">        - postgres.go</span><br><span class=\"line\">    - repositories.go</span><br><span class=\"line\">- main.go</span><br><span class=\"line\">- go.mod</span><br><span class=\"line\">- go.sum</span><br><span class=\"line\">- router.go</span><br><span class=\"line\">- routes.go</span><br></pre></td></tr></table></figure>\n\n<p>In a similar fashion to the the model, we are extracting this logic into a separate file, however on this occasion it is still going to be tied into the main package.</p>\n<p>The routes file will have the following code:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Route <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">Name        <span class=\"keyword\">string</span></span><br><span class=\"line\">Method      <span class=\"keyword\">string</span></span><br><span class=\"line\">Pattern     <span class=\"keyword\">string</span></span><br><span class=\"line\">HandlerFunc http.HandlerFunc</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Routes []Route</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> routes = Routes&#123;</span><br><span class=\"line\">Route&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"DoggoIndex\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"/Doggos\"</span>,</span><br><span class=\"line\">\tDoggoIndex,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">Route&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"DoggoCreate\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"/Doggos\"</span>,</span><br><span class=\"line\">\tAddDoggo,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">Route&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"DoggoDelete\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"DELETE\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"/Doggos\"</span>,</span><br><span class=\"line\">\tDeleteDoggo,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>We import ‘net/http’ for the http handler logic</li>\n<li>We create a struct to represent a route.. A name, rest method, URL extension and the func that it will call (route to)</li>\n<li>Finally we create the three routes that represent our three methods for Get, Write and Delete ..</li>\n</ol>\n<p>In the future we could add many more .. one example could be</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"GetDoggoByID\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"/Doggos/&#123;DoggoId&#125;\"</span>,</span><br><span class=\"line\">\tGetDoggo,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>This would look up a particular row with the given ID. That’s one for a future post.</p>\n<p>Now we need to add the actual router logic again using mux as we did last time. So the following code will be added to the router.go file:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRouter</span><span class=\"params\">()</span> *<span class=\"title\">mux</span>.<span class=\"title\">Router</span></span> &#123;</span><br><span class=\"line\">\trouter := mux.NewRouter().StrictSlash(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, route := <span class=\"keyword\">range</span> routes &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> handler http.Handler</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thandler = route.HandlerFunc</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trouter.</span><br><span class=\"line\">\t\t\tMethods(route.Method).</span><br><span class=\"line\">\t\t\tPath(route.Pattern).</span><br><span class=\"line\">\t\t\tName(route.Name).</span><br><span class=\"line\">\t\t\tHandler(handler)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> router</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Using Mux, for each of the routes that we previously created, we are now actually creating the router. You may be wondering what these routes are actually pointing to though. DoggoIndex, AddDoggo, DeleteDoggo don’t actually exists as functions. In fact, there is no logic that sits between the router and the DB calls. This is where the handlers come in. -&gt;</p>\n<p>#Handlers</p>\n<p>Time to create another file at the top level. handlers.go. So you should end up with somethings like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F; models</span><br><span class=\"line\">    - doggos.go</span><br><span class=\"line\">&#x2F; repositories</span><br><span class=\"line\">    &#x2F; postgres</span><br><span class=\"line\">        - postgres.go</span><br><span class=\"line\">    - repositories.go</span><br><span class=\"line\">- main.go</span><br><span class=\"line\">- go.mod</span><br><span class=\"line\">- go.sum</span><br><span class=\"line\">- router.go</span><br><span class=\"line\">- routes.go</span><br><span class=\"line\">- handlers.go</span><br></pre></td></tr></table></figure>\n\n<p>I’ve added the following code to it:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmo <span class=\"string\">\"github.com/davidtstafford/golang-doggos/models\"</span></span><br><span class=\"line\">\trepo <span class=\"string\">\"github.com/davidtstafford/golang-doggos/repositories/postgres\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DoggoIndex</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json; charset=UTF-8\"</span>)</span><br><span class=\"line\">\tdbClient, _ := repo.NewClient()</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoggoList, _ := dbClient.GetDoggos()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.NewEncoder(w).Encode(doggoList); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tw.WriteHeader(http.StatusOK)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddDoggo</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json; charset=UTF-8\"</span>)</span><br><span class=\"line\">\tdbClient, _ := repo.NewClient()</span><br><span class=\"line\">\tdoggo := &amp;mo.Doggo&#123;&#125;</span><br><span class=\"line\">\tbody, err := ioutil.ReadAll(io.LimitReader(r.Body, <span class=\"number\">1048576</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(body)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := r.Body.Close(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.Unmarshal(body, doggo); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tw.WriteHeader(http.StatusUnprocessableEntity)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := json.NewEncoder(w).Encode(err); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = dbClient.WriteDoggo(doggo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tw.WriteHeader(http.StatusOK)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeleteDoggo</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json; charset=UTF-8\"</span>)</span><br><span class=\"line\">\tdbClient, _ := repo.NewClient()</span><br><span class=\"line\">\tdoggo := &amp;mo.Doggo&#123;&#125;</span><br><span class=\"line\">\tbody, err := ioutil.ReadAll(io.LimitReader(r.Body, <span class=\"number\">1048576</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(body)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := r.Body.Close(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.Unmarshal(body, doggo); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tw.WriteHeader(http.StatusUnprocessableEntity)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := json.NewEncoder(w).Encode(err); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = dbClient.DeleteDoggo(doggo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tw.WriteHeader(http.StatusOK)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I’m being a bit lazy here and not breaking down the code. You may also notice that I could have done a much better job and handling and reporting errors.</p>\n<p>Looking at the code then:</p>\n<ol>\n<li>The imports contain a reference to models and postgres (and remember the routers are part of the same package). Therefore, everything is now brought together</li>\n<li>All funcs do a similar thing. They will init to Database Client and then call its relevant function and the handler returns the data.</li>\n<li>For DoggoIndex, it will push the output of an array of doggos into json and write it</li>\n<li>For AddDoggo, it will take the doggo object and pass it onto the client. Once written it will return the success</li>\n<li>For DeleteDoggo, it will take the doggo object and pass it onto the client. Once deleted it will return the success</li>\n</ol>\n<p>It may look complicated but it is relatively straight forward.</p>\n<h1 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h1><p>Finally the main file.</p>\n<p>Here’s the code:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := NewRouter()</span><br><span class=\"line\">\tlog.Fatal(http.ListenAndServe(<span class=\"string\">\":7000\"</span>, router))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That’s what happens well all the rest of the code is moved else where. ;)</p>\n<p>Time to build</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h1><p>We have three http methods that we can can. I’ll use the following example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:7000/Doggos -X GET</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X POST -d <span class=\"string\">'&#123;\"ID\":\"1\", \"Name\":\"Blake\", \"Breed\":\"Pug\"&#125;'</span></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X POST -d <span class=\"string\">'&#123;\"ID\":\"2\", \"Name\":\"Patch\", \"Breed\":\"Lab\"&#125;'</span></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X POST -d <span class=\"string\">'&#123;\"ID\":\"3\", \"Name\":\"Rosie\", \"Breed\":\"Terrier\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X GET</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X DELETE -d <span class=\"string\">'&#123;\"ID\":\"2\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl http://localhost:7000/Doggos -X GET</span><br></pre></td></tr></table></figure>\n\n<p>The will show us the blank collection at the start. Then adding three doggos and then removing one.</p>\n<p>.. and here’s my output (note I piped the output json to format it)</p>\n<p><img src=\"part3-1.png\" alt=\"image\"></p>\n<h1 id=\"Up-Next\"><a href=\"#Up-Next\" class=\"headerlink\" title=\"Up Next\"></a>Up Next</h1><p>I have a few things that i still need to show:</p>\n<ul>\n<li>Logging</li>\n<li>Better error handling (e.g. I forgot to export my envs and was running around in circles for a while whilst making this)</li>\n<li>Unit Tests</li>\n<li>Showing how to swap out databases .. eg going from postgres to dynamo</li>\n</ul>\n<p>More than likely my next post will apply basic logging on the http side and I’ll show how the clean architecture makes it very easy to swap databases.</p>\n"},{"title":"Oracle Destination via ODP.Net (Custom Destination Component)","date":"2018-12-16T00:00:00.000Z","_content":"\n[![GitHub](GitHub.png)](https://github.com/davidtstafford/SSIS2008R2-Custom-Oracle-Destination)\n\nSSIS 2008 R2 Solution.\n\nI have created this custom destination component to allow ssis to write directly to an oracle table via the ODP.NET driver. This avoids the poor performance of using the ADO.NET Destination component with odp.net, which is incredibly slow.\n\nUsage:\n\nUse instead of ADO.NET destination.\nSelect ODP connection\nVariables:\n\n- Batch Size (default 1000)\n- Table name (destination table)\n- Perform as transaction (True: Commit at end.. False: Commit for each batch size)\n- Partition Name (If inserting into a partition table, this can be supplied to allow oracle to identify only one affect partition. Useful if running truncates on other partitions)\n\n> Please Note\n\nI created this code back in 2012 when SSIS 2008 R2 was the latest version. I do not keep this code up to date, but it could be useful reference.\n\n[GitHub Link](https://github.com/davidtstafford/SSIS2008R2-Custom-Oracle-Destination)\n","source":"_posts/coding/ssis/SSIS-To-Oracle-Via-ODP.md","raw":"---\ntitle: \"Oracle Destination via ODP.Net (Custom Destination Component)\"\ndate: \"2018-12-16\"\ntags: [coding, c#, ssis]\ncategories: \n\t- [Coding - C# - SSIS]\n---\n\n[![GitHub](GitHub.png)](https://github.com/davidtstafford/SSIS2008R2-Custom-Oracle-Destination)\n\nSSIS 2008 R2 Solution.\n\nI have created this custom destination component to allow ssis to write directly to an oracle table via the ODP.NET driver. This avoids the poor performance of using the ADO.NET Destination component with odp.net, which is incredibly slow.\n\nUsage:\n\nUse instead of ADO.NET destination.\nSelect ODP connection\nVariables:\n\n- Batch Size (default 1000)\n- Table name (destination table)\n- Perform as transaction (True: Commit at end.. False: Commit for each batch size)\n- Partition Name (If inserting into a partition table, this can be supplied to allow oracle to identify only one affect partition. Useful if running truncates on other partitions)\n\n> Please Note\n\nI created this code back in 2012 when SSIS 2008 R2 was the latest version. I do not keep this code up to date, but it could be useful reference.\n\n[GitHub Link](https://github.com/davidtstafford/SSIS2008R2-Custom-Oracle-Destination)\n","slug":"coding/ssis/SSIS-To-Oracle-Via-ODP","published":1,"updated":"2020-03-09T23:16:11.171Z","_id":"ck7l31h85000sgqrr9yor0tzj","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://github.com/davidtstafford/SSIS2008R2-Custom-Oracle-Destination\" target=\"_blank\" rel=\"noopener\"><img src=\"GitHub.png\" alt=\"GitHub\"></a></p>\n<p>SSIS 2008 R2 Solution.</p>\n<p>I have created this custom destination component to allow ssis to write directly to an oracle table via the ODP.NET driver. This avoids the poor performance of using the ADO.NET Destination component with odp.net, which is incredibly slow.</p>\n<p>Usage:</p>\n<p>Use instead of ADO.NET destination.<br>Select ODP connection<br>Variables:</p>\n<ul>\n<li>Batch Size (default 1000)</li>\n<li>Table name (destination table)</li>\n<li>Perform as transaction (True: Commit at end.. False: Commit for each batch size)</li>\n<li>Partition Name (If inserting into a partition table, this can be supplied to allow oracle to identify only one affect partition. Useful if running truncates on other partitions)</li>\n</ul>\n<blockquote>\n<p>Please Note</p>\n</blockquote>\n<p>I created this code back in 2012 when SSIS 2008 R2 was the latest version. I do not keep this code up to date, but it could be useful reference.</p>\n<p><a href=\"https://github.com/davidtstafford/SSIS2008R2-Custom-Oracle-Destination\" target=\"_blank\" rel=\"noopener\">GitHub Link</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/davidtstafford/SSIS2008R2-Custom-Oracle-Destination\" target=\"_blank\" rel=\"noopener\"><img src=\"GitHub.png\" alt=\"GitHub\"></a></p>\n<p>SSIS 2008 R2 Solution.</p>\n<p>I have created this custom destination component to allow ssis to write directly to an oracle table via the ODP.NET driver. This avoids the poor performance of using the ADO.NET Destination component with odp.net, which is incredibly slow.</p>\n<p>Usage:</p>\n<p>Use instead of ADO.NET destination.<br>Select ODP connection<br>Variables:</p>\n<ul>\n<li>Batch Size (default 1000)</li>\n<li>Table name (destination table)</li>\n<li>Perform as transaction (True: Commit at end.. False: Commit for each batch size)</li>\n<li>Partition Name (If inserting into a partition table, this can be supplied to allow oracle to identify only one affect partition. Useful if running truncates on other partitions)</li>\n</ul>\n<blockquote>\n<p>Please Note</p>\n</blockquote>\n<p>I created this code back in 2012 when SSIS 2008 R2 was the latest version. I do not keep this code up to date, but it could be useful reference.</p>\n<p><a href=\"https://github.com/davidtstafford/SSIS2008R2-Custom-Oracle-Destination\" target=\"_blank\" rel=\"noopener\">GitHub Link</a></p>\n"},{"title":"Many to Many (RDBMS to Graph)","date":"2018-11-05T00:00:00.000Z","_content":"\nOne of the systems that I am currently working on is a migration from an Oracle DB to Graph. The ER diagram is similar to what can be seen in the original database.\n\nAn engine 'can' or 'cannot' be fitted into a car. Depending on the complexity required to place the engine into the car, the attributes are stored into a many-to-many (bridging table) and ext table. The ext table sometimes needs to have new columns added to it, should additional requirements come in. If the engine is not fully compatible, a relationship is created to identify the next engine from that manufacturer that would be fully compatible with the car.\n\n![RDBMS ER Diagram](RDBMSCompatibility.png)\n\nThe diagram below, shows how the model was originally ported.\nAs you can see, it mirrors the exact structure of the relational database. Attributes are stored into a 'bridging node' and no properties are stored within the edges. In essence, this is still the relational model. It does technically meet the requirements but doesn't take advantage of the Graph concepts.\n\n![Inital graph model](PoorCompatibilityExample.png)\n\nI modified it to something similar to the diagram below. I'm sure this can still be refined, however this was an attempt to step away from the relational model and make use of the nodes and edges correctly.\n\nThe example shows that the edge ':Compatible' now contains the properties that refer to the car that it relates to. A second edge can be created to point to a better engine should the current one not meet the demands.\n\n![Final graph model](BetterCompatibilityExample.png)\n\nOf course, moving away from the RDBMS model, we get the benefit of holding additional properties on the nodes/edges should they be required, and there is no need to use mapping/bridging tables/nodes to create multiple relationships\n\nI still feel that this has room for improvement, however it is a big step in taking that conceptual mind shift between technologies\n","source":"_posts/graph/neo4j/many-to-many-rdbms-vs-graph.md","raw":"---\ntitle: \"Many to Many (RDBMS to Graph)\"\ndate: \"2018-11-05\"\ntags: [graph, neo4j, sql]\ncategories: \n\t- [Graph - Neo4j]\n---\n\nOne of the systems that I am currently working on is a migration from an Oracle DB to Graph. The ER diagram is similar to what can be seen in the original database.\n\nAn engine 'can' or 'cannot' be fitted into a car. Depending on the complexity required to place the engine into the car, the attributes are stored into a many-to-many (bridging table) and ext table. The ext table sometimes needs to have new columns added to it, should additional requirements come in. If the engine is not fully compatible, a relationship is created to identify the next engine from that manufacturer that would be fully compatible with the car.\n\n![RDBMS ER Diagram](RDBMSCompatibility.png)\n\nThe diagram below, shows how the model was originally ported.\nAs you can see, it mirrors the exact structure of the relational database. Attributes are stored into a 'bridging node' and no properties are stored within the edges. In essence, this is still the relational model. It does technically meet the requirements but doesn't take advantage of the Graph concepts.\n\n![Inital graph model](PoorCompatibilityExample.png)\n\nI modified it to something similar to the diagram below. I'm sure this can still be refined, however this was an attempt to step away from the relational model and make use of the nodes and edges correctly.\n\nThe example shows that the edge ':Compatible' now contains the properties that refer to the car that it relates to. A second edge can be created to point to a better engine should the current one not meet the demands.\n\n![Final graph model](BetterCompatibilityExample.png)\n\nOf course, moving away from the RDBMS model, we get the benefit of holding additional properties on the nodes/edges should they be required, and there is no need to use mapping/bridging tables/nodes to create multiple relationships\n\nI still feel that this has room for improvement, however it is a big step in taking that conceptual mind shift between technologies\n","slug":"graph/neo4j/many-to-many-rdbms-vs-graph","published":1,"updated":"2020-03-09T23:20:50.668Z","_id":"ck7l361jl0019gqrr0kix27kf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>One of the systems that I am currently working on is a migration from an Oracle DB to Graph. The ER diagram is similar to what can be seen in the original database.</p>\n<p>An engine ‘can’ or ‘cannot’ be fitted into a car. Depending on the complexity required to place the engine into the car, the attributes are stored into a many-to-many (bridging table) and ext table. The ext table sometimes needs to have new columns added to it, should additional requirements come in. If the engine is not fully compatible, a relationship is created to identify the next engine from that manufacturer that would be fully compatible with the car.</p>\n<p><img src=\"RDBMSCompatibility.png\" alt=\"RDBMS ER Diagram\"></p>\n<p>The diagram below, shows how the model was originally ported.<br>As you can see, it mirrors the exact structure of the relational database. Attributes are stored into a ‘bridging node’ and no properties are stored within the edges. In essence, this is still the relational model. It does technically meet the requirements but doesn’t take advantage of the Graph concepts.</p>\n<p><img src=\"PoorCompatibilityExample.png\" alt=\"Inital graph model\"></p>\n<p>I modified it to something similar to the diagram below. I’m sure this can still be refined, however this was an attempt to step away from the relational model and make use of the nodes and edges correctly.</p>\n<p>The example shows that the edge ‘:Compatible’ now contains the properties that refer to the car that it relates to. A second edge can be created to point to a better engine should the current one not meet the demands.</p>\n<p><img src=\"BetterCompatibilityExample.png\" alt=\"Final graph model\"></p>\n<p>Of course, moving away from the RDBMS model, we get the benefit of holding additional properties on the nodes/edges should they be required, and there is no need to use mapping/bridging tables/nodes to create multiple relationships</p>\n<p>I still feel that this has room for improvement, however it is a big step in taking that conceptual mind shift between technologies</p>\n","site":{"data":{}},"excerpt":"","more":"<p>One of the systems that I am currently working on is a migration from an Oracle DB to Graph. The ER diagram is similar to what can be seen in the original database.</p>\n<p>An engine ‘can’ or ‘cannot’ be fitted into a car. Depending on the complexity required to place the engine into the car, the attributes are stored into a many-to-many (bridging table) and ext table. The ext table sometimes needs to have new columns added to it, should additional requirements come in. If the engine is not fully compatible, a relationship is created to identify the next engine from that manufacturer that would be fully compatible with the car.</p>\n<p><img src=\"RDBMSCompatibility.png\" alt=\"RDBMS ER Diagram\"></p>\n<p>The diagram below, shows how the model was originally ported.<br>As you can see, it mirrors the exact structure of the relational database. Attributes are stored into a ‘bridging node’ and no properties are stored within the edges. In essence, this is still the relational model. It does technically meet the requirements but doesn’t take advantage of the Graph concepts.</p>\n<p><img src=\"PoorCompatibilityExample.png\" alt=\"Inital graph model\"></p>\n<p>I modified it to something similar to the diagram below. I’m sure this can still be refined, however this was an attempt to step away from the relational model and make use of the nodes and edges correctly.</p>\n<p>The example shows that the edge ‘:Compatible’ now contains the properties that refer to the car that it relates to. A second edge can be created to point to a better engine should the current one not meet the demands.</p>\n<p><img src=\"BetterCompatibilityExample.png\" alt=\"Final graph model\"></p>\n<p>Of course, moving away from the RDBMS model, we get the benefit of holding additional properties on the nodes/edges should they be required, and there is no need to use mapping/bridging tables/nodes to create multiple relationships</p>\n<p>I still feel that this has room for improvement, however it is a big step in taking that conceptual mind shift between technologies</p>\n"},{"title":"Breadcrumb in SQL and Graph","date":"2018-12-17T00:00:00.000Z","_content":"\nIn the past I have been involved in multiple projects that display a hierarchy of some sort. Whether that be an accounting book structure or a people reporting hierarchy.\n\nThey are normally built in a similar way within SQL.. Table contains a row that self joins to a parent ID\nIn the following example I will walk you through building up a table In SQL Server that contains people and who they report to. Then displaying this information as a breadcrumb for a particular person. eg \"Tom>Dick>Harry\"\n\nLets create the table in SQL and populate it:\n\n```sql\nBEGIN TRY\n    DROP TABLE dbo.[User]\nEND TRY\nBEGIN CATCH\n    -- Not created yet\nEND CATCH\n\nGO\n\nCREATE TABLE dbo.[User]\n(\n      UserID INT\n    , UserName VARCHAR(50)\n    , PrimaryLocation VARCHAR(50)\n    , ManagerID INT\n);\n\nWITH X AS\n(\n        SELECT\n              UserID\n            , UserName\n            , PrimaryLocation\n            , ManagerID\n        FROM\n        (\n              VALUES\n               ( 1, 'Fred', 'UK', NULL)\n            ,  ( 2, 'Barney', 'UK', 1)\n            ,  ( 3, 'Wilma', 'UK', NULL)\n            ,  ( 4, 'Betty', 'USA', 3)\n            ,  ( 5, 'Pebbles', 'USA', 2)\n            ,  ( 6, 'Bam Bam', 'CHN', 3)\n            ,  ( 7, 'Tony', 'USA', 1)\n            ,  ( 8, 'Bruce', 'USA', 7)\n            ,  ( 9, 'Odin', 'ASG', 7)\n            ,  ( 10, 'Thor', 'ASG', 9)\n            ,  ( 11, 'Loki', 'ASG', 10)\n            ,  ( 12, 'Peter', 'USA', 11)\n        ) AS Users ( UserID, UserName, PrimaryLocation, ManagerID)\n)\nINSERT INTO dbo.[User]\nSELECT *\nFROM X\n```\n\n![SQL Inserted Data Output](SQLTableOutput.png)\n\nWe shall do the same in NEO to give an similar graphical representation\n\n```sql\nWITH [ {\n    UserID : 1,\n    UserName : \"Fred\",\n    PrimaryLocation : \"UK\"\n  }, {\n    UserID : 2,\n    UserName : \"Barney\",\n    PrimaryLocation : \"UK\"\n  }, {\n    UserID : 3,\n    UserName : \"Wilma\",\n    PrimaryLocation : \"UK\"\n  }, {\n    UserID : 4,\n    UserName : \"Betty\",\n    PrimaryLocation : \"USA\"\n  }, {\n    UserID : 5,\n    UserName : \"Pebbles\",\n    PrimaryLocation : \"USA\"\n  }, {\n    UserID : 6,\n    UserName : \"Bam Bam\",\n    PrimaryLocation : \"CHN\"\n  }, {\n    UserID : 7,\n    UserName : \"Tony\",\n    PrimaryLocation : \"USA\"\n  }, {\n    UserID : 8,\n    UserName : \"Bruce\",\n    PrimaryLocation : \"USA\"\n  }, {\n    UserID : 9,\n    UserName : \"Odin\",\n    PrimaryLocation : \"ASG\"\n  }, {\n    UserID : 10,\n    UserName : \"Thor\",\n    PrimaryLocation : \"ASG\"\n  }, {\n    UserID : 11,\n    UserName : \"Loki\",\n    PrimaryLocation : \"ASG\"\n  }, {\n    UserID : 12,\n    UserName : \"Peter\",\n    PrimaryLocation : \"USA\"\n  } ] AS U\nUNWIND U AS Users\nCREATE (n:User)\nSET n = Users\n;\n\nMATCH (n:User { UserID: 2 }), (m:User { UserID: 1 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 4 }), (m:User { UserID: 3 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 5 }), (m:User { UserID: 2 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 6 }), (m:User { UserID: 3 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 7 }), (m:User { UserID: 1 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 8 }), (m:User { UserID: 7 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 9 }), (m:User { UserID: 7 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 10 }), (m:User { UserID: 9 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 11 }), (m:User { UserID: 10 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 12 }), (m:User { UserID: 11 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n```\n\n![Graph Inserted Data Output](GraphicalDataOutput.png)\n\nWhen focusing on the User \"Peter\" and showing his management chain we would use the following CTE\n\n```sql\nWITH Connections\nAS\n(\n    SELECT\n          UserID\n        , UserName\n        , PrimaryLocation\n        , ManagerID\n        , Position = 0\n        , ChainUserNames = CAST(UserName AS VARCHAR(MAX))\n    FROM dbo.[User]\n    WHERE ManagerID IS NULL -- TOP Levels\n\n    UNION ALL\n\n    SELECT\n          U.UserID\n        , U.UserName\n        , U.PrimaryLocation\n        , U.ManagerID\n        , Position = C.Position + 1\n        , ChainUserNames =  CAST(U.UserName AS VARCHAR(MAX)) + '>' + C.ChainUserNames\n    FROM dbo.[User]             U\n        INNER JOIN Connections  C   ON  C.UserID = U.ManagerID\n)\nSELECT *\nFROM Connections\nWHERE UserID = 12 -- Peter\n```\n\n![SQL Breadcrumb Output](SQLBreadcrumbOutput.png)\n\nSo what this query is doing is the following:\n\n- Building up a self joining CTE\n  - Identifying top level managers .. i.e. people who dont report to anyone\n  - Considering top level managers to be at position '0'\n  - Set up the starting to write the breadcrumb\n  -\n  - Join children to parents\n  - Increase Position (away from top level manager) by 1\n  - Append to the breadcrum\n- Select from the CTE and limit to the one user in question\n\nSo firstly lets starts with just querying this one person in cypher and return his chain\n\n```sql\nMATCH (u:User {UserID: 12})-[:ReportsTo*]->(m:User)\nRETURN u,m\n```\n\n![Grap Output Single Person](GraphOutputSinglePerson.png)\n\nUsing this, we can now compress the relationships into a list.\n\n```sql\nMATCH u:User {UserID: 12})-[:ReportsTo*]->(m:User)\n  WITH\n        COLLECT(m.UserName) AS c\n      , u.UserID AS ID\n      , u.UserName AS Name\n      , u.PrimaryLocation AS Location\nRETURN\n    ID\n  , Name\n  , Location\n  , LENGTH(c) AS Position\n  , apoc.text.join(c, \">\") AS Managers\n```\n\nThe above query does the following:\n\n- Filter on user id 12\n- Link via relationship and keep travesing \"ReportsTo\\*\"\n- Group the parents into a List of User Names\n- Alias the properties we we to bring through\n- Return the alaises\n- Return the list and inject \">\" between each item. I used the APOC function to achive this to save on a little hastle\n\n![Grap Final Output](GraphFinalOutput.png)\n\n> Side note\n\nWhile i was writing this, I made use of a useful query to count the amount of reports that globally roll up to each person.\nI achieved this in cypher by running\n\n```sql\nMATCH (u:User)<-[r:ReportsTo*]-(m:User)\nRETURN\n\t  u.UserName AS UserName\n    , COUNT(r) AS NumberOfReports\n```\n\n![Grap number of reports output](GraphNumberOfReports.png)\n","source":"_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph.md","raw":"---\ntitle: \"Breadcrumb in SQL and Graph\"\ndate: \"2018-12-17\"\ntags: [graph, neo4j, sql]\ncategories: \n\t- [Graph - Neo4j]\n---\n\nIn the past I have been involved in multiple projects that display a hierarchy of some sort. Whether that be an accounting book structure or a people reporting hierarchy.\n\nThey are normally built in a similar way within SQL.. Table contains a row that self joins to a parent ID\nIn the following example I will walk you through building up a table In SQL Server that contains people and who they report to. Then displaying this information as a breadcrumb for a particular person. eg \"Tom>Dick>Harry\"\n\nLets create the table in SQL and populate it:\n\n```sql\nBEGIN TRY\n    DROP TABLE dbo.[User]\nEND TRY\nBEGIN CATCH\n    -- Not created yet\nEND CATCH\n\nGO\n\nCREATE TABLE dbo.[User]\n(\n      UserID INT\n    , UserName VARCHAR(50)\n    , PrimaryLocation VARCHAR(50)\n    , ManagerID INT\n);\n\nWITH X AS\n(\n        SELECT\n              UserID\n            , UserName\n            , PrimaryLocation\n            , ManagerID\n        FROM\n        (\n              VALUES\n               ( 1, 'Fred', 'UK', NULL)\n            ,  ( 2, 'Barney', 'UK', 1)\n            ,  ( 3, 'Wilma', 'UK', NULL)\n            ,  ( 4, 'Betty', 'USA', 3)\n            ,  ( 5, 'Pebbles', 'USA', 2)\n            ,  ( 6, 'Bam Bam', 'CHN', 3)\n            ,  ( 7, 'Tony', 'USA', 1)\n            ,  ( 8, 'Bruce', 'USA', 7)\n            ,  ( 9, 'Odin', 'ASG', 7)\n            ,  ( 10, 'Thor', 'ASG', 9)\n            ,  ( 11, 'Loki', 'ASG', 10)\n            ,  ( 12, 'Peter', 'USA', 11)\n        ) AS Users ( UserID, UserName, PrimaryLocation, ManagerID)\n)\nINSERT INTO dbo.[User]\nSELECT *\nFROM X\n```\n\n![SQL Inserted Data Output](SQLTableOutput.png)\n\nWe shall do the same in NEO to give an similar graphical representation\n\n```sql\nWITH [ {\n    UserID : 1,\n    UserName : \"Fred\",\n    PrimaryLocation : \"UK\"\n  }, {\n    UserID : 2,\n    UserName : \"Barney\",\n    PrimaryLocation : \"UK\"\n  }, {\n    UserID : 3,\n    UserName : \"Wilma\",\n    PrimaryLocation : \"UK\"\n  }, {\n    UserID : 4,\n    UserName : \"Betty\",\n    PrimaryLocation : \"USA\"\n  }, {\n    UserID : 5,\n    UserName : \"Pebbles\",\n    PrimaryLocation : \"USA\"\n  }, {\n    UserID : 6,\n    UserName : \"Bam Bam\",\n    PrimaryLocation : \"CHN\"\n  }, {\n    UserID : 7,\n    UserName : \"Tony\",\n    PrimaryLocation : \"USA\"\n  }, {\n    UserID : 8,\n    UserName : \"Bruce\",\n    PrimaryLocation : \"USA\"\n  }, {\n    UserID : 9,\n    UserName : \"Odin\",\n    PrimaryLocation : \"ASG\"\n  }, {\n    UserID : 10,\n    UserName : \"Thor\",\n    PrimaryLocation : \"ASG\"\n  }, {\n    UserID : 11,\n    UserName : \"Loki\",\n    PrimaryLocation : \"ASG\"\n  }, {\n    UserID : 12,\n    UserName : \"Peter\",\n    PrimaryLocation : \"USA\"\n  } ] AS U\nUNWIND U AS Users\nCREATE (n:User)\nSET n = Users\n;\n\nMATCH (n:User { UserID: 2 }), (m:User { UserID: 1 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 4 }), (m:User { UserID: 3 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 5 }), (m:User { UserID: 2 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 6 }), (m:User { UserID: 3 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 7 }), (m:User { UserID: 1 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 8 }), (m:User { UserID: 7 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 9 }), (m:User { UserID: 7 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 10 }), (m:User { UserID: 9 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 11 }), (m:User { UserID: 10 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n\nMATCH (n:User { UserID: 12 }), (m:User { UserID: 11 })\nWHERE n<>m\nCREATE (n)-[r:ReportsTo]->(m)\nRETURN r;\n```\n\n![Graph Inserted Data Output](GraphicalDataOutput.png)\n\nWhen focusing on the User \"Peter\" and showing his management chain we would use the following CTE\n\n```sql\nWITH Connections\nAS\n(\n    SELECT\n          UserID\n        , UserName\n        , PrimaryLocation\n        , ManagerID\n        , Position = 0\n        , ChainUserNames = CAST(UserName AS VARCHAR(MAX))\n    FROM dbo.[User]\n    WHERE ManagerID IS NULL -- TOP Levels\n\n    UNION ALL\n\n    SELECT\n          U.UserID\n        , U.UserName\n        , U.PrimaryLocation\n        , U.ManagerID\n        , Position = C.Position + 1\n        , ChainUserNames =  CAST(U.UserName AS VARCHAR(MAX)) + '>' + C.ChainUserNames\n    FROM dbo.[User]             U\n        INNER JOIN Connections  C   ON  C.UserID = U.ManagerID\n)\nSELECT *\nFROM Connections\nWHERE UserID = 12 -- Peter\n```\n\n![SQL Breadcrumb Output](SQLBreadcrumbOutput.png)\n\nSo what this query is doing is the following:\n\n- Building up a self joining CTE\n  - Identifying top level managers .. i.e. people who dont report to anyone\n  - Considering top level managers to be at position '0'\n  - Set up the starting to write the breadcrumb\n  -\n  - Join children to parents\n  - Increase Position (away from top level manager) by 1\n  - Append to the breadcrum\n- Select from the CTE and limit to the one user in question\n\nSo firstly lets starts with just querying this one person in cypher and return his chain\n\n```sql\nMATCH (u:User {UserID: 12})-[:ReportsTo*]->(m:User)\nRETURN u,m\n```\n\n![Grap Output Single Person](GraphOutputSinglePerson.png)\n\nUsing this, we can now compress the relationships into a list.\n\n```sql\nMATCH u:User {UserID: 12})-[:ReportsTo*]->(m:User)\n  WITH\n        COLLECT(m.UserName) AS c\n      , u.UserID AS ID\n      , u.UserName AS Name\n      , u.PrimaryLocation AS Location\nRETURN\n    ID\n  , Name\n  , Location\n  , LENGTH(c) AS Position\n  , apoc.text.join(c, \">\") AS Managers\n```\n\nThe above query does the following:\n\n- Filter on user id 12\n- Link via relationship and keep travesing \"ReportsTo\\*\"\n- Group the parents into a List of User Names\n- Alias the properties we we to bring through\n- Return the alaises\n- Return the list and inject \">\" between each item. I used the APOC function to achive this to save on a little hastle\n\n![Grap Final Output](GraphFinalOutput.png)\n\n> Side note\n\nWhile i was writing this, I made use of a useful query to count the amount of reports that globally roll up to each person.\nI achieved this in cypher by running\n\n```sql\nMATCH (u:User)<-[r:ReportsTo*]-(m:User)\nRETURN\n\t  u.UserName AS UserName\n    , COUNT(r) AS NumberOfReports\n```\n\n![Grap number of reports output](GraphNumberOfReports.png)\n","slug":"graph/neo4j/Breadcrumb-in-SQL-and-Graph","published":1,"updated":"2020-03-09T23:20:22.032Z","_id":"ck7l36wqo001agqrr3urgaurf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In the past I have been involved in multiple projects that display a hierarchy of some sort. Whether that be an accounting book structure or a people reporting hierarchy.</p>\n<p>They are normally built in a similar way within SQL.. Table contains a row that self joins to a parent ID<br>In the following example I will walk you through building up a table In SQL Server that contains people and who they report to. Then displaying this information as a breadcrumb for a particular person. eg “Tom&gt;Dick&gt;Harry”</p>\n<p>Lets create the table in SQL and populate it:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY</span><br><span class=\"line\">    <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> dbo.[<span class=\"keyword\">User</span>]</span><br><span class=\"line\"><span class=\"keyword\">END</span> TRY</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> CATCH</span><br><span class=\"line\">    <span class=\"comment\">-- Not created yet</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dbo.[<span class=\"keyword\">User</span>]</span><br><span class=\"line\">(</span><br><span class=\"line\">      UserID <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">    , PrimaryLocation <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">    , ManagerID <span class=\"built_in\">INT</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> X <span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">              UserID</span><br><span class=\"line\">            , UserName</span><br><span class=\"line\">            , PrimaryLocation</span><br><span class=\"line\">            , ManagerID</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        (</span><br><span class=\"line\">              <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">               ( <span class=\"number\">1</span>, <span class=\"string\">'Fred'</span>, <span class=\"string\">'UK'</span>, <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">2</span>, <span class=\"string\">'Barney'</span>, <span class=\"string\">'UK'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">3</span>, <span class=\"string\">'Wilma'</span>, <span class=\"string\">'UK'</span>, <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">4</span>, <span class=\"string\">'Betty'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">5</span>, <span class=\"string\">'Pebbles'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">6</span>, <span class=\"string\">'Bam Bam'</span>, <span class=\"string\">'CHN'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">7</span>, <span class=\"string\">'Tony'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">8</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">9</span>, <span class=\"string\">'Odin'</span>, <span class=\"string\">'ASG'</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">10</span>, <span class=\"string\">'Thor'</span>, <span class=\"string\">'ASG'</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">11</span>, <span class=\"string\">'Loki'</span>, <span class=\"string\">'ASG'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">12</span>, <span class=\"string\">'Peter'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">11</span>)</span><br><span class=\"line\">        ) <span class=\"keyword\">AS</span> <span class=\"keyword\">Users</span> ( UserID, UserName, PrimaryLocation, ManagerID)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dbo.[<span class=\"keyword\">User</span>]</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> X</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"SQLTableOutput.png\" alt=\"SQL Inserted Data Output\"></p>\n<p>We shall do the same in NEO to give an similar graphical representation</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> [ &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">1</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Fred\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"UK\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">2</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Barney\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"UK\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">3</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Wilma\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"UK\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">4</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Betty\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">5</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Pebbles\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">6</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Bam Bam\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"CHN\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">7</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Tony\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">8</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Bruce\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">9</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Odin\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"ASG\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">10</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Thor\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"ASG\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">11</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Loki\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"ASG\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">12</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Peter\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125; ] <span class=\"keyword\">AS</span> U</span><br><span class=\"line\">UNWIND U <span class=\"keyword\">AS</span> <span class=\"keyword\">Users</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n:<span class=\"keyword\">User</span>)</span><br><span class=\"line\"><span class=\"keyword\">SET</span> n = <span class=\"keyword\">Users</span></span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 2 &#125;), (m:User &#123; UserID: 1 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 4 &#125;), (m:User &#123; UserID: 3 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 5 &#125;), (m:User &#123; UserID: 2 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 6 &#125;), (m:User &#123; UserID: 3 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 7 &#125;), (m:User &#123; UserID: 1 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 8 &#125;), (m:User &#123; UserID: 7 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 9 &#125;), (m:User &#123; UserID: 7 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 10 &#125;), (m:User &#123; UserID: 9 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 11 &#125;), (m:User &#123; UserID: 10 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 12 &#125;), (m:User &#123; UserID: 11 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"GraphicalDataOutput.png\" alt=\"Graph Inserted Data Output\"></p>\n<p>When focusing on the User “Peter” and showing his management chain we would use the following CTE</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> Connections</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          UserID</span><br><span class=\"line\">        , UserName</span><br><span class=\"line\">        , PrimaryLocation</span><br><span class=\"line\">        , ManagerID</span><br><span class=\"line\">        , <span class=\"keyword\">Position</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        , ChainUserNames = <span class=\"keyword\">CAST</span>(UserName <span class=\"keyword\">AS</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"keyword\">MAX</span>))</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> dbo.[<span class=\"keyword\">User</span>]</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> ManagerID <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"comment\">-- TOP Levels</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          U.UserID</span><br><span class=\"line\">        , U.UserName</span><br><span class=\"line\">        , U.PrimaryLocation</span><br><span class=\"line\">        , U.ManagerID</span><br><span class=\"line\">        , <span class=\"keyword\">Position</span> = C.Position + <span class=\"number\">1</span></span><br><span class=\"line\">        , ChainUserNames =  <span class=\"keyword\">CAST</span>(U.UserName <span class=\"keyword\">AS</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"keyword\">MAX</span>)) + <span class=\"string\">'&gt;'</span> + C.ChainUserNames</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> dbo.[<span class=\"keyword\">User</span>]             U</span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Connections  C   <span class=\"keyword\">ON</span>  C.UserID = U.ManagerID</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Connections</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> UserID = <span class=\"number\">12</span> <span class=\"comment\">-- Peter</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"SQLBreadcrumbOutput.png\" alt=\"SQL Breadcrumb Output\"></p>\n<p>So what this query is doing is the following:</p>\n<ul>\n<li>Building up a self joining CTE<ul>\n<li>Identifying top level managers .. i.e. people who dont report to anyone</li>\n<li>Considering top level managers to be at position ‘0’</li>\n<li>Set up the starting to write the breadcrumb</li>\n<li></li>\n<li>Join children to parents</li>\n<li>Increase Position (away from top level manager) by 1</li>\n<li>Append to the breadcrum</li>\n</ul>\n</li>\n<li>Select from the CTE and limit to the one user in question</li>\n</ul>\n<p>So firstly lets starts with just querying this one person in cypher and return his chain</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (u:User &#123;UserID: 12&#125;)-[:ReportsTo*]-&gt;(m:User)</span><br><span class=\"line\">RETURN u,m</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"GraphOutputSinglePerson.png\" alt=\"Grap Output Single Person\"></p>\n<p>Using this, we can now compress the relationships into a list.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH u:User &#123;UserID: 12&#125;)-[:ReportsTo*]-&gt;(m:User)</span><br><span class=\"line\">  <span class=\"keyword\">WITH</span></span><br><span class=\"line\">        <span class=\"keyword\">COLLECT</span>(m.UserName) <span class=\"keyword\">AS</span> c</span><br><span class=\"line\">      , u.UserID <span class=\"keyword\">AS</span> <span class=\"keyword\">ID</span></span><br><span class=\"line\">      , u.UserName <span class=\"keyword\">AS</span> <span class=\"keyword\">Name</span></span><br><span class=\"line\">      , u.PrimaryLocation <span class=\"keyword\">AS</span> Location</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span></span><br><span class=\"line\">    <span class=\"keyword\">ID</span></span><br><span class=\"line\">  , <span class=\"keyword\">Name</span></span><br><span class=\"line\">  , Location</span><br><span class=\"line\">  , <span class=\"keyword\">LENGTH</span>(c) <span class=\"keyword\">AS</span> <span class=\"keyword\">Position</span></span><br><span class=\"line\">  , apoc.text.join(c, <span class=\"string\">\"&gt;\"</span>) <span class=\"keyword\">AS</span> Managers</span><br></pre></td></tr></table></figure>\n\n<p>The above query does the following:</p>\n<ul>\n<li>Filter on user id 12</li>\n<li>Link via relationship and keep travesing “ReportsTo*“</li>\n<li>Group the parents into a List of User Names</li>\n<li>Alias the properties we we to bring through</li>\n<li>Return the alaises</li>\n<li>Return the list and inject “&gt;” between each item. I used the APOC function to achive this to save on a little hastle</li>\n</ul>\n<p><img src=\"GraphFinalOutput.png\" alt=\"Grap Final Output\"></p>\n<blockquote>\n<p>Side note</p>\n</blockquote>\n<p>While i was writing this, I made use of a useful query to count the amount of reports that globally roll up to each person.<br>I achieved this in cypher by running</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (u:User)&lt;-[r:ReportsTo*]-(m:User)</span><br><span class=\"line\">RETURN</span><br><span class=\"line\">\t  u.UserName AS UserName</span><br><span class=\"line\">    , COUNT(r) AS NumberOfReports</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"GraphNumberOfReports.png\" alt=\"Grap number of reports output\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>In the past I have been involved in multiple projects that display a hierarchy of some sort. Whether that be an accounting book structure or a people reporting hierarchy.</p>\n<p>They are normally built in a similar way within SQL.. Table contains a row that self joins to a parent ID<br>In the following example I will walk you through building up a table In SQL Server that contains people and who they report to. Then displaying this information as a breadcrumb for a particular person. eg “Tom&gt;Dick&gt;Harry”</p>\n<p>Lets create the table in SQL and populate it:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span> TRY</span><br><span class=\"line\">    <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> dbo.[<span class=\"keyword\">User</span>]</span><br><span class=\"line\"><span class=\"keyword\">END</span> TRY</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> CATCH</span><br><span class=\"line\">    <span class=\"comment\">-- Not created yet</span></span><br><span class=\"line\"><span class=\"keyword\">END</span> CATCH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dbo.[<span class=\"keyword\">User</span>]</span><br><span class=\"line\">(</span><br><span class=\"line\">      UserID <span class=\"built_in\">INT</span></span><br><span class=\"line\">    , UserName <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">    , PrimaryLocation <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">    , ManagerID <span class=\"built_in\">INT</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> X <span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">              UserID</span><br><span class=\"line\">            , UserName</span><br><span class=\"line\">            , PrimaryLocation</span><br><span class=\"line\">            , ManagerID</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        (</span><br><span class=\"line\">              <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">               ( <span class=\"number\">1</span>, <span class=\"string\">'Fred'</span>, <span class=\"string\">'UK'</span>, <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">2</span>, <span class=\"string\">'Barney'</span>, <span class=\"string\">'UK'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">3</span>, <span class=\"string\">'Wilma'</span>, <span class=\"string\">'UK'</span>, <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">4</span>, <span class=\"string\">'Betty'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">5</span>, <span class=\"string\">'Pebbles'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">6</span>, <span class=\"string\">'Bam Bam'</span>, <span class=\"string\">'CHN'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">7</span>, <span class=\"string\">'Tony'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">8</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">9</span>, <span class=\"string\">'Odin'</span>, <span class=\"string\">'ASG'</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">10</span>, <span class=\"string\">'Thor'</span>, <span class=\"string\">'ASG'</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">11</span>, <span class=\"string\">'Loki'</span>, <span class=\"string\">'ASG'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">            ,  ( <span class=\"number\">12</span>, <span class=\"string\">'Peter'</span>, <span class=\"string\">'USA'</span>, <span class=\"number\">11</span>)</span><br><span class=\"line\">        ) <span class=\"keyword\">AS</span> <span class=\"keyword\">Users</span> ( UserID, UserName, PrimaryLocation, ManagerID)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dbo.[<span class=\"keyword\">User</span>]</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> X</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"SQLTableOutput.png\" alt=\"SQL Inserted Data Output\"></p>\n<p>We shall do the same in NEO to give an similar graphical representation</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> [ &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">1</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Fred\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"UK\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">2</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Barney\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"UK\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">3</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Wilma\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"UK\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">4</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Betty\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">5</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Pebbles\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">6</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Bam Bam\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"CHN\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">7</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Tony\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">8</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Bruce\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">9</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Odin\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"ASG\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">10</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Thor\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"ASG\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">11</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Loki\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"ASG\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    UserID : <span class=\"number\">12</span>,</span><br><span class=\"line\">    UserName : <span class=\"string\">\"Peter\"</span>,</span><br><span class=\"line\">    PrimaryLocation : <span class=\"string\">\"USA\"</span></span><br><span class=\"line\">  &#125; ] <span class=\"keyword\">AS</span> U</span><br><span class=\"line\">UNWIND U <span class=\"keyword\">AS</span> <span class=\"keyword\">Users</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n:<span class=\"keyword\">User</span>)</span><br><span class=\"line\"><span class=\"keyword\">SET</span> n = <span class=\"keyword\">Users</span></span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 2 &#125;), (m:User &#123; UserID: 1 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 4 &#125;), (m:User &#123; UserID: 3 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 5 &#125;), (m:User &#123; UserID: 2 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 6 &#125;), (m:User &#123; UserID: 3 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 7 &#125;), (m:User &#123; UserID: 1 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 8 &#125;), (m:User &#123; UserID: 7 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 9 &#125;), (m:User &#123; UserID: 7 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 10 &#125;), (m:User &#123; UserID: 9 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 11 &#125;), (m:User &#123; UserID: 10 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">MATCH (n:User &#123; UserID: 12 &#125;), (m:User &#123; UserID: 11 &#125;)</span><br><span class=\"line\">WHERE n&lt;&gt;m</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> (n)-[r:ReportsTo]-&gt;(m)</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> r;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"GraphicalDataOutput.png\" alt=\"Graph Inserted Data Output\"></p>\n<p>When focusing on the User “Peter” and showing his management chain we would use the following CTE</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> Connections</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          UserID</span><br><span class=\"line\">        , UserName</span><br><span class=\"line\">        , PrimaryLocation</span><br><span class=\"line\">        , ManagerID</span><br><span class=\"line\">        , <span class=\"keyword\">Position</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        , ChainUserNames = <span class=\"keyword\">CAST</span>(UserName <span class=\"keyword\">AS</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"keyword\">MAX</span>))</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> dbo.[<span class=\"keyword\">User</span>]</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> ManagerID <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span> <span class=\"comment\">-- TOP Levels</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">          U.UserID</span><br><span class=\"line\">        , U.UserName</span><br><span class=\"line\">        , U.PrimaryLocation</span><br><span class=\"line\">        , U.ManagerID</span><br><span class=\"line\">        , <span class=\"keyword\">Position</span> = C.Position + <span class=\"number\">1</span></span><br><span class=\"line\">        , ChainUserNames =  <span class=\"keyword\">CAST</span>(U.UserName <span class=\"keyword\">AS</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"keyword\">MAX</span>)) + <span class=\"string\">'&gt;'</span> + C.ChainUserNames</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> dbo.[<span class=\"keyword\">User</span>]             U</span><br><span class=\"line\">        <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Connections  C   <span class=\"keyword\">ON</span>  C.UserID = U.ManagerID</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Connections</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> UserID = <span class=\"number\">12</span> <span class=\"comment\">-- Peter</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"SQLBreadcrumbOutput.png\" alt=\"SQL Breadcrumb Output\"></p>\n<p>So what this query is doing is the following:</p>\n<ul>\n<li>Building up a self joining CTE<ul>\n<li>Identifying top level managers .. i.e. people who dont report to anyone</li>\n<li>Considering top level managers to be at position ‘0’</li>\n<li>Set up the starting to write the breadcrumb</li>\n<li></li>\n<li>Join children to parents</li>\n<li>Increase Position (away from top level manager) by 1</li>\n<li>Append to the breadcrum</li>\n</ul>\n</li>\n<li>Select from the CTE and limit to the one user in question</li>\n</ul>\n<p>So firstly lets starts with just querying this one person in cypher and return his chain</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (u:User &#123;UserID: 12&#125;)-[:ReportsTo*]-&gt;(m:User)</span><br><span class=\"line\">RETURN u,m</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"GraphOutputSinglePerson.png\" alt=\"Grap Output Single Person\"></p>\n<p>Using this, we can now compress the relationships into a list.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH u:User &#123;UserID: 12&#125;)-[:ReportsTo*]-&gt;(m:User)</span><br><span class=\"line\">  <span class=\"keyword\">WITH</span></span><br><span class=\"line\">        <span class=\"keyword\">COLLECT</span>(m.UserName) <span class=\"keyword\">AS</span> c</span><br><span class=\"line\">      , u.UserID <span class=\"keyword\">AS</span> <span class=\"keyword\">ID</span></span><br><span class=\"line\">      , u.UserName <span class=\"keyword\">AS</span> <span class=\"keyword\">Name</span></span><br><span class=\"line\">      , u.PrimaryLocation <span class=\"keyword\">AS</span> Location</span><br><span class=\"line\"><span class=\"keyword\">RETURN</span></span><br><span class=\"line\">    <span class=\"keyword\">ID</span></span><br><span class=\"line\">  , <span class=\"keyword\">Name</span></span><br><span class=\"line\">  , Location</span><br><span class=\"line\">  , <span class=\"keyword\">LENGTH</span>(c) <span class=\"keyword\">AS</span> <span class=\"keyword\">Position</span></span><br><span class=\"line\">  , apoc.text.join(c, <span class=\"string\">\"&gt;\"</span>) <span class=\"keyword\">AS</span> Managers</span><br></pre></td></tr></table></figure>\n\n<p>The above query does the following:</p>\n<ul>\n<li>Filter on user id 12</li>\n<li>Link via relationship and keep travesing “ReportsTo*“</li>\n<li>Group the parents into a List of User Names</li>\n<li>Alias the properties we we to bring through</li>\n<li>Return the alaises</li>\n<li>Return the list and inject “&gt;” between each item. I used the APOC function to achive this to save on a little hastle</li>\n</ul>\n<p><img src=\"GraphFinalOutput.png\" alt=\"Grap Final Output\"></p>\n<blockquote>\n<p>Side note</p>\n</blockquote>\n<p>While i was writing this, I made use of a useful query to count the amount of reports that globally roll up to each person.<br>I achieved this in cypher by running</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MATCH (u:User)&lt;-[r:ReportsTo*]-(m:User)</span><br><span class=\"line\">RETURN</span><br><span class=\"line\">\t  u.UserName AS UserName</span><br><span class=\"line\">    , COUNT(r) AS NumberOfReports</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"GraphNumberOfReports.png\" alt=\"Grap number of reports output\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/sql-server/SCD4/output.png","slug":"output.png","post":"ck7l1ww6j000a1hrreujq42lx","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Using-Merge-to-Capture-Inserts/Identities.png","slug":"Identities.png","post":"ck7l1ww6k000b1hrr2oyq939k","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Using-Merge-to-Capture-Inserts/OutputUsingMerge.png","slug":"OutputUsingMerge.png","post":"ck7l1ww6k000b1hrr2oyq939k","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Using-Merge-to-Capture-Inserts/OutputWithInsert.png","slug":"OutputWithInsert.png","post":"ck7l1ww6k000b1hrr2oyq939k","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/2Rows.png","slug":"2Rows.png","post":"ck7l1ww6g00081hrrfu7r8ehi","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/3MovedRows.png","slug":"3MovedRows.png","post":"ck7l1ww6g00081hrrfu7r8ehi","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/3NewRows.png","slug":"3NewRows.png","post":"ck7l1ww6g00081hrrfu7r8ehi","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/GitHub.png","slug":"GitHub.png","post":"ck7l1ww6g00081hrrfu7r8ehi","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/NewPartition.png","slug":"NewPartition.png","post":"ck7l1ww6g00081hrrfu7r8ehi","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/RowsGone.png","slug":"RowsGone.png","post":"ck7l1ww6g00081hrrfu7r8ehi","modified":0,"renderable":0},{"_id":"source/_posts/sql-server/Loading-Daily-Partitions/SwitchOutOutput.png","slug":"SwitchOutOutput.png","post":"ck7l1ww6g00081hrrfu7r8ehi","modified":0,"renderable":0},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part1/part1-1.png","slug":"part1-1.png","post":"ck7l20gx6000j1hrrgx3k7iau","modified":0,"renderable":0},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part2/part2-1.png","slug":"part2-1.png","post":"ck7l20lvf000k1hrr0gnrbs3g","modified":0,"renderable":0},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part2/part2-2.png","slug":"part2-2.png","post":"ck7l20lvf000k1hrr0gnrbs3g","modified":0,"renderable":0},{"_id":"source/_posts/coding/golang/Golang-and-databases-Part3/part3-1.png","slug":"part3-1.png","post":"ck7l20t1q000l1hrr6t9h0zbu","modified":0,"renderable":0},{"_id":"source/_posts/coding/ssis/SSIS-To-Oracle-Via-ODP/GitHub.png","slug":"GitHub.png","post":"ck7l31h85000sgqrr9yor0tzj","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/many-to-many-rdbms-vs-graph/RDBMSCompatibility.png","slug":"RDBMSCompatibility.png","post":"ck7l361jl0019gqrr0kix27kf","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/many-to-many-rdbms-vs-graph/PoorCompatibilityExample.png","slug":"PoorCompatibilityExample.png","post":"ck7l361jl0019gqrr0kix27kf","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/many-to-many-rdbms-vs-graph/BetterCompatibilityExample.png","slug":"BetterCompatibilityExample.png","post":"ck7l361jl0019gqrr0kix27kf","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphFinalOutput.png","slug":"GraphFinalOutput.png","post":"ck7l36wqo001agqrr3urgaurf","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphOutputSinglePerson.png","slug":"GraphOutputSinglePerson.png","post":"ck7l36wqo001agqrr3urgaurf","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphicalDataOutput.png","slug":"GraphicalDataOutput.png","post":"ck7l36wqo001agqrr3urgaurf","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/GraphNumberOfReports.png","slug":"GraphNumberOfReports.png","post":"ck7l36wqo001agqrr3urgaurf","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/SQLBreadcrumbOutput.png","slug":"SQLBreadcrumbOutput.png","post":"ck7l36wqo001agqrr3urgaurf","modified":0,"renderable":0},{"_id":"source/_posts/graph/neo4j/Breadcrumb-in-SQL-and-Graph/SQLTableOutput.png","slug":"SQLTableOutput.png","post":"ck7l36wqo001agqrr3urgaurf","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck7l1ww6j000a1hrreujq42lx","category_id":"ck7kx85s40002lhrr7j945fdq","_id":"ck7l1ww6k000d1hrr6x5zb1xi"},{"post_id":"ck7l20gx6000j1hrrgx3k7iau","category_id":"ck7l2s3ai0000gqrrb4wl1zax","_id":"ck7l2s3aj0001gqrraz8f0vu4"},{"post_id":"ck7l20lvf000k1hrr0gnrbs3g","category_id":"ck7l2s3ai0000gqrrb4wl1zax","_id":"ck7l2syvv0004gqrrabj32i5b"},{"post_id":"ck7l20t1q000l1hrr6t9h0zbu","category_id":"ck7l2s3ai0000gqrrb4wl1zax","_id":"ck7l2tedr0007gqrratcx66sn"},{"post_id":"ck7l1ww6m000f1hrrc5b3gm7i","category_id":"ck7kx85s40002lhrr7j945fdq","_id":"ck7l2v3ly0009gqrrhvl7h7h1"},{"post_id":"ck7l1ww6l000e1hrrbsnl9tjl","category_id":"ck7kx85s40002lhrr7j945fdq","_id":"ck7l2vde4000bgqrrdy2b7exg"},{"post_id":"ck7l1ww6k000b1hrr2oyq939k","category_id":"ck7kx85s40002lhrr7j945fdq","_id":"ck7l2vnzm000dgqrrdlm37w0x"},{"post_id":"ck7l1ww6g00081hrrfu7r8ehi","category_id":"ck7kx85s40002lhrr7j945fdq","_id":"ck7l2w7nf000fgqrrc3djcch4"},{"post_id":"ck7l1ww6i00091hrr8cjo35qt","category_id":"ck7kx85s40002lhrr7j945fdq","_id":"ck7l2wfks000hgqrrh0vmbp3d"},{"post_id":"ck7l1ww6f00071hrr8xy1gy3y","category_id":"ck7kx85s40002lhrr7j945fdq","_id":"ck7l2wmnw000jgqrrasv06rir"},{"post_id":"ck7l1ww6f00061hrr7whd5oix","category_id":"ck7kx85s40002lhrr7j945fdq","_id":"ck7l2wtej000lgqrr93yg30p9"},{"post_id":"ck7l31h85000sgqrr9yor0tzj","category_id":"ck7l33yc30010gqrr3b6067gz","_id":"ck7l33yc40011gqrrbkk8dtdo"},{"post_id":"ck7l36wqo001agqrr3urgaurf","category_id":"ck7l39caf001cgqrrd5uj9i5h","_id":"ck7l39caf001fgqrr3043d90u"},{"post_id":"ck7l361jl0019gqrr0kix27kf","category_id":"ck7l39caf001cgqrrd5uj9i5h","_id":"ck7l39xzw001mgqrra2h5b97q"}],"PostTag":[{"post_id":"ck7l1ww6j000a1hrreujq42lx","tag_id":"ck7kxa2ad0000mmrrd1060iey","_id":"ck7l1ww6k000c1hrrdjtt8v6o"},{"post_id":"ck7l20gx6000j1hrrgx3k7iau","tag_id":"ck7l28rg4000m1hrrh24kdk4h","_id":"ck7l28rg5000o1hrre85j77a8"},{"post_id":"ck7l20gx6000j1hrrgx3k7iau","tag_id":"ck7l28rg4000n1hrrbcklhy13","_id":"ck7l28rg5000p1hrr68mt566a"},{"post_id":"ck7l20lvf000k1hrr0gnrbs3g","tag_id":"ck7l28rg4000m1hrrh24kdk4h","_id":"ck7l2syvv0002gqrrbg3q4fly"},{"post_id":"ck7l20lvf000k1hrr0gnrbs3g","tag_id":"ck7l28rg4000n1hrrbcklhy13","_id":"ck7l2syvv0003gqrrgq3q441c"},{"post_id":"ck7l20t1q000l1hrr6t9h0zbu","tag_id":"ck7l28rg4000m1hrrh24kdk4h","_id":"ck7l2tedr0005gqrrgzxd9i3a"},{"post_id":"ck7l20t1q000l1hrr6t9h0zbu","tag_id":"ck7l28rg4000n1hrrbcklhy13","_id":"ck7l2tedr0006gqrr6t317djs"},{"post_id":"ck7l1ww6m000f1hrrc5b3gm7i","tag_id":"ck7kxa2ad0000mmrrd1060iey","_id":"ck7l2v3ly0008gqrrawun1ym6"},{"post_id":"ck7l1ww6l000e1hrrbsnl9tjl","tag_id":"ck7kxa2ad0000mmrrd1060iey","_id":"ck7l2vde4000agqrr7gjabgxm"},{"post_id":"ck7l1ww6k000b1hrr2oyq939k","tag_id":"ck7kxa2ad0000mmrrd1060iey","_id":"ck7l2vnzm000cgqrrafyo80cc"},{"post_id":"ck7l1ww6g00081hrrfu7r8ehi","tag_id":"ck7kxa2ad0000mmrrd1060iey","_id":"ck7l2w7ne000egqrr6auba9rq"},{"post_id":"ck7l1ww6i00091hrr8cjo35qt","tag_id":"ck7kxa2ad0000mmrrd1060iey","_id":"ck7l2wfks000ggqrr5d679qgz"},{"post_id":"ck7l1ww6f00071hrr8xy1gy3y","tag_id":"ck7kxa2ad0000mmrrd1060iey","_id":"ck7l2wmnw000igqrraqiada58"},{"post_id":"ck7l1ww6f00061hrr7whd5oix","tag_id":"ck7kxa2ad0000mmrrd1060iey","_id":"ck7l2wtei000kgqrrcny0h755"},{"post_id":"ck7l20gx6000j1hrrgx3k7iau","tag_id":"ck7l2zw24000mgqrrh0ff1c2u","_id":"ck7l2zw24000ngqrrf4qf8r8v"},{"post_id":"ck7l20lvf000k1hrr0gnrbs3g","tag_id":"ck7l2zw24000mgqrrh0ff1c2u","_id":"ck7l2zzza000ogqrr4r22g3hj"},{"post_id":"ck7l20t1q000l1hrr6t9h0zbu","tag_id":"ck7l2zw24000mgqrrh0ff1c2u","_id":"ck7l304q1000pgqrr3528bup2"},{"post_id":"ck7l31h85000sgqrr9yor0tzj","tag_id":"ck7l2zw24000mgqrrh0ff1c2u","_id":"ck7l33ot4000xgqrr440ud1bj"},{"post_id":"ck7l31h85000sgqrr9yor0tzj","tag_id":"ck7l33ot3000tgqrr5z4z3i7z","_id":"ck7l33ot4000ygqrrfbdyahfz"},{"post_id":"ck7l31h85000sgqrr9yor0tzj","tag_id":"ck7l33ot4000vgqrrc6oohiic","_id":"ck7l33ot4000zgqrr3xuph1k2"},{"post_id":"ck7l36wqo001agqrr3urgaurf","tag_id":"ck7l39cae001bgqrre8mtctf6","_id":"ck7l39caf001ggqrr64x85xpa"},{"post_id":"ck7l36wqo001agqrr3urgaurf","tag_id":"ck7l39caf001dgqrr8css3ko3","_id":"ck7l39caf001hgqrr2dju04nc"},{"post_id":"ck7l36wqo001agqrr3urgaurf","tag_id":"ck7l39caf001egqrrhmsj2330","_id":"ck7l39cag001igqrrbc3rhr8w"},{"post_id":"ck7l361jl0019gqrr0kix27kf","tag_id":"ck7l39cae001bgqrre8mtctf6","_id":"ck7l39xzw001jgqrrfqy715qx"},{"post_id":"ck7l361jl0019gqrr0kix27kf","tag_id":"ck7l39caf001dgqrr8css3ko3","_id":"ck7l39xzw001kgqrr0g105afq"},{"post_id":"ck7l361jl0019gqrr0kix27kf","tag_id":"ck7l39caf001egqrrhmsj2330","_id":"ck7l39xzw001lgqrr8s7gdjhz"}],"Tag":[{"name":"SQL","_id":"ck7kxa2ad0000mmrrd1060iey"},{"name":"golang","_id":"ck7l28rg4000m1hrrh24kdk4h"},{"name":"db-services","_id":"ck7l28rg4000n1hrrbcklhy13"},{"name":"coding","_id":"ck7l2zw24000mgqrrh0ff1c2u"},{"name":"c#","_id":"ck7l33ot3000tgqrr5z4z3i7z"},{"name":"ssis","_id":"ck7l33ot4000vgqrrc6oohiic"},{"name":"graph","_id":"ck7l39cae001bgqrre8mtctf6"},{"name":"neo4j","_id":"ck7l39caf001dgqrr8css3ko3"},{"name":"sql","_id":"ck7l39caf001egqrrhmsj2330"}]}}